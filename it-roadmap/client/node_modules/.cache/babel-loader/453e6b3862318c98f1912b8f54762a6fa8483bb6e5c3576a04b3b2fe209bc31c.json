{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\CyberPath\\\\it-roadmap\\\\client\\\\src\\\\components\\\\RoadmapView.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, Panel, ReactFlowProvider, useReactFlow, MarkerType, Connection } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport { PlusCircle, Save, Trash, Plus, X, Link as LinkIcon, LinkOff } from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  courseNode: CourseNode\n};\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave\n}) {\n  _s();\n  const {\n    toast\n  } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    if (initialNodes.length > 0) {\n      setNodes(initialNodes.map(node => ({\n        ...node,\n        type: \"courseNode\",\n        data: {\n          ...node.data,\n          showQuickToggle: true,\n          onQuickToggle: handleCompleteToggle\n        }\n      })));\n    }\n    if (initialEdges.length > 0) {\n      setEdges(initialEdges);\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack(prev => [...prev, {\n      nodes: [...nodes],\n      edges: [...edges]\n    }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n  const onConnect = useCallback(params => {\n    saveCurrentState();\n    // Add marker and apply current edge style settings\n    const newEdge = {\n      ...params,\n      id: `edge-${Date.now()}`,\n      type: \"smoothstep\",\n      animated: true,\n      style: {\n        stroke: \"#6d28d9\"\n      },\n      markerEnd: {\n        type: MarkerType.ArrowClosed,\n        width: 20,\n        height: 20,\n        color: \"#6d28d9\"\n      }\n    };\n    setEdges(eds => addEdge(newEdge, eds));\n    toast({\n      title: \"Connection added\",\n      description: \"A new connection has been created between nodes\"\n    });\n  }, [setEdges, saveCurrentState, toast]);\n  const onNodeClick = useCallback((event, node) => {\n    event.stopPropagation();\n    if (editMode === \"delete\") {\n      // Delete mode: remove the node\n      saveCurrentState();\n      setNodes(nodes.filter(n => n.id !== node.id));\n      // Also remove any connected edges\n      setEdges(edges.filter(e => e.source !== node.id && e.target !== node.id));\n      toast({\n        title: \"Node deleted\",\n        description: `${node.data.label} has been removed from the roadmap`\n      });\n    } else if (editMode === \"connect\" && selectedNode) {\n      // Connect mode: create an edge between selectedNode and this node\n      if (selectedNode.id !== node.id) {\n        const newEdge = {\n          id: `edge-${Date.now()}`,\n          source: selectedNode.id,\n          target: node.id,\n          type: \"smoothstep\",\n          animated: true,\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20,\n            color: \"#6d28d9\"\n          }\n        };\n        saveCurrentState();\n        setEdges(eds => [...eds, newEdge]);\n        setSelectedNode(null);\n        setEditMode(\"select\");\n        toast({\n          title: \"Connection created\",\n          description: `Connected ${selectedNode.data.label} to ${node.data.label}`\n        });\n      }\n    } else if (editMode === \"select\") {\n      // Regular select mode: show node details\n      setSelectedNode(node);\n    }\n  }, [editMode, selectedNode, nodes, edges, setNodes, setEdges, saveCurrentState, toast]);\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\"\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n  const handleCompleteToggle = useCallback((nodeId, completed) => {\n    var _nodes$find;\n    if (readOnly) return;\n\n    // Get the current timestamp\n    const completedAt = completed ? new Date().toISOString() : null;\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            completed,\n            completedAt\n          }\n        };\n      }\n      return node;\n    }));\n    toast({\n      title: completed ? \"Course marked as completed\" : \"Course marked as incomplete\",\n      description: `You've ${completed ? \"completed\" : \"unmarked\"} ${(_nodes$find = nodes.find(n => n.id === nodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.label}`\n    });\n  }, [nodes, setNodes, toast, readOnly]);\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      onSave(nodes, edges);\n    } else {\n      toast({\n        title: \"Roadmap saved\",\n        description: \"Your roadmap has been saved successfully\"\n      });\n    }\n  }, [nodes, edges, onSave, toast]);\n  const handleAddCourse = useCallback(courseData => {\n    saveCurrentState();\n\n    // Find a position that doesn't overlap with existing nodes\n    let position = {\n      x: 100,\n      y: 100\n    };\n\n    // If we have a reactFlowInstance, try to center the new node in the viewport\n    if (reactFlowInstance) {\n      const {\n        x,\n        y,\n        zoom\n      } = reactFlowInstance.getViewport();\n      position = reactFlowInstance.screenToFlowPosition({\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      });\n\n      // Avoid overlapping with existing nodes by adding some offset\n      const existingPositions = nodes.map(node => node.position);\n      if (existingPositions.some(pos => Math.abs(pos.x - position.x) < 100 && Math.abs(pos.y - position.y) < 100)) {\n        position.x += 150;\n        position.y += 50;\n      }\n    }\n    const newNodeId = `node-${Date.now()}`;\n    const newNode = {\n      id: newNodeId,\n      type: \"courseNode\",\n      position,\n      data: {\n        ...courseData,\n        completed: false,\n        completedAt: null,\n        showQuickToggle: true,\n        onQuickToggle: handleCompleteToggle,\n        id: newNodeId\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setIsAddCourseOpen(false);\n    toast({\n      title: \"Course added\",\n      description: `${courseData.label} has been added to the roadmap`\n    });\n  }, [setNodes, toast, reactFlowInstance, nodes, handleCompleteToggle, saveCurrentState]);\n  const handleDeleteNode = useCallback(nodeId => {\n    saveCurrentState();\n\n    // Remove the node\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n    // Remove connected edges\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n    setSelectedNode(null);\n    toast({\n      title: \"Node deleted\",\n      description: \"The node has been removed from the roadmap\"\n    });\n  }, [setNodes, setEdges, toast, saveCurrentState]);\n  const handleUpdateNodeStyle = useCallback((nodeId, style) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            ...style\n          }\n        };\n      }\n      return node;\n    }));\n  }, [setNodes]);\n  const onEdgeClick = useCallback((event, edge) => {\n    if (editMode === \"delete\") {\n      saveCurrentState();\n\n      // Delete the edge\n      setEdges(eds => eds.filter(e => e.id !== edge.id));\n      toast({\n        title: \"Connection removed\",\n        description: \"The connection between nodes has been removed\"\n      });\n    }\n  }, [setEdges, editMode, saveCurrentState, toast]);\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const previousState = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, currentState]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const nextState = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, currentState]);\n    setRedoStack(prev => prev.slice(0, -1));\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(node => {\n      var _node$data$category;\n      return ((_node$data$category = node.data.category) === null || _node$data$category === void 0 ? void 0 : _node$data$category.toLowerCase()) === selectedCategory.toLowerCase();\n    });\n  }, [nodes, selectedCategory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    className: \"h-full w-full\",\n    children: [isEditing && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"top-left\",\n      className: \"bg-cyberpunk-darker/90 p-2 rounded-md border border-purple-500/30 mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-2 mb-2 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            className: `${editMode === \"select\" ? \"bg-purple-600 hover:bg-purple-700 text-white\" : \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"}`,\n            onClick: () => setEditMode(\"select\"),\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            className: `${editMode === \"connect\" ? \"bg-blue-600 hover:bg-blue-700 text-white\" : \"bg-cyberpunk-darker border border-purple-500/30 text-blue-300 hover:bg-blue-900/20\"}`,\n            onClick: () => {\n              setEditMode(\"connect\");\n              toast({\n                title: \"Connect mode\",\n                description: \"Click on a source node, then click on a target node to create a connection\"\n              });\n            },\n            children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n              className: \"h-4 w-4 mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 17\n            }, this), \" Connect\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            className: `${editMode === \"delete\" ? \"bg-red-600 hover:bg-red-700 text-white\" : \"bg-cyberpunk-darker border border-red-500/30 text-red-300 hover:bg-red-900/20\"}`,\n            onClick: () => {\n              setEditMode(\"delete\");\n              toast({\n                title: \"Delete mode\",\n                description: \"Click on a node or connection to delete it\"\n              });\n            },\n            children: [/*#__PURE__*/_jsxDEV(Trash, {\n              className: \"h-4 w-4 mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this), \" Delete\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            className: \"bg-green-600 hover:bg-green-700 text-white\",\n            onClick: () => setIsAddCourseOpen(true),\n            children: [/*#__PURE__*/_jsxDEV(Plus, {\n              className: \"h-4 w-4 mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this), \" Add Node\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-2 justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n              onClick: handleUndo,\n              disabled: undoStack.length === 0,\n              children: \"Undo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n              onClick: handleRedo,\n              disabled: redoStack.length === 0,\n              children: \"Redo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"bg-purple-600 hover:bg-purple-700 text-white\",\n            size: \"sm\",\n            onClick: handleSaveRoadmap,\n            children: [/*#__PURE__*/_jsxDEV(Save, {\n              className: \"h-4 w-4 mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 17\n            }, this), \" Save\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: filteredNodes(),\n        edges: edges,\n        onNodesChange: isEditing ? onNodesChange : undefined,\n        onEdgesChange: isEditing ? onEdgesChange : undefined,\n        onConnect: isEditing ? onConnect : undefined,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        onPaneClick: onPaneClick,\n        nodeTypes: nodeTypes,\n        onNodeDragStop: onNodeDragStop,\n        nodesDraggable: isEditing,\n        nodesConnectable: isEditing && editMode === \"connect\",\n        elementsSelectable: !readOnly,\n        defaultEdgeOptions: {\n          type: \"smoothstep\",\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          animated: true\n        },\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 12,\n          size: 1,\n          color: \"#6d28d9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(CourseInfoPanel, {\n      node: selectedNode,\n      onClose: () => setSelectedNode(null),\n      onCompleteToggle: handleCompleteToggle,\n      onDelete: isEditing ? handleDeleteNode : undefined,\n      onUpdateStyle: handleUpdateNodeStyle,\n      isAdmin: isEditing,\n      readOnly: readOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 9\n    }, this), isAddCourseOpen && /*#__PURE__*/_jsxDEV(AddCourseDialog, {\n      open: isAddCourseOpen,\n      onClose: () => setIsAddCourseOpen(false),\n      onAdd: handleAddCourse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapViewInner, \"XT7/XerJy9N21yZ0lQNSmiEz4bs=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow];\n});\n_c = RoadmapViewInner;\nexport default function RoadmapView(props) {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(RoadmapViewInner, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 556,\n    columnNumber: 5\n  }, this);\n}\n_c2 = RoadmapView;\nvar _c, _c2;\n$RefreshReg$(_c, \"RoadmapViewInner\");\n$RefreshReg$(_c2, \"RoadmapView\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useCallback","useEffect","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","CourseNode","CourseInfoPanel","AddCourseDialog","jsxDEV","_jsxDEV","nodeTypes","courseNode","RoadmapViewInner","id","initialNodes","initialEdges","isEditing","readOnly","onSave","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","length","map","node","type","data","showQuickToggle","onQuickToggle","handleCompleteToggle","saveCurrentState","prev","onConnect","params","newEdge","Date","now","animated","style","stroke","markerEnd","ArrowClosed","width","height","color","eds","title","description","onNodeClick","event","stopPropagation","filter","n","e","source","target","label","onPaneClick","nodeId","completed","_nodes$find","completedAt","toISOString","nds","find","handleSaveRoadmap","handleAddCourse","courseData","position","x","y","zoom","getViewport","screenToFlowPosition","window","innerWidth","innerHeight","existingPositions","some","pos","Math","abs","newNodeId","newNode","handleDeleteNode","edge","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","ref","className","children","size","onClick","fileName","lineNumber","columnNumber","disabled","undefined","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitView","variant","gap","onClose","onCompleteToggle","onDelete","onUpdateStyle","isAdmin","open","onAdd","_c","RoadmapView","props","_c2","$RefreshReg$"],"sources":["D:/CyberPath/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Panel,\n  ReactFlowProvider,\n  useReactFlow,\n  MarkerType,\n  Connection,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport {\n  PlusCircle,\n  Save,\n  Trash,\n  Plus,\n  X,\n  Link as LinkIcon,\n  LinkOff,\n} from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\n\nconst nodeTypes = {\n  courseNode: CourseNode,\n};\n\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n}) {\n  const { toast } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    if (initialNodes.length > 0) {\n      setNodes(\n        initialNodes.map((node) => ({\n          ...node,\n          type: \"courseNode\",\n          data: {\n            ...node.data,\n            showQuickToggle: true,\n            onQuickToggle: handleCompleteToggle,\n          },\n        }))\n      );\n    }\n    if (initialEdges.length > 0) {\n      setEdges(initialEdges);\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack((prev) => [...prev, { nodes: [...nodes], edges: [...edges] }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n\n  const onConnect = useCallback(\n    (params) => {\n      saveCurrentState();\n      // Add marker and apply current edge style settings\n      const newEdge = {\n        ...params,\n        id: `edge-${Date.now()}`,\n        type: \"smoothstep\",\n        animated: true,\n        style: { stroke: \"#6d28d9\" },\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          width: 20,\n          height: 20,\n          color: \"#6d28d9\",\n        },\n      };\n      setEdges((eds) => addEdge(newEdge, eds));\n\n      toast({\n        title: \"Connection added\",\n        description: \"A new connection has been created between nodes\",\n      });\n    },\n    [setEdges, saveCurrentState, toast]\n  );\n\n  const onNodeClick = useCallback(\n    (event, node) => {\n      event.stopPropagation();\n\n      if (editMode === \"delete\") {\n        // Delete mode: remove the node\n        saveCurrentState();\n        setNodes(nodes.filter((n) => n.id !== node.id));\n        // Also remove any connected edges\n        setEdges(\n          edges.filter((e) => e.source !== node.id && e.target !== node.id)\n        );\n\n        toast({\n          title: \"Node deleted\",\n          description: `${node.data.label} has been removed from the roadmap`,\n        });\n      } else if (editMode === \"connect\" && selectedNode) {\n        // Connect mode: create an edge between selectedNode and this node\n        if (selectedNode.id !== node.id) {\n          const newEdge = {\n            id: `edge-${Date.now()}`,\n            source: selectedNode.id,\n            target: node.id,\n            type: \"smoothstep\",\n            animated: true,\n            style: { stroke: \"#6d28d9\" },\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\",\n            },\n          };\n\n          saveCurrentState();\n          setEdges((eds) => [...eds, newEdge]);\n          setSelectedNode(null);\n          setEditMode(\"select\");\n\n          toast({\n            title: \"Connection created\",\n            description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\n          });\n        }\n      } else if (editMode === \"select\") {\n        // Regular select mode: show node details\n        setSelectedNode(node);\n      }\n    },\n    [\n      editMode,\n      selectedNode,\n      nodes,\n      edges,\n      setNodes,\n      setEdges,\n      saveCurrentState,\n      toast,\n    ]\n  );\n\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\",\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n\n  const handleCompleteToggle = useCallback(\n    (nodeId, completed) => {\n      if (readOnly) return;\n\n      // Get the current timestamp\n      const completedAt = completed ? new Date().toISOString() : null;\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                completed,\n                completedAt,\n              },\n            };\n          }\n          return node;\n        })\n      );\n\n      toast({\n        title: completed\n          ? \"Course marked as completed\"\n          : \"Course marked as incomplete\",\n        description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\n          nodes.find((n) => n.id === nodeId)?.data.label\n        }`,\n      });\n    },\n    [nodes, setNodes, toast, readOnly]\n  );\n\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      onSave(nodes, edges);\n    } else {\n      toast({\n        title: \"Roadmap saved\",\n        description: \"Your roadmap has been saved successfully\",\n      });\n    }\n  }, [nodes, edges, onSave, toast]);\n\n  const handleAddCourse = useCallback(\n    (courseData) => {\n      saveCurrentState();\n\n      // Find a position that doesn't overlap with existing nodes\n      let position = { x: 100, y: 100 };\n\n      // If we have a reactFlowInstance, try to center the new node in the viewport\n      if (reactFlowInstance) {\n        const { x, y, zoom } = reactFlowInstance.getViewport();\n        position = reactFlowInstance.screenToFlowPosition({\n          x: window.innerWidth / 2,\n          y: window.innerHeight / 2,\n        });\n\n        // Avoid overlapping with existing nodes by adding some offset\n        const existingPositions = nodes.map((node) => node.position);\n        if (\n          existingPositions.some(\n            (pos) =>\n              Math.abs(pos.x - position.x) < 100 &&\n              Math.abs(pos.y - position.y) < 100\n          )\n        ) {\n          position.x += 150;\n          position.y += 50;\n        }\n      }\n\n      const newNodeId = `node-${Date.now()}`;\n      const newNode = {\n        id: newNodeId,\n        type: \"courseNode\",\n        position,\n        data: {\n          ...courseData,\n          completed: false,\n          completedAt: null,\n          showQuickToggle: true,\n          onQuickToggle: handleCompleteToggle,\n          id: newNodeId,\n        },\n      };\n\n      setNodes((nds) => [...nds, newNode]);\n      setIsAddCourseOpen(false);\n\n      toast({\n        title: \"Course added\",\n        description: `${courseData.label} has been added to the roadmap`,\n      });\n    },\n    [\n      setNodes,\n      toast,\n      reactFlowInstance,\n      nodes,\n      handleCompleteToggle,\n      saveCurrentState,\n    ]\n  );\n\n  const handleDeleteNode = useCallback(\n    (nodeId) => {\n      saveCurrentState();\n\n      // Remove the node\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId));\n      // Remove connected edges\n      setEdges((eds) =>\n        eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\n      );\n\n      setSelectedNode(null);\n\n      toast({\n        title: \"Node deleted\",\n        description: \"The node has been removed from the roadmap\",\n      });\n    },\n    [setNodes, setEdges, toast, saveCurrentState]\n  );\n\n  const handleUpdateNodeStyle = useCallback(\n    (nodeId, style) => {\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                ...style,\n              },\n            };\n          }\n          return node;\n        })\n      );\n    },\n    [setNodes]\n  );\n\n  const onEdgeClick = useCallback(\n    (event, edge) => {\n      if (editMode === \"delete\") {\n        saveCurrentState();\n\n        // Delete the edge\n        setEdges((eds) => eds.filter((e) => e.id !== edge.id));\n\n        toast({\n          title: \"Connection removed\",\n          description: \"The connection between nodes has been removed\",\n        });\n      }\n    },\n    [setEdges, editMode, saveCurrentState, toast]\n  );\n\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const previousState = undoStack[undoStack.length - 1];\n\n    setRedoStack((prev) => [...prev, currentState]);\n    setUndoStack((prev) => prev.slice(0, -1));\n\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const nextState = redoStack[redoStack.length - 1];\n\n    setUndoStack((prev) => [...prev, currentState]);\n    setRedoStack((prev) => prev.slice(0, -1));\n\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(\n      (node) =>\n        node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\n    );\n  }, [nodes, selectedCategory]);\n\n  return (\n    <div ref={reactFlowWrapper} className=\"h-full w-full\">\n      {isEditing && (\n        <Panel\n          position=\"top-left\"\n          className=\"bg-cyberpunk-darker/90 p-2 rounded-md border border-purple-500/30 mb-4\"\n        >\n          <div className=\"flex flex-col gap-2\">\n            <div className=\"flex gap-2 mb-2 items-center\">\n              <Button\n                size=\"sm\"\n                className={`${\n                  editMode === \"select\"\n                    ? \"bg-purple-600 hover:bg-purple-700 text-white\"\n                    : \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n                }`}\n                onClick={() => setEditMode(\"select\")}\n              >\n                Select\n              </Button>\n              <Button\n                size=\"sm\"\n                className={`${\n                  editMode === \"connect\"\n                    ? \"bg-blue-600 hover:bg-blue-700 text-white\"\n                    : \"bg-cyberpunk-darker border border-purple-500/30 text-blue-300 hover:bg-blue-900/20\"\n                }`}\n                onClick={() => {\n                  setEditMode(\"connect\");\n                  toast({\n                    title: \"Connect mode\",\n                    description:\n                      \"Click on a source node, then click on a target node to create a connection\",\n                  });\n                }}\n              >\n                <LinkIcon className=\"h-4 w-4 mr-1\" /> Connect\n              </Button>\n              <Button\n                size=\"sm\"\n                className={`${\n                  editMode === \"delete\"\n                    ? \"bg-red-600 hover:bg-red-700 text-white\"\n                    : \"bg-cyberpunk-darker border border-red-500/30 text-red-300 hover:bg-red-900/20\"\n                }`}\n                onClick={() => {\n                  setEditMode(\"delete\");\n                  toast({\n                    title: \"Delete mode\",\n                    description: \"Click on a node or connection to delete it\",\n                  });\n                }}\n              >\n                <Trash className=\"h-4 w-4 mr-1\" /> Delete\n              </Button>\n              <Button\n                size=\"sm\"\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n                onClick={() => setIsAddCourseOpen(true)}\n              >\n                <Plus className=\"h-4 w-4 mr-1\" /> Add Node\n              </Button>\n            </div>\n            <div className=\"flex gap-2 justify-between\">\n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"sm\"\n                  className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n                  onClick={handleUndo}\n                  disabled={undoStack.length === 0}\n                >\n                  Undo\n                </Button>\n                <Button\n                  size=\"sm\"\n                  className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n                  onClick={handleRedo}\n                  disabled={redoStack.length === 0}\n                >\n                  Redo\n                </Button>\n              </div>\n\n              <Button\n                className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                size=\"sm\"\n                onClick={handleSaveRoadmap}\n              >\n                <Save className=\"h-4 w-4 mr-1\" /> Save\n              </Button>\n            </div>\n          </div>\n        </Panel>\n      )}\n\n      <div className=\"h-full\">\n        <ReactFlow\n          nodes={filteredNodes()}\n          edges={edges}\n          onNodesChange={isEditing ? onNodesChange : undefined}\n          onEdgesChange={isEditing ? onEdgesChange : undefined}\n          onConnect={isEditing ? onConnect : undefined}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          onPaneClick={onPaneClick}\n          nodeTypes={nodeTypes}\n          onNodeDragStop={onNodeDragStop}\n          nodesDraggable={isEditing}\n          nodesConnectable={isEditing && editMode === \"connect\"}\n          elementsSelectable={!readOnly}\n          defaultEdgeOptions={{\n            type: \"smoothstep\",\n            style: { stroke: \"#6d28d9\" },\n            animated: true,\n          }}\n          fitView\n        >\n          <Controls />\n          <MiniMap />\n          <Background variant=\"dots\" gap={12} size={1} color=\"#6d28d9\" />\n        </ReactFlow>\n      </div>\n\n      {selectedNode && (\n        <CourseInfoPanel\n          node={selectedNode}\n          onClose={() => setSelectedNode(null)}\n          onCompleteToggle={handleCompleteToggle}\n          onDelete={isEditing ? handleDeleteNode : undefined}\n          onUpdateStyle={handleUpdateNodeStyle}\n          isAdmin={isEditing}\n          readOnly={readOnly}\n        />\n      )}\n\n      {isAddCourseOpen && (\n        <AddCourseDialog\n          open={isAddCourseOpen}\n          onClose={() => setIsAddCourseOpen(false)}\n          onAdd={handleAddCourse}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function RoadmapView(props) {\n  return (\n    <ReactFlowProvider>\n      <RoadmapViewInner {...props} />\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}