{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\CyberPath\\\\it-roadmap\\\\client\\\\src\\\\components\\\\RoadmapView.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, Panel, ReactFlowProvider, useReactFlow, MarkerType, Connection } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport { PlusCircle, Save, Trash, Plus, X, Link as LinkIcon, LinkOff, Palette } from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  courseNode: CourseNode\n};\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate\n}) {\n  _s();\n  const {\n    toast\n  } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const isInitialMount = useRef(true);\n\n  // Define handleCompleteToggle before it's used\n  const handleCompleteToggle = useCallback((nodeId, completed) => {\n    var _nodes$find;\n    if (readOnly) return;\n\n    // Get the current timestamp\n    const completedAt = completed ? new Date().toISOString() : null;\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            completed,\n            completedAt\n          }\n        };\n      }\n      return node;\n    }));\n    toast({\n      title: completed ? \"Course marked as completed\" : \"Course marked as incomplete\",\n      description: `You've ${completed ? \"completed\" : \"unmarked\"} ${(_nodes$find = nodes.find(n => n.id === nodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.label}`\n    });\n  }, [nodes, setNodes, toast, readOnly]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    // Skip effect if no initial data\n    if (!(initialNodes !== null && initialNodes !== void 0 && initialNodes.length) && !(initialEdges !== null && initialEdges !== void 0 && initialEdges.length)) {\n      return;\n    }\n\n    // Only run this effect once on initial mount\n    if (isInitialMount.current) {\n      console.log(\"[FLOW] Initial mount, processing nodes:\", initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length);\n      if ((initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length) > 0) {\n        // Process nodes once with required properties for display\n        const processedNodes = initialNodes.map(node => {\n          var _node$data;\n          return {\n            ...node,\n            type: \"courseNode\",\n            // Ensure position exists\n            position: node.position || {\n              x: Math.random() * 500,\n              y: Math.random() * 300\n            },\n            data: {\n              ...node.data,\n              showQuickToggle: true,\n              onQuickToggle: handleCompleteToggle,\n              // Ensure label exists\n              label: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.label) || \"Untitled Node\"\n            }\n          };\n        });\n        console.log(\"[FLOW] Setting initial nodes with processed data\");\n        setNodes(processedNodes);\n      }\n      if ((initialEdges === null || initialEdges === void 0 ? void 0 : initialEdges.length) > 0) {\n        console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\n        setEdges([...initialEdges]);\n      }\n\n      // Schedule viewport setup after nodes are rendered\n      const timeoutId = setTimeout(() => {\n        const viewportEl = document.querySelector(\".react-flow__viewport\");\n        if (viewportEl) {\n          viewportEl.style.transitionProperty = \"transform\";\n          viewportEl.style.transitionDuration = \"0.2s\";\n        }\n      }, 300);\n      isInitialMount.current = false;\n      return () => clearTimeout(timeoutId);\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle]);\n\n  // Separate effect to monitor changes in props vs internal state\n  useEffect(() => {\n    if (isInitialMount.current) return; // Skip on initial mount\n\n    // Check if initialNodes changed after first render (rare, but possible)\n    if (initialNodes && initialNodes.length > 0) {\n      // Compare IDs only to prevent needless updates\n      const currentIds = new Set(nodes.map(n => n.id));\n      const initialIds = new Set(initialNodes.map(n => n.id));\n\n      // Only update if different nodes are provided\n      if (initialIds.size !== currentIds.size || initialNodes.some(n => !currentIds.has(n.id))) {\n        console.log(\"[FLOW] External nodes updated, refreshing\");\n        const processedNodes = initialNodes.map(node => {\n          var _node$data2;\n          return {\n            ...node,\n            type: \"courseNode\",\n            position: node.position || {\n              x: Math.random() * 500,\n              y: Math.random() * 300\n            },\n            data: {\n              ...node.data,\n              showQuickToggle: true,\n              onQuickToggle: handleCompleteToggle,\n              label: ((_node$data2 = node.data) === null || _node$data2 === void 0 ? void 0 : _node$data2.label) || \"Untitled Node\"\n            }\n          };\n        });\n        setNodes(processedNodes);\n      }\n    }\n  }, [initialNodes, nodes, setNodes, handleCompleteToggle]);\n\n  // Update parent component with internal changes\n  useEffect(() => {\n    if (isInitialMount.current) return; // Skip during initial render\n\n    const timer = setTimeout(() => {\n      if ((nodes.length > 0 || edges.length > 0) && typeof onInternalUpdate === \"function\") {\n        console.log(\"[FLOW] Updating parent with current state\");\n        onInternalUpdate(nodes, edges);\n      }\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack(prev => [...prev, {\n      nodes: [...nodes],\n      edges: [...edges]\n    }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n  const onConnect = useCallback(params => {\n    saveCurrentState();\n    // Add marker and apply current edge style settings\n    const newEdge = {\n      ...params,\n      id: `edge-${Date.now()}`,\n      type: \"smoothstep\",\n      animated: true,\n      style: {\n        stroke: \"#6d28d9\"\n      },\n      // Only add marker if connection type is arrow\n      ...(connectionType === \"arrow\" && {\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          width: 20,\n          height: 20,\n          color: \"#6d28d9\"\n        }\n      }),\n      data: {\n        connectionType\n      }\n    };\n    setEdges(eds => addEdge(newEdge, eds));\n    toast({\n      title: \"Connection added\",\n      description: \"A new connection has been created between nodes\"\n    });\n  }, [setEdges, saveCurrentState, toast, connectionType]);\n  const onNodeClick = useCallback((event, node) => {\n    event.stopPropagation();\n    if (editMode === \"delete\") {\n      // Delete mode: remove the node\n      saveCurrentState();\n      setNodes(nodes.filter(n => n.id !== node.id));\n      // Also remove any connected edges\n      setEdges(edges.filter(e => e.source !== node.id && e.target !== node.id));\n      toast({\n        title: \"Node deleted\",\n        description: `${node.data.label} has been removed from the roadmap`\n      });\n    } else if (editMode === \"connect\" && selectedNode) {\n      // Connect mode: create an edge between selectedNode and this node\n      if (selectedNode.id !== node.id) {\n        const newEdge = {\n          id: `edge-${Date.now()}`,\n          source: selectedNode.id,\n          target: node.id,\n          type: \"smoothstep\",\n          animated: true,\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        };\n        saveCurrentState();\n        setEdges(eds => [...eds, newEdge]);\n        setSelectedNode(null);\n        setEditMode(\"select\");\n        toast({\n          title: \"Connection created\",\n          description: `Connected ${selectedNode.data.label} to ${node.data.label}`\n        });\n      }\n    } else if (editMode === \"select\") {\n      // Regular select mode: show node details\n      setSelectedNode(node);\n    }\n  }, [editMode, selectedNode, nodes, edges, setNodes, setEdges, saveCurrentState, toast]);\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\"\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"[VIEW] Starting roadmap save process\");\n      console.log(\"[VIEW] Current nodes:\", nodes.length);\n      console.log(\"[VIEW] Current edges:\", edges.length);\n\n      // Đảm bảo không có node nào bị thiếu dữ liệu quan trọng\n      const cleanedNodes = nodes.map(node => {\n        var _node$data3;\n        if (!node.id) {\n          console.error(\"[VIEW] Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        }\n        if (!node.position) {\n          console.error(\"[VIEW] Node missing position:\", node);\n          // Default position\n          node.position = {\n            x: 0,\n            y: 0\n          };\n        }\n        if (!node.data) {\n          console.error(\"[VIEW] Node missing data:\", node);\n          // Default minimal data\n          node.data = {\n            label: \"Node \" + node.id\n          };\n        }\n\n        // Đảm bảo node có đủ thông tin cần thiết\n        return {\n          ...node,\n          type: node.type || \"courseNode\",\n          // Loại node mặc định\n          data: {\n            ...(node.data || {}),\n            id: node.id,\n            // Đảm bảo ID trong data giống với ID của node\n            label: ((_node$data3 = node.data) === null || _node$data3 === void 0 ? void 0 : _node$data3.label) || \"Untitled\" // Ít nhất phải có nhãn\n          }\n        };\n      });\n\n      // Đảm bảo các edge có đủ thông tin cần thiết\n      const cleanedEdges = edges.map(edge => {\n        if (!edge.source || !edge.target) {\n          console.error(\"[VIEW] Edge missing source or target:\", edge);\n          return null; // Skip invalid edges\n        }\n        if (!edge.id) {\n          console.error(\"[VIEW] Edge missing ID:\", edge);\n          // Generate a unique ID if missing\n          edge.id = `edge_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        }\n        return {\n          ...edge,\n          type: edge.type || \"smoothstep\" // Loại edge mặc định\n        };\n      }).filter(Boolean); // Lọc bỏ các edge null\n\n      console.log(\"[VIEW] Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"[VIEW] Node data sample:\", cleanedNodes[0]);\n      console.log(\"[VIEW] Cleaned edges for saving:\", cleanedEdges.length);\n      if (cleanedEdges.length > 0) {\n        console.log(\"[VIEW] Edge data sample:\", cleanedEdges[0]);\n      }\n\n      // Thông báo cho người dùng\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`\n      });\n\n      // Lưu dữ liệu vào trạng thái cục bộ\n      setNodes(cleanedNodes);\n      setEdges(cleanedEdges);\n\n      // Gọi hàm callback onSave để lưu dữ liệu\n      console.log(\"[VIEW] Calling onSave with cleaned data\");\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"[VIEW] Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\"\n      });\n    }\n  }, [nodes, edges, onSave, toast, setNodes, setEdges]);\n  const handleAddCourse = useCallback(courseData => {\n    saveCurrentState();\n\n    // Find a position that doesn't overlap with existing nodes\n    let position = {\n      x: 100,\n      y: 100\n    };\n\n    // If we have a reactFlowInstance, try to center the new node in the viewport\n    if (reactFlowInstance) {\n      const {\n        x,\n        y,\n        zoom\n      } = reactFlowInstance.getViewport();\n      position = reactFlowInstance.screenToFlowPosition({\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      });\n\n      // Avoid overlapping with existing nodes by adding some offset\n      const existingPositions = nodes.map(node => node.position);\n      if (existingPositions.some(pos => Math.abs(pos.x - position.x) < 100 && Math.abs(pos.y - position.y) < 100)) {\n        position.x += 150;\n        position.y += 50;\n      }\n    }\n    const newNodeId = `node-${Date.now()}`;\n    const newNode = {\n      id: newNodeId,\n      type: \"courseNode\",\n      position,\n      data: {\n        ...courseData,\n        completed: false,\n        completedAt: null,\n        showQuickToggle: true,\n        onQuickToggle: handleCompleteToggle,\n        id: newNodeId\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setIsAddCourseOpen(false);\n    toast({\n      title: \"Course added\",\n      description: `${courseData.label} has been added to the roadmap`\n    });\n  }, [setNodes, toast, reactFlowInstance, nodes, handleCompleteToggle, saveCurrentState]);\n  const handleDeleteNode = useCallback(nodeId => {\n    saveCurrentState();\n\n    // Remove the node\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n    // Remove connected edges\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n    setSelectedNode(null);\n    toast({\n      title: \"Node deleted\",\n      description: \"The node has been removed from the roadmap\"\n    });\n  }, [setNodes, setEdges, toast, saveCurrentState]);\n  const handleUpdateNodeStyle = useCallback((nodeId, style) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            ...style\n          }\n        };\n      }\n      return node;\n    }));\n  }, [setNodes]);\n  const onEdgeClick = useCallback((event, edge) => {\n    if (editMode === \"delete\") {\n      saveCurrentState();\n\n      // Delete the edge\n      setEdges(eds => eds.filter(e => e.id !== edge.id));\n      toast({\n        title: \"Connection removed\",\n        description: \"The connection between nodes has been removed\"\n      });\n    }\n  }, [setEdges, editMode, saveCurrentState, toast]);\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const previousState = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, currentState]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const nextState = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, currentState]);\n    setRedoStack(prev => prev.slice(0, -1));\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(node => {\n      var _node$data$category;\n      return ((_node$data$category = node.data.category) === null || _node$data$category === void 0 ? void 0 : _node$data$category.toLowerCase()) === selectedCategory.toLowerCase();\n    });\n  }, [nodes, selectedCategory]);\n  const handleStyleChange = useCallback(styles => {\n    // Apply styles to selected node or default edge options\n    if (selectedNode) {\n      handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n    }\n\n    // Update default edge options\n    // (would be implemented in a full version)\n  }, [selectedNode, handleUpdateNodeStyle]);\n  const handleConnectionTypeChange = useCallback(type => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      const originalError = console.error;\n      console.error = (...args) => {\n        var _args$, _args$$includes, _args$2, _args$2$message, _args$2$message$inclu;\n        if ((_args$ = args[0]) !== null && _args$ !== void 0 && (_args$$includes = _args$.includes) !== null && _args$$includes !== void 0 && _args$$includes.call(_args$, \"ResizeObserver loop\") || (_args$2 = args[0]) !== null && _args$2 !== void 0 && (_args$2$message = _args$2.message) !== null && _args$2$message !== void 0 && (_args$2$message$inclu = _args$2$message.includes) !== null && _args$2$message$inclu !== void 0 && _args$2$message$inclu.call(_args$2$message, \"ResizeObserver loop\")) {\n          // Bỏ qua cảnh báo ResizeObserver\n          return;\n        }\n        originalError.apply(console, args);\n      };\n      return () => {\n        console.error = originalError;\n      };\n    }\n  }, []);\n\n  // Ensure nodes are visible in the viewport\n  useEffect(() => {\n    if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\n      // Wait for rendering to complete, then fit view\n      const timeoutId = setTimeout(() => {\n        console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        });\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [nodes.length, reactFlowInstance]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    className: \"h-full w-full\",\n    children: [isEditing && showEditorPanel && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"right\",\n      className: \"w-72 mr-2\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapEditorPanel, {\n        onStyleChange: handleStyleChange,\n        onConnectionTypeChange: handleConnectionTypeChange,\n        activeEdgeStyle: connectionType,\n        editMode: editMode,\n        onEditModeChange: mode => {\n          setEditMode(mode);\n          if (mode === \"connect\") {\n            toast({\n              title: \"Connect mode\",\n              description: \"Click on a source node, then click on a target node to create a connection\"\n            });\n          } else if (mode === \"delete\") {\n            toast({\n              title: \"Delete mode\",\n              description: \"Click on a node or connection to delete it\"\n            });\n          }\n        },\n        onAddNodeClick: () => setIsAddCourseOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 9\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"top-right\",\n      className: \"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2 justify-end\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n          onClick: handleUndo,\n          disabled: undoStack.length === 0,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n          onClick: handleRedo,\n          disabled: redoStack.length === 0,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"bg-purple-600 hover:bg-purple-700 text-white\",\n          size: \"sm\",\n          onClick: handleSaveRoadmap,\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            className: \"h-4 w-4 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 15\n          }, this), \" Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: filteredNodes(),\n        edges: edges,\n        onNodesChange: isEditing ? onNodesChange : undefined,\n        onEdgesChange: isEditing ? onEdgesChange : undefined,\n        onConnect: isEditing ? onConnect : undefined,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        onPaneClick: onPaneClick,\n        nodeTypes: nodeTypes,\n        onNodeDragStop: onNodeDragStop,\n        nodesDraggable: isEditing,\n        nodesConnectable: isEditing && editMode === \"connect\",\n        elementsSelectable: !readOnly,\n        defaultEdgeOptions: {\n          type: \"smoothstep\",\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          animated: true,\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        },\n        fitView: true,\n        fitViewOptions: {\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        },\n        minZoom: 0.2,\n        maxZoom: 4,\n        snapToGrid: true,\n        snapGrid: [10, 10],\n        nodeExtent: [[-2000, -2000], [2000, 2000]],\n        proOptions: {\n          hideAttribution: true\n        },\n        disableKeyboardA11y: true,\n        autoPanOnNodeDrag: false,\n        elevateEdgesOnSelect: false,\n        onInit: instance => {\n          // Use setTimeout to ensure proper initialization\n          setTimeout(() => {\n            if (nodes.length > 0) {\n              instance.fitView({\n                padding: 0.5\n              });\n              console.log(\"[FLOW] Flow initialized with nodes:\", nodes.length);\n            }\n          }, 300);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n          nodeStrokeWidth: 3,\n          zoomable: true,\n          pannable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 12,\n          size: 1,\n          color: \"#6d28d9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 783,\n          columnNumber: 11\n        }, this)]\n      }, `flow-${id}-${nodes.length}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(CourseInfoPanel, {\n      node: selectedNode,\n      onClose: () => setSelectedNode(null),\n      onCompleteToggle: handleCompleteToggle,\n      onDelete: isEditing ? handleDeleteNode : undefined,\n      onUpdateStyle: handleUpdateNodeStyle,\n      isAdmin: isEditing,\n      readOnly: readOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 9\n    }, this), isAddCourseOpen && /*#__PURE__*/_jsxDEV(AddCourseDialog, {\n      open: isAddCourseOpen,\n      onClose: () => setIsAddCourseOpen(false),\n      onAdd: handleAddCourse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 656,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapViewInner, \"b13xl3e4eCI4t2t0Pff+/5O285c=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow];\n});\n_c = RoadmapViewInner;\nexport default function RoadmapView(props) {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(RoadmapViewInner, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 813,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 812,\n    columnNumber: 5\n  }, this);\n}\n_c2 = RoadmapView;\nvar _c, _c2;\n$RefreshReg$(_c, \"RoadmapViewInner\");\n$RefreshReg$(_c2, \"RoadmapView\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useCallback","useEffect","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","Palette","CourseNode","CourseInfoPanel","AddCourseDialog","RoadmapEditorPanel","jsxDEV","_jsxDEV","nodeTypes","courseNode","RoadmapViewInner","id","initialNodes","initialEdges","isEditing","readOnly","onSave","onInternalUpdate","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","connectionType","setConnectionType","showEditorPanel","setShowEditorPanel","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","isInitialMount","handleCompleteToggle","nodeId","completed","_nodes$find","completedAt","Date","toISOString","nds","map","node","data","title","description","find","n","label","length","current","console","log","processedNodes","_node$data","type","position","x","Math","random","y","showQuickToggle","onQuickToggle","timeoutId","setTimeout","viewportEl","document","querySelector","style","transitionProperty","transitionDuration","clearTimeout","currentIds","Set","initialIds","size","some","has","_node$data2","timer","saveCurrentState","prev","onConnect","params","newEdge","now","animated","stroke","markerEnd","ArrowClosed","width","height","color","eds","onNodeClick","event","stopPropagation","filter","e","source","target","onPaneClick","handleSaveRoadmap","cleanedNodes","_node$data3","error","toString","substring","cleanedEdges","edge","Boolean","warn","variant","handleAddCourse","courseData","zoom","getViewport","screenToFlowPosition","window","innerWidth","innerHeight","existingPositions","pos","abs","newNodeId","newNode","handleDeleteNode","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","handleStyleChange","styles","nodeStyle","handleConnectionTypeChange","process","env","NODE_ENV","originalError","args","_args$","_args$$includes","_args$2","_args$2$message","_args$2$message$inclu","includes","call","message","apply","fitView","padding","includeHiddenNodes","minZoom","maxZoom","ref","className","children","onStyleChange","onConnectionTypeChange","activeEdgeStyle","onEditModeChange","mode","onAddNodeClick","fileName","lineNumber","columnNumber","onClick","disabled","undefined","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitViewOptions","snapToGrid","snapGrid","nodeExtent","proOptions","hideAttribution","disableKeyboardA11y","autoPanOnNodeDrag","elevateEdgesOnSelect","onInit","instance","nodeStrokeWidth","zoomable","pannable","gap","onClose","onCompleteToggle","onDelete","onUpdateStyle","isAdmin","open","onAdd","_c","RoadmapView","props","_c2","$RefreshReg$"],"sources":["D:/CyberPath/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Panel,\n  ReactFlowProvider,\n  useReactFlow,\n  MarkerType,\n  Connection,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport {\n  PlusCircle,\n  Save,\n  Trash,\n  Plus,\n  X,\n  Link as LinkIcon,\n  LinkOff,\n  Palette,\n} from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\n\nconst nodeTypes = {\n  courseNode: CourseNode,\n};\n\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate,\n}) {\n  const { toast } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const isInitialMount = useRef(true);\n\n  // Define handleCompleteToggle before it's used\n  const handleCompleteToggle = useCallback(\n    (nodeId, completed) => {\n      if (readOnly) return;\n\n      // Get the current timestamp\n      const completedAt = completed ? new Date().toISOString() : null;\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                completed,\n                completedAt,\n              },\n            };\n          }\n          return node;\n        })\n      );\n\n      toast({\n        title: completed\n          ? \"Course marked as completed\"\n          : \"Course marked as incomplete\",\n        description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\n          nodes.find((n) => n.id === nodeId)?.data.label\n        }`,\n      });\n    },\n    [nodes, setNodes, toast, readOnly]\n  );\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    // Skip effect if no initial data\n    if (!initialNodes?.length && !initialEdges?.length) {\n      return;\n    }\n\n    // Only run this effect once on initial mount\n    if (isInitialMount.current) {\n      console.log(\n        \"[FLOW] Initial mount, processing nodes:\",\n        initialNodes?.length\n      );\n\n      if (initialNodes?.length > 0) {\n        // Process nodes once with required properties for display\n        const processedNodes = initialNodes.map((node) => ({\n          ...node,\n          type: \"courseNode\",\n          // Ensure position exists\n          position: node.position || {\n            x: Math.random() * 500,\n            y: Math.random() * 300,\n          },\n          data: {\n            ...node.data,\n            showQuickToggle: true,\n            onQuickToggle: handleCompleteToggle,\n            // Ensure label exists\n            label: node.data?.label || \"Untitled Node\",\n          },\n        }));\n\n        console.log(\"[FLOW] Setting initial nodes with processed data\");\n        setNodes(processedNodes);\n      }\n\n      if (initialEdges?.length > 0) {\n        console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\n        setEdges([...initialEdges]);\n      }\n\n      // Schedule viewport setup after nodes are rendered\n      const timeoutId = setTimeout(() => {\n        const viewportEl = document.querySelector(\".react-flow__viewport\");\n        if (viewportEl) {\n          viewportEl.style.transitionProperty = \"transform\";\n          viewportEl.style.transitionDuration = \"0.2s\";\n        }\n      }, 300);\n\n      isInitialMount.current = false;\n      return () => clearTimeout(timeoutId);\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle]);\n\n  // Separate effect to monitor changes in props vs internal state\n  useEffect(() => {\n    if (isInitialMount.current) return; // Skip on initial mount\n\n    // Check if initialNodes changed after first render (rare, but possible)\n    if (initialNodes && initialNodes.length > 0) {\n      // Compare IDs only to prevent needless updates\n      const currentIds = new Set(nodes.map((n) => n.id));\n      const initialIds = new Set(initialNodes.map((n) => n.id));\n\n      // Only update if different nodes are provided\n      if (\n        initialIds.size !== currentIds.size ||\n        initialNodes.some((n) => !currentIds.has(n.id))\n      ) {\n        console.log(\"[FLOW] External nodes updated, refreshing\");\n\n        const processedNodes = initialNodes.map((node) => ({\n          ...node,\n          type: \"courseNode\",\n          position: node.position || {\n            x: Math.random() * 500,\n            y: Math.random() * 300,\n          },\n          data: {\n            ...node.data,\n            showQuickToggle: true,\n            onQuickToggle: handleCompleteToggle,\n            label: node.data?.label || \"Untitled Node\",\n          },\n        }));\n\n        setNodes(processedNodes);\n      }\n    }\n  }, [initialNodes, nodes, setNodes, handleCompleteToggle]);\n\n  // Update parent component with internal changes\n  useEffect(() => {\n    if (isInitialMount.current) return; // Skip during initial render\n\n    const timer = setTimeout(() => {\n      if (\n        (nodes.length > 0 || edges.length > 0) &&\n        typeof onInternalUpdate === \"function\"\n      ) {\n        console.log(\"[FLOW] Updating parent with current state\");\n        onInternalUpdate(nodes, edges);\n      }\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack((prev) => [...prev, { nodes: [...nodes], edges: [...edges] }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n\n  const onConnect = useCallback(\n    (params) => {\n      saveCurrentState();\n      // Add marker and apply current edge style settings\n      const newEdge = {\n        ...params,\n        id: `edge-${Date.now()}`,\n        type: \"smoothstep\",\n        animated: true,\n        style: { stroke: \"#6d28d9\" },\n        // Only add marker if connection type is arrow\n        ...(connectionType === \"arrow\" && {\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20,\n            color: \"#6d28d9\",\n          },\n        }),\n        data: {\n          connectionType,\n        },\n      };\n      setEdges((eds) => addEdge(newEdge, eds));\n\n      toast({\n        title: \"Connection added\",\n        description: \"A new connection has been created between nodes\",\n      });\n    },\n    [setEdges, saveCurrentState, toast, connectionType]\n  );\n\n  const onNodeClick = useCallback(\n    (event, node) => {\n      event.stopPropagation();\n\n      if (editMode === \"delete\") {\n        // Delete mode: remove the node\n        saveCurrentState();\n        setNodes(nodes.filter((n) => n.id !== node.id));\n        // Also remove any connected edges\n        setEdges(\n          edges.filter((e) => e.source !== node.id && e.target !== node.id)\n        );\n\n        toast({\n          title: \"Node deleted\",\n          description: `${node.data.label} has been removed from the roadmap`,\n        });\n      } else if (editMode === \"connect\" && selectedNode) {\n        // Connect mode: create an edge between selectedNode and this node\n        if (selectedNode.id !== node.id) {\n          const newEdge = {\n            id: `edge-${Date.now()}`,\n            source: selectedNode.id,\n            target: node.id,\n            type: \"smoothstep\",\n            animated: true,\n            style: { stroke: \"#6d28d9\" },\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          };\n\n          saveCurrentState();\n          setEdges((eds) => [...eds, newEdge]);\n          setSelectedNode(null);\n          setEditMode(\"select\");\n\n          toast({\n            title: \"Connection created\",\n            description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\n          });\n        }\n      } else if (editMode === \"select\") {\n        // Regular select mode: show node details\n        setSelectedNode(node);\n      }\n    },\n    [\n      editMode,\n      selectedNode,\n      nodes,\n      edges,\n      setNodes,\n      setEdges,\n      saveCurrentState,\n      toast,\n    ]\n  );\n\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\",\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"[VIEW] Starting roadmap save process\");\n      console.log(\"[VIEW] Current nodes:\", nodes.length);\n      console.log(\"[VIEW] Current edges:\", edges.length);\n\n      // Đảm bảo không có node nào bị thiếu dữ liệu quan trọng\n      const cleanedNodes = nodes.map((node) => {\n        if (!node.id) {\n          console.error(\"[VIEW] Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random()\n            .toString(36)\n            .substring(2, 9)}`;\n        }\n\n        if (!node.position) {\n          console.error(\"[VIEW] Node missing position:\", node);\n          // Default position\n          node.position = { x: 0, y: 0 };\n        }\n\n        if (!node.data) {\n          console.error(\"[VIEW] Node missing data:\", node);\n          // Default minimal data\n          node.data = { label: \"Node \" + node.id };\n        }\n\n        // Đảm bảo node có đủ thông tin cần thiết\n        return {\n          ...node,\n          type: node.type || \"courseNode\", // Loại node mặc định\n          data: {\n            ...(node.data || {}),\n            id: node.id, // Đảm bảo ID trong data giống với ID của node\n            label: node.data?.label || \"Untitled\", // Ít nhất phải có nhãn\n          },\n        };\n      });\n\n      // Đảm bảo các edge có đủ thông tin cần thiết\n      const cleanedEdges = edges\n        .map((edge) => {\n          if (!edge.source || !edge.target) {\n            console.error(\"[VIEW] Edge missing source or target:\", edge);\n            return null; // Skip invalid edges\n          }\n\n          if (!edge.id) {\n            console.error(\"[VIEW] Edge missing ID:\", edge);\n            // Generate a unique ID if missing\n            edge.id = `edge_${Date.now()}_${Math.random()\n              .toString(36)\n              .substring(2, 9)}`;\n          }\n\n          return {\n            ...edge,\n            type: edge.type || \"smoothstep\", // Loại edge mặc định\n          };\n        })\n        .filter(Boolean); // Lọc bỏ các edge null\n\n      console.log(\"[VIEW] Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"[VIEW] Node data sample:\", cleanedNodes[0]);\n      console.log(\"[VIEW] Cleaned edges for saving:\", cleanedEdges.length);\n      if (cleanedEdges.length > 0) {\n        console.log(\"[VIEW] Edge data sample:\", cleanedEdges[0]);\n      }\n\n      // Thông báo cho người dùng\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`,\n      });\n\n      // Lưu dữ liệu vào trạng thái cục bộ\n      setNodes(cleanedNodes);\n      setEdges(cleanedEdges);\n\n      // Gọi hàm callback onSave để lưu dữ liệu\n      console.log(\"[VIEW] Calling onSave with cleaned data\");\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"[VIEW] Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\",\n      });\n    }\n  }, [nodes, edges, onSave, toast, setNodes, setEdges]);\n\n  const handleAddCourse = useCallback(\n    (courseData) => {\n      saveCurrentState();\n\n      // Find a position that doesn't overlap with existing nodes\n      let position = { x: 100, y: 100 };\n\n      // If we have a reactFlowInstance, try to center the new node in the viewport\n      if (reactFlowInstance) {\n        const { x, y, zoom } = reactFlowInstance.getViewport();\n        position = reactFlowInstance.screenToFlowPosition({\n          x: window.innerWidth / 2,\n          y: window.innerHeight / 2,\n        });\n\n        // Avoid overlapping with existing nodes by adding some offset\n        const existingPositions = nodes.map((node) => node.position);\n        if (\n          existingPositions.some(\n            (pos) =>\n              Math.abs(pos.x - position.x) < 100 &&\n              Math.abs(pos.y - position.y) < 100\n          )\n        ) {\n          position.x += 150;\n          position.y += 50;\n        }\n      }\n\n      const newNodeId = `node-${Date.now()}`;\n      const newNode = {\n        id: newNodeId,\n        type: \"courseNode\",\n        position,\n        data: {\n          ...courseData,\n          completed: false,\n          completedAt: null,\n          showQuickToggle: true,\n          onQuickToggle: handleCompleteToggle,\n          id: newNodeId,\n        },\n      };\n\n      setNodes((nds) => [...nds, newNode]);\n      setIsAddCourseOpen(false);\n\n      toast({\n        title: \"Course added\",\n        description: `${courseData.label} has been added to the roadmap`,\n      });\n    },\n    [\n      setNodes,\n      toast,\n      reactFlowInstance,\n      nodes,\n      handleCompleteToggle,\n      saveCurrentState,\n    ]\n  );\n\n  const handleDeleteNode = useCallback(\n    (nodeId) => {\n      saveCurrentState();\n\n      // Remove the node\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId));\n      // Remove connected edges\n      setEdges((eds) =>\n        eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\n      );\n\n      setSelectedNode(null);\n\n      toast({\n        title: \"Node deleted\",\n        description: \"The node has been removed from the roadmap\",\n      });\n    },\n    [setNodes, setEdges, toast, saveCurrentState]\n  );\n\n  const handleUpdateNodeStyle = useCallback(\n    (nodeId, style) => {\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                ...style,\n              },\n            };\n          }\n          return node;\n        })\n      );\n    },\n    [setNodes]\n  );\n\n  const onEdgeClick = useCallback(\n    (event, edge) => {\n      if (editMode === \"delete\") {\n        saveCurrentState();\n\n        // Delete the edge\n        setEdges((eds) => eds.filter((e) => e.id !== edge.id));\n\n        toast({\n          title: \"Connection removed\",\n          description: \"The connection between nodes has been removed\",\n        });\n      }\n    },\n    [setEdges, editMode, saveCurrentState, toast]\n  );\n\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const previousState = undoStack[undoStack.length - 1];\n\n    setRedoStack((prev) => [...prev, currentState]);\n    setUndoStack((prev) => prev.slice(0, -1));\n\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const nextState = redoStack[redoStack.length - 1];\n\n    setUndoStack((prev) => [...prev, currentState]);\n    setRedoStack((prev) => prev.slice(0, -1));\n\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(\n      (node) =>\n        node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\n    );\n  }, [nodes, selectedCategory]);\n\n  const handleStyleChange = useCallback(\n    (styles) => {\n      // Apply styles to selected node or default edge options\n      if (selectedNode) {\n        handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n      }\n\n      // Update default edge options\n      // (would be implemented in a full version)\n    },\n    [selectedNode, handleUpdateNodeStyle]\n  );\n\n  const handleConnectionTypeChange = useCallback((type) => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      const originalError = console.error;\n      console.error = (...args) => {\n        if (\n          args[0]?.includes?.(\"ResizeObserver loop\") ||\n          args[0]?.message?.includes?.(\"ResizeObserver loop\")\n        ) {\n          // Bỏ qua cảnh báo ResizeObserver\n          return;\n        }\n        originalError.apply(console, args);\n      };\n\n      return () => {\n        console.error = originalError;\n      };\n    }\n  }, []);\n\n  // Ensure nodes are visible in the viewport\n  useEffect(() => {\n    if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\n      // Wait for rendering to complete, then fit view\n      const timeoutId = setTimeout(() => {\n        console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5,\n        });\n      }, 500);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [nodes.length, reactFlowInstance]);\n\n  return (\n    <div ref={reactFlowWrapper} className=\"h-full w-full\">\n      {isEditing && showEditorPanel && (\n        <Panel position=\"right\" className=\"w-72 mr-2\">\n          <RoadmapEditorPanel\n            onStyleChange={handleStyleChange}\n            onConnectionTypeChange={handleConnectionTypeChange}\n            activeEdgeStyle={connectionType}\n            editMode={editMode}\n            onEditModeChange={(mode) => {\n              setEditMode(mode);\n              if (mode === \"connect\") {\n                toast({\n                  title: \"Connect mode\",\n                  description:\n                    \"Click on a source node, then click on a target node to create a connection\",\n                });\n              } else if (mode === \"delete\") {\n                toast({\n                  title: \"Delete mode\",\n                  description: \"Click on a node or connection to delete it\",\n                });\n              }\n            }}\n            onAddNodeClick={() => setIsAddCourseOpen(true)}\n          />\n        </Panel>\n      )}\n\n      {isEditing && (\n        <Panel\n          position=\"top-right\"\n          className=\"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\"\n        >\n          <div className=\"flex gap-2 justify-end\">\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleUndo}\n              disabled={undoStack.length === 0}\n            >\n              Undo\n            </Button>\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleRedo}\n              disabled={redoStack.length === 0}\n            >\n              Redo\n            </Button>\n            <Button\n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n              size=\"sm\"\n              onClick={handleSaveRoadmap}\n            >\n              <Save className=\"h-4 w-4 mr-1\" /> Save\n            </Button>\n          </div>\n        </Panel>\n      )}\n\n      <div className=\"h-full\">\n        <ReactFlow\n          key={`flow-${id}-${nodes.length}`}\n          nodes={filteredNodes()}\n          edges={edges}\n          onNodesChange={isEditing ? onNodesChange : undefined}\n          onEdgesChange={isEditing ? onEdgesChange : undefined}\n          onConnect={isEditing ? onConnect : undefined}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          onPaneClick={onPaneClick}\n          nodeTypes={nodeTypes}\n          onNodeDragStop={onNodeDragStop}\n          nodesDraggable={isEditing}\n          nodesConnectable={isEditing && editMode === \"connect\"}\n          elementsSelectable={!readOnly}\n          defaultEdgeOptions={{\n            type: \"smoothstep\",\n            style: { stroke: \"#6d28d9\" },\n            animated: true,\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          }}\n          fitView\n          fitViewOptions={{\n            padding: 0.5,\n            includeHiddenNodes: true,\n            minZoom: 0.5,\n            maxZoom: 1.5,\n          }}\n          minZoom={0.2}\n          maxZoom={4}\n          snapToGrid={true}\n          snapGrid={[10, 10]}\n          nodeExtent={[\n            [-2000, -2000],\n            [2000, 2000],\n          ]}\n          proOptions={{ hideAttribution: true }}\n          disableKeyboardA11y={true}\n          autoPanOnNodeDrag={false}\n          elevateEdgesOnSelect={false}\n          onInit={(instance) => {\n            // Use setTimeout to ensure proper initialization\n            setTimeout(() => {\n              if (nodes.length > 0) {\n                instance.fitView({ padding: 0.5 });\n                console.log(\n                  \"[FLOW] Flow initialized with nodes:\",\n                  nodes.length\n                );\n              }\n            }, 300);\n          }}\n        >\n          <Controls />\n          <MiniMap nodeStrokeWidth={3} zoomable pannable />\n          <Background variant=\"dots\" gap={12} size={1} color=\"#6d28d9\" />\n        </ReactFlow>\n      </div>\n\n      {selectedNode && (\n        <CourseInfoPanel\n          node={selectedNode}\n          onClose={() => setSelectedNode(null)}\n          onCompleteToggle={handleCompleteToggle}\n          onDelete={isEditing ? handleDeleteNode : undefined}\n          onUpdateStyle={handleUpdateNodeStyle}\n          isAdmin={isEditing}\n          readOnly={readOnly}\n        />\n      )}\n\n      {isAddCourseOpen && (\n        <AddCourseDialog\n          open={isAddCourseOpen}\n          onClose={() => setIsAddCourseOpen(false)}\n          onAdd={handleAddCourse}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function RoadmapView(props) {\n  return (\n    <ReactFlowProvider>\n      <RoadmapViewInner {...props} />\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;AAEb,SAASC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChE,OAAOC,SAAS,IACdC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,OAAO,EACPC,KAAK,EACLC,iBAAiB,EACjBC,YAAY,EACZC,UAAU,EACVC,UAAU,QACL,WAAW;AAClB,OAAO,0BAA0B;AACjC,SAASC,IAAI,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,WAAW;AACvD,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SACEC,UAAU,EACVC,IAAI,EACJC,KAAK,EACLC,IAAI,EACJC,CAAC,EACDC,IAAI,IAAIC,QAAQ,EAChBC,OAAO,EACPC,OAAO,QACF,cAAc;AACrB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,kBAAkB,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,SAAS,GAAG;EAChBC,UAAU,EAAEP;AACd,CAAC;AAED,SAASQ,gBAAgBA,CAAC;EACxBC,EAAE;EACFC,YAAY,GAAG,EAAE;EACjBC,YAAY,GAAG,EAAE;EACjBC,SAAS,GAAG,KAAK;EACjBC,QAAQ,GAAG,KAAK;EAChBC,MAAM;EACNC;AACF,CAAC,EAAE;EAAA/C,EAAA;EACD,MAAM;IAAEgD;EAAM,CAAC,GAAG1B,QAAQ,CAAC,CAAC;EAC5B,MAAM,CAAC2B,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGzC,aAAa,CAACgC,YAAY,CAAC;EACpE,MAAM,CAACU,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAG3C,aAAa,CAACgC,YAAY,CAAC;EACpE,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGtD,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACuD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxD,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACyD,eAAe,EAAEC,kBAAkB,CAAC,GAAG1D,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAAC2D,QAAQ,EAAEC,WAAW,CAAC,GAAG5D,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC6D,cAAc,EAAEC,iBAAiB,CAAC,GAAG9D,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EAC/D,MAAM,CAAC+D,eAAe,EAAEC,kBAAkB,CAAC,GAAGhE,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAMiE,gBAAgB,GAAG9D,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM+D,iBAAiB,GAAGrD,YAAY,CAAC,CAAC;EACxC,MAAM,CAACsD,SAAS,EAAEC,YAAY,CAAC,GAAGpE,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACqE,SAAS,EAAEC,YAAY,CAAC,GAAGtE,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMuE,cAAc,GAAGpE,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACA,MAAMqE,oBAAoB,GAAGvE,WAAW,CACtC,CAACwE,MAAM,EAAEC,SAAS,KAAK;IAAA,IAAAC,WAAA;IACrB,IAAIhC,QAAQ,EAAE;;IAEd;IACA,MAAMiC,WAAW,GAAGF,SAAS,GAAG,IAAIG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,IAAI;IAE/D9B,QAAQ,CAAE+B,GAAG,IACXA,GAAG,CAACC,GAAG,CAAEC,IAAI,IAAK;MAChB,IAAIA,IAAI,CAAC1C,EAAE,KAAKkC,MAAM,EAAE;QACtB,OAAO;UACL,GAAGQ,IAAI;UACPC,IAAI,EAAE;YACJ,GAAGD,IAAI,CAACC,IAAI;YACZR,SAAS;YACTE;UACF;QACF,CAAC;MACH;MACA,OAAOK,IAAI;IACb,CAAC,CACH,CAAC;IAEDnC,KAAK,CAAC;MACJqC,KAAK,EAAET,SAAS,GACZ,4BAA4B,GAC5B,6BAA6B;MACjCU,WAAW,EAAE,UAAUV,SAAS,GAAG,WAAW,GAAG,UAAU,KAAAC,WAAA,GACzD5B,KAAK,CAACsC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC/C,EAAE,KAAKkC,MAAM,CAAC,cAAAE,WAAA,uBAAlCA,WAAA,CAAoCO,IAAI,CAACK,KAAK;IAElD,CAAC,CAAC;EACJ,CAAC,EACD,CAACxC,KAAK,EAAEC,QAAQ,EAAEF,KAAK,EAAEH,QAAQ,CACnC,CAAC;;EAED;EACAzC,SAAS,CAAC,MAAM;IACd;IACA,IAAI,EAACsC,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEgD,MAAM,KAAI,EAAC/C,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAE+C,MAAM,GAAE;MAClD;IACF;;IAEA;IACA,IAAIjB,cAAc,CAACkB,OAAO,EAAE;MAC1BC,OAAO,CAACC,GAAG,CACT,yCAAyC,EACzCnD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEgD,MAChB,CAAC;MAED,IAAI,CAAAhD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEgD,MAAM,IAAG,CAAC,EAAE;QAC5B;QACA,MAAMI,cAAc,GAAGpD,YAAY,CAACwC,GAAG,CAAEC,IAAI;UAAA,IAAAY,UAAA;UAAA,OAAM;YACjD,GAAGZ,IAAI;YACPa,IAAI,EAAE,YAAY;YAClB;YACAC,QAAQ,EAAEd,IAAI,CAACc,QAAQ,IAAI;cACzBC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;cACtBC,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;YACrB,CAAC;YACDhB,IAAI,EAAE;cACJ,GAAGD,IAAI,CAACC,IAAI;cACZkB,eAAe,EAAE,IAAI;cACrBC,aAAa,EAAE7B,oBAAoB;cACnC;cACAe,KAAK,EAAE,EAAAM,UAAA,GAAAZ,IAAI,CAACC,IAAI,cAAAW,UAAA,uBAATA,UAAA,CAAWN,KAAK,KAAI;YAC7B;UACF,CAAC;QAAA,CAAC,CAAC;QAEHG,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;QAC/D3C,QAAQ,CAAC4C,cAAc,CAAC;MAC1B;MAEA,IAAI,CAAAnD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE+C,MAAM,IAAG,CAAC,EAAE;QAC5BE,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAElD,YAAY,CAAC+C,MAAM,CAAC;QACjErC,QAAQ,CAAC,CAAC,GAAGV,YAAY,CAAC,CAAC;MAC7B;;MAEA;MACA,MAAM6D,SAAS,GAAGC,UAAU,CAAC,MAAM;QACjC,MAAMC,UAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;QAClE,IAAIF,UAAU,EAAE;UACdA,UAAU,CAACG,KAAK,CAACC,kBAAkB,GAAG,WAAW;UACjDJ,UAAU,CAACG,KAAK,CAACE,kBAAkB,GAAG,MAAM;QAC9C;MACF,CAAC,EAAE,GAAG,CAAC;MAEPtC,cAAc,CAACkB,OAAO,GAAG,KAAK;MAC9B,OAAO,MAAMqB,YAAY,CAACR,SAAS,CAAC;IACtC;EACF,CAAC,EAAE,CAAC9D,YAAY,EAAEC,YAAY,EAAEO,QAAQ,EAAEG,QAAQ,EAAEqB,oBAAoB,CAAC,CAAC;;EAE1E;EACAtE,SAAS,CAAC,MAAM;IACd,IAAIqE,cAAc,CAACkB,OAAO,EAAE,OAAO,CAAC;;IAEpC;IACA,IAAIjD,YAAY,IAAIA,YAAY,CAACgD,MAAM,GAAG,CAAC,EAAE;MAC3C;MACA,MAAMuB,UAAU,GAAG,IAAIC,GAAG,CAACjE,KAAK,CAACiC,GAAG,CAAEM,CAAC,IAAKA,CAAC,CAAC/C,EAAE,CAAC,CAAC;MAClD,MAAM0E,UAAU,GAAG,IAAID,GAAG,CAACxE,YAAY,CAACwC,GAAG,CAAEM,CAAC,IAAKA,CAAC,CAAC/C,EAAE,CAAC,CAAC;;MAEzD;MACA,IACE0E,UAAU,CAACC,IAAI,KAAKH,UAAU,CAACG,IAAI,IACnC1E,YAAY,CAAC2E,IAAI,CAAE7B,CAAC,IAAK,CAACyB,UAAU,CAACK,GAAG,CAAC9B,CAAC,CAAC/C,EAAE,CAAC,CAAC,EAC/C;QACAmD,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;QAExD,MAAMC,cAAc,GAAGpD,YAAY,CAACwC,GAAG,CAAEC,IAAI;UAAA,IAAAoC,WAAA;UAAA,OAAM;YACjD,GAAGpC,IAAI;YACPa,IAAI,EAAE,YAAY;YAClBC,QAAQ,EAAEd,IAAI,CAACc,QAAQ,IAAI;cACzBC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;cACtBC,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;YACrB,CAAC;YACDhB,IAAI,EAAE;cACJ,GAAGD,IAAI,CAACC,IAAI;cACZkB,eAAe,EAAE,IAAI;cACrBC,aAAa,EAAE7B,oBAAoB;cACnCe,KAAK,EAAE,EAAA8B,WAAA,GAAApC,IAAI,CAACC,IAAI,cAAAmC,WAAA,uBAATA,WAAA,CAAW9B,KAAK,KAAI;YAC7B;UACF,CAAC;QAAA,CAAC,CAAC;QAEHvC,QAAQ,CAAC4C,cAAc,CAAC;MAC1B;IACF;EACF,CAAC,EAAE,CAACpD,YAAY,EAAEO,KAAK,EAAEC,QAAQ,EAAEwB,oBAAoB,CAAC,CAAC;;EAEzD;EACAtE,SAAS,CAAC,MAAM;IACd,IAAIqE,cAAc,CAACkB,OAAO,EAAE,OAAO,CAAC;;IAEpC,MAAM6B,KAAK,GAAGf,UAAU,CAAC,MAAM;MAC7B,IACE,CAACxD,KAAK,CAACyC,MAAM,GAAG,CAAC,IAAItC,KAAK,CAACsC,MAAM,GAAG,CAAC,KACrC,OAAO3C,gBAAgB,KAAK,UAAU,EACtC;QACA6C,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;QACxD9C,gBAAgB,CAACE,KAAK,EAAEG,KAAK,CAAC;MAChC;IACF,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM4D,YAAY,CAACQ,KAAK,CAAC;EAClC,CAAC,EAAE,CAACvE,KAAK,EAAEG,KAAK,EAAEL,gBAAgB,CAAC,CAAC;;EAEpC;EACA,MAAM0E,gBAAgB,GAAGtH,WAAW,CAAC,MAAM;IACzCmE,YAAY,CAAEoD,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;MAAEzE,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MAAEG,KAAK,EAAE,CAAC,GAAGA,KAAK;IAAE,CAAC,CAAC,CAAC;IAC3EoB,YAAY,CAAC,EAAE,CAAC;EAClB,CAAC,EAAE,CAACvB,KAAK,EAAEG,KAAK,CAAC,CAAC;EAElB,MAAMuE,SAAS,GAAGxH,WAAW,CAC1ByH,MAAM,IAAK;IACVH,gBAAgB,CAAC,CAAC;IAClB;IACA,MAAMI,OAAO,GAAG;MACd,GAAGD,MAAM;MACTnF,EAAE,EAAE,QAAQsC,IAAI,CAAC+C,GAAG,CAAC,CAAC,EAAE;MACxB9B,IAAI,EAAE,YAAY;MAClB+B,QAAQ,EAAE,IAAI;MACdlB,KAAK,EAAE;QAAEmB,MAAM,EAAE;MAAU,CAAC;MAC5B;MACA,IAAIjE,cAAc,KAAK,OAAO,IAAI;QAChCkE,SAAS,EAAE;UACTjC,IAAI,EAAEhF,UAAU,CAACkH,WAAW;UAC5BC,KAAK,EAAE,EAAE;UACTC,MAAM,EAAE,EAAE;UACVC,KAAK,EAAE;QACT;MACF,CAAC,CAAC;MACFjD,IAAI,EAAE;QACJrB;MACF;IACF,CAAC;IACDV,QAAQ,CAAEiF,GAAG,IAAK1H,OAAO,CAACiH,OAAO,EAAES,GAAG,CAAC,CAAC;IAExCtF,KAAK,CAAC;MACJqC,KAAK,EAAE,kBAAkB;MACzBC,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC,EACD,CAACjC,QAAQ,EAAEoE,gBAAgB,EAAEzE,KAAK,EAAEe,cAAc,CACpD,CAAC;EAED,MAAMwE,WAAW,GAAGpI,WAAW,CAC7B,CAACqI,KAAK,EAAErD,IAAI,KAAK;IACfqD,KAAK,CAACC,eAAe,CAAC,CAAC;IAEvB,IAAI5E,QAAQ,KAAK,QAAQ,EAAE;MACzB;MACA4D,gBAAgB,CAAC,CAAC;MAClBvE,QAAQ,CAACD,KAAK,CAACyF,MAAM,CAAElD,CAAC,IAAKA,CAAC,CAAC/C,EAAE,KAAK0C,IAAI,CAAC1C,EAAE,CAAC,CAAC;MAC/C;MACAY,QAAQ,CACND,KAAK,CAACsF,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAKzD,IAAI,CAAC1C,EAAE,IAAIkG,CAAC,CAACE,MAAM,KAAK1D,IAAI,CAAC1C,EAAE,CAClE,CAAC;MAEDO,KAAK,CAAC;QACJqC,KAAK,EAAE,cAAc;QACrBC,WAAW,EAAE,GAAGH,IAAI,CAACC,IAAI,CAACK,KAAK;MACjC,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI5B,QAAQ,KAAK,SAAS,IAAIN,YAAY,EAAE;MACjD;MACA,IAAIA,YAAY,CAACd,EAAE,KAAK0C,IAAI,CAAC1C,EAAE,EAAE;QAC/B,MAAMoF,OAAO,GAAG;UACdpF,EAAE,EAAE,QAAQsC,IAAI,CAAC+C,GAAG,CAAC,CAAC,EAAE;UACxBc,MAAM,EAAErF,YAAY,CAACd,EAAE;UACvBoG,MAAM,EAAE1D,IAAI,CAAC1C,EAAE;UACfuD,IAAI,EAAE,YAAY;UAClB+B,QAAQ,EAAE,IAAI;UACdlB,KAAK,EAAE;YAAEmB,MAAM,EAAE;UAAU,CAAC;UAC5B,IAAIjE,cAAc,KAAK,OAAO,IAAI;YAChCkE,SAAS,EAAE;cACTjC,IAAI,EAAEhF,UAAU,CAACkH,WAAW;cAC5BC,KAAK,EAAE,EAAE;cACTC,MAAM,EAAE,EAAE;cACVC,KAAK,EAAE;YACT;UACF,CAAC,CAAC;UACFjD,IAAI,EAAE;YACJrB;UACF;QACF,CAAC;QAED0D,gBAAgB,CAAC,CAAC;QAClBpE,QAAQ,CAAEiF,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAET,OAAO,CAAC,CAAC;QACpCrE,eAAe,CAAC,IAAI,CAAC;QACrBM,WAAW,CAAC,QAAQ,CAAC;QAErBd,KAAK,CAAC;UACJqC,KAAK,EAAE,oBAAoB;UAC3BC,WAAW,EAAE,aAAa/B,YAAY,CAAC6B,IAAI,CAACK,KAAK,OAAON,IAAI,CAACC,IAAI,CAACK,KAAK;QACzE,CAAC,CAAC;MACJ;IACF,CAAC,MAAM,IAAI5B,QAAQ,KAAK,QAAQ,EAAE;MAChC;MACAL,eAAe,CAAC2B,IAAI,CAAC;IACvB;EACF,CAAC,EACD,CACEtB,QAAQ,EACRN,YAAY,EACZN,KAAK,EACLG,KAAK,EACLF,QAAQ,EACRG,QAAQ,EACRoE,gBAAgB,EAChBzE,KAAK,CAET,CAAC;EAED,MAAM8F,WAAW,GAAG3I,WAAW,CAAC,MAAM;IACpC;IACAqD,eAAe,CAAC,IAAI,CAAC;;IAErB;IACA,IAAIK,QAAQ,KAAK,SAAS,IAAIN,YAAY,EAAE;MAC1CO,WAAW,CAAC,QAAQ,CAAC;MACrBN,eAAe,CAAC,IAAI,CAAC;MACrBR,KAAK,CAAC;QACJqC,KAAK,EAAE,sBAAsB;QAC7BC,WAAW,EAAE;MACf,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACzB,QAAQ,EAAEN,YAAY,EAAEP,KAAK,CAAC,CAAC;EAEnC,MAAM+F,iBAAiB,GAAG5I,WAAW,CAAC,MAAM;IAC1C,IAAI2C,MAAM,EAAE;MACV8C,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE5C,KAAK,CAACyC,MAAM,CAAC;MAClDE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEzC,KAAK,CAACsC,MAAM,CAAC;;MAElD;MACA,MAAMsD,YAAY,GAAG/F,KAAK,CAACiC,GAAG,CAAEC,IAAI,IAAK;QAAA,IAAA8D,WAAA;QACvC,IAAI,CAAC9D,IAAI,CAAC1C,EAAE,EAAE;UACZmD,OAAO,CAACsD,KAAK,CAAC,yBAAyB,EAAE/D,IAAI,CAAC;UAC9C;UACAA,IAAI,CAAC1C,EAAE,GAAG,QAAQsC,IAAI,CAAC+C,GAAG,CAAC,CAAC,IAAI3B,IAAI,CAACC,MAAM,CAAC,CAAC,CAC1C+C,QAAQ,CAAC,EAAE,CAAC,CACZC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QACtB;QAEA,IAAI,CAACjE,IAAI,CAACc,QAAQ,EAAE;UAClBL,OAAO,CAACsD,KAAK,CAAC,+BAA+B,EAAE/D,IAAI,CAAC;UACpD;UACAA,IAAI,CAACc,QAAQ,GAAG;YAAEC,CAAC,EAAE,CAAC;YAAEG,CAAC,EAAE;UAAE,CAAC;QAChC;QAEA,IAAI,CAAClB,IAAI,CAACC,IAAI,EAAE;UACdQ,OAAO,CAACsD,KAAK,CAAC,2BAA2B,EAAE/D,IAAI,CAAC;UAChD;UACAA,IAAI,CAACC,IAAI,GAAG;YAAEK,KAAK,EAAE,OAAO,GAAGN,IAAI,CAAC1C;UAAG,CAAC;QAC1C;;QAEA;QACA,OAAO;UACL,GAAG0C,IAAI;UACPa,IAAI,EAAEb,IAAI,CAACa,IAAI,IAAI,YAAY;UAAE;UACjCZ,IAAI,EAAE;YACJ,IAAID,IAAI,CAACC,IAAI,IAAI,CAAC,CAAC,CAAC;YACpB3C,EAAE,EAAE0C,IAAI,CAAC1C,EAAE;YAAE;YACbgD,KAAK,EAAE,EAAAwD,WAAA,GAAA9D,IAAI,CAACC,IAAI,cAAA6D,WAAA,uBAATA,WAAA,CAAWxD,KAAK,KAAI,UAAU,CAAE;UACzC;QACF,CAAC;MACH,CAAC,CAAC;;MAEF;MACA,MAAM4D,YAAY,GAAGjG,KAAK,CACvB8B,GAAG,CAAEoE,IAAI,IAAK;QACb,IAAI,CAACA,IAAI,CAACV,MAAM,IAAI,CAACU,IAAI,CAACT,MAAM,EAAE;UAChCjD,OAAO,CAACsD,KAAK,CAAC,uCAAuC,EAAEI,IAAI,CAAC;UAC5D,OAAO,IAAI,CAAC,CAAC;QACf;QAEA,IAAI,CAACA,IAAI,CAAC7G,EAAE,EAAE;UACZmD,OAAO,CAACsD,KAAK,CAAC,yBAAyB,EAAEI,IAAI,CAAC;UAC9C;UACAA,IAAI,CAAC7G,EAAE,GAAG,QAAQsC,IAAI,CAAC+C,GAAG,CAAC,CAAC,IAAI3B,IAAI,CAACC,MAAM,CAAC,CAAC,CAC1C+C,QAAQ,CAAC,EAAE,CAAC,CACZC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QACtB;QAEA,OAAO;UACL,GAAGE,IAAI;UACPtD,IAAI,EAAEsD,IAAI,CAACtD,IAAI,IAAI,YAAY,CAAE;QACnC,CAAC;MACH,CAAC,CAAC,CACD0C,MAAM,CAACa,OAAO,CAAC,CAAC,CAAC;;MAEpB3D,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEmD,YAAY,CAACtD,MAAM,CAAC;MACpEE,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEmD,YAAY,CAAC,CAAC,CAAC,CAAC;MACxDpD,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEwD,YAAY,CAAC3D,MAAM,CAAC;MACpE,IAAI2D,YAAY,CAAC3D,MAAM,GAAG,CAAC,EAAE;QAC3BE,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEwD,YAAY,CAAC,CAAC,CAAC,CAAC;MAC1D;;MAEA;MACArG,KAAK,CAAC;QACJqC,KAAK,EAAE,mBAAmB;QAC1BC,WAAW,EAAE,UAAU0D,YAAY,CAACtD,MAAM,cAAc2D,YAAY,CAAC3D,MAAM;MAC7E,CAAC,CAAC;;MAEF;MACAxC,QAAQ,CAAC8F,YAAY,CAAC;MACtB3F,QAAQ,CAACgG,YAAY,CAAC;;MAEtB;MACAzD,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD/C,MAAM,CAACkG,YAAY,EAAEK,YAAY,CAAC;IACpC,CAAC,MAAM;MACLzD,OAAO,CAAC4D,IAAI,CAAC,wDAAwD,CAAC;MACtExG,KAAK,CAAC;QACJqC,KAAK,EAAE,qBAAqB;QAC5BC,WAAW,EAAE,6BAA6B;QAC1CmE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACxG,KAAK,EAAEG,KAAK,EAAEN,MAAM,EAAEE,KAAK,EAAEE,QAAQ,EAAEG,QAAQ,CAAC,CAAC;EAErD,MAAMqG,eAAe,GAAGvJ,WAAW,CAChCwJ,UAAU,IAAK;IACdlC,gBAAgB,CAAC,CAAC;;IAElB;IACA,IAAIxB,QAAQ,GAAG;MAAEC,CAAC,EAAE,GAAG;MAAEG,CAAC,EAAE;IAAI,CAAC;;IAEjC;IACA,IAAIjC,iBAAiB,EAAE;MACrB,MAAM;QAAE8B,CAAC;QAAEG,CAAC;QAAEuD;MAAK,CAAC,GAAGxF,iBAAiB,CAACyF,WAAW,CAAC,CAAC;MACtD5D,QAAQ,GAAG7B,iBAAiB,CAAC0F,oBAAoB,CAAC;QAChD5D,CAAC,EAAE6D,MAAM,CAACC,UAAU,GAAG,CAAC;QACxB3D,CAAC,EAAE0D,MAAM,CAACE,WAAW,GAAG;MAC1B,CAAC,CAAC;;MAEF;MACA,MAAMC,iBAAiB,GAAGjH,KAAK,CAACiC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACc,QAAQ,CAAC;MAC5D,IACEiE,iBAAiB,CAAC7C,IAAI,CACnB8C,GAAG,IACFhE,IAAI,CAACiE,GAAG,CAACD,GAAG,CAACjE,CAAC,GAAGD,QAAQ,CAACC,CAAC,CAAC,GAAG,GAAG,IAClCC,IAAI,CAACiE,GAAG,CAACD,GAAG,CAAC9D,CAAC,GAAGJ,QAAQ,CAACI,CAAC,CAAC,GAAG,GACnC,CAAC,EACD;QACAJ,QAAQ,CAACC,CAAC,IAAI,GAAG;QACjBD,QAAQ,CAACI,CAAC,IAAI,EAAE;MAClB;IACF;IAEA,MAAMgE,SAAS,GAAG,QAAQtF,IAAI,CAAC+C,GAAG,CAAC,CAAC,EAAE;IACtC,MAAMwC,OAAO,GAAG;MACd7H,EAAE,EAAE4H,SAAS;MACbrE,IAAI,EAAE,YAAY;MAClBC,QAAQ;MACRb,IAAI,EAAE;QACJ,GAAGuE,UAAU;QACb/E,SAAS,EAAE,KAAK;QAChBE,WAAW,EAAE,IAAI;QACjBwB,eAAe,EAAE,IAAI;QACrBC,aAAa,EAAE7B,oBAAoB;QACnCjC,EAAE,EAAE4H;MACN;IACF,CAAC;IAEDnH,QAAQ,CAAE+B,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAEqF,OAAO,CAAC,CAAC;IACpC1G,kBAAkB,CAAC,KAAK,CAAC;IAEzBZ,KAAK,CAAC;MACJqC,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE,GAAGqE,UAAU,CAAClE,KAAK;IAClC,CAAC,CAAC;EACJ,CAAC,EACD,CACEvC,QAAQ,EACRF,KAAK,EACLoB,iBAAiB,EACjBnB,KAAK,EACLyB,oBAAoB,EACpB+C,gBAAgB,CAEpB,CAAC;EAED,MAAM8C,gBAAgB,GAAGpK,WAAW,CACjCwE,MAAM,IAAK;IACV8C,gBAAgB,CAAC,CAAC;;IAElB;IACAvE,QAAQ,CAAE+B,GAAG,IAAKA,GAAG,CAACyD,MAAM,CAAEvD,IAAI,IAAKA,IAAI,CAAC1C,EAAE,KAAKkC,MAAM,CAAC,CAAC;IAC3D;IACAtB,QAAQ,CAAEiF,GAAG,IACXA,GAAG,CAACI,MAAM,CAAEY,IAAI,IAAKA,IAAI,CAACV,MAAM,KAAKjE,MAAM,IAAI2E,IAAI,CAACT,MAAM,KAAKlE,MAAM,CACvE,CAAC;IAEDnB,eAAe,CAAC,IAAI,CAAC;IAErBR,KAAK,CAAC;MACJqC,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC,EACD,CAACpC,QAAQ,EAAEG,QAAQ,EAAEL,KAAK,EAAEyE,gBAAgB,CAC9C,CAAC;EAED,MAAM+C,qBAAqB,GAAGrK,WAAW,CACvC,CAACwE,MAAM,EAAEkC,KAAK,KAAK;IACjB3D,QAAQ,CAAE+B,GAAG,IACXA,GAAG,CAACC,GAAG,CAAEC,IAAI,IAAK;MAChB,IAAIA,IAAI,CAAC1C,EAAE,KAAKkC,MAAM,EAAE;QACtB,OAAO;UACL,GAAGQ,IAAI;UACPC,IAAI,EAAE;YACJ,GAAGD,IAAI,CAACC,IAAI;YACZ,GAAGyB;UACL;QACF,CAAC;MACH;MACA,OAAO1B,IAAI;IACb,CAAC,CACH,CAAC;EACH,CAAC,EACD,CAACjC,QAAQ,CACX,CAAC;EAED,MAAMuH,WAAW,GAAGtK,WAAW,CAC7B,CAACqI,KAAK,EAAEc,IAAI,KAAK;IACf,IAAIzF,QAAQ,KAAK,QAAQ,EAAE;MACzB4D,gBAAgB,CAAC,CAAC;;MAElB;MACApE,QAAQ,CAAEiF,GAAG,IAAKA,GAAG,CAACI,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAClG,EAAE,KAAK6G,IAAI,CAAC7G,EAAE,CAAC,CAAC;MAEtDO,KAAK,CAAC;QACJqC,KAAK,EAAE,oBAAoB;QAC3BC,WAAW,EAAE;MACf,CAAC,CAAC;IACJ;EACF,CAAC,EACD,CAACjC,QAAQ,EAAEQ,QAAQ,EAAE4D,gBAAgB,EAAEzE,KAAK,CAC9C,CAAC;EAED,MAAM0H,UAAU,GAAGvK,WAAW,CAAC,MAAM;IACnC,IAAIkE,SAAS,CAACqB,MAAM,KAAK,CAAC,EAAE;IAE5B,MAAMiF,YAAY,GAAG;MAAE1H,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MAAEG,KAAK,EAAE,CAAC,GAAGA,KAAK;IAAE,CAAC;IAC7D,MAAMwH,aAAa,GAAGvG,SAAS,CAACA,SAAS,CAACqB,MAAM,GAAG,CAAC,CAAC;IAErDlB,YAAY,CAAEkD,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEiD,YAAY,CAAC,CAAC;IAC/CrG,YAAY,CAAEoD,IAAI,IAAKA,IAAI,CAACmD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEzC3H,QAAQ,CAAC0H,aAAa,CAAC3H,KAAK,CAAC;IAC7BI,QAAQ,CAACuH,aAAa,CAACxH,KAAK,CAAC;IAE7BJ,KAAK,CAAC;MACJqC,KAAK,EAAE,MAAM;MACbC,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,CAACjB,SAAS,EAAEE,SAAS,EAAEtB,KAAK,EAAEG,KAAK,EAAEF,QAAQ,EAAEG,QAAQ,EAAEL,KAAK,CAAC,CAAC;EAEnE,MAAM8H,UAAU,GAAG3K,WAAW,CAAC,MAAM;IACnC,IAAIoE,SAAS,CAACmB,MAAM,KAAK,CAAC,EAAE;IAE5B,MAAMiF,YAAY,GAAG;MAAE1H,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;MAAEG,KAAK,EAAE,CAAC,GAAGA,KAAK;IAAE,CAAC;IAC7D,MAAM2H,SAAS,GAAGxG,SAAS,CAACA,SAAS,CAACmB,MAAM,GAAG,CAAC,CAAC;IAEjDpB,YAAY,CAAEoD,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEiD,YAAY,CAAC,CAAC;IAC/CnG,YAAY,CAAEkD,IAAI,IAAKA,IAAI,CAACmD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEzC3H,QAAQ,CAAC6H,SAAS,CAAC9H,KAAK,CAAC;IACzBI,QAAQ,CAAC0H,SAAS,CAAC3H,KAAK,CAAC;IAEzBJ,KAAK,CAAC;MACJqC,KAAK,EAAE,MAAM;MACbC,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,CAACjB,SAAS,EAAEE,SAAS,EAAEtB,KAAK,EAAEG,KAAK,EAAEF,QAAQ,EAAEG,QAAQ,EAAEL,KAAK,CAAC,CAAC;;EAEnE;EACA,MAAMgI,cAAc,GAAG7K,WAAW,CAAC,MAAM;IACvC,IAAIyC,SAAS,EAAE;MACb6E,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC,EAAE,CAAC7E,SAAS,EAAE6E,gBAAgB,CAAC,CAAC;;EAEjC;EACA,MAAMwD,aAAa,GAAG9K,WAAW,CAAC,MAAM;IACtC,IAAIsD,gBAAgB,KAAK,KAAK,EAAE;MAC9B,OAAOR,KAAK;IACd;IACA,OAAOA,KAAK,CAACyF,MAAM,CAChBvD,IAAI;MAAA,IAAA+F,mBAAA;MAAA,OACH,EAAAA,mBAAA,GAAA/F,IAAI,CAACC,IAAI,CAAC+F,QAAQ,cAAAD,mBAAA,uBAAlBA,mBAAA,CAAoBE,WAAW,CAAC,CAAC,MAAK3H,gBAAgB,CAAC2H,WAAW,CAAC,CAAC;IAAA,CACxE,CAAC;EACH,CAAC,EAAE,CAACnI,KAAK,EAAEQ,gBAAgB,CAAC,CAAC;EAE7B,MAAM4H,iBAAiB,GAAGlL,WAAW,CAClCmL,MAAM,IAAK;IACV;IACA,IAAI/H,YAAY,EAAE;MAChBiH,qBAAqB,CAACjH,YAAY,CAACd,EAAE,EAAE6I,MAAM,CAACC,SAAS,CAAC;IAC1D;;IAEA;IACA;EACF,CAAC,EACD,CAAChI,YAAY,EAAEiH,qBAAqB,CACtC,CAAC;EAED,MAAMgB,0BAA0B,GAAGrL,WAAW,CAAE6F,IAAI,IAAK;IACvDhC,iBAAiB,CAACgC,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA5F,SAAS,CAAC,MAAM;IACd;IACA,IAAIqL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,MAAMC,aAAa,GAAGhG,OAAO,CAACsD,KAAK;MACnCtD,OAAO,CAACsD,KAAK,GAAG,CAAC,GAAG2C,IAAI,KAAK;QAAA,IAAAC,MAAA,EAAAC,eAAA,EAAAC,OAAA,EAAAC,eAAA,EAAAC,qBAAA;QAC3B,IACE,CAAAJ,MAAA,GAAAD,IAAI,CAAC,CAAC,CAAC,cAAAC,MAAA,gBAAAC,eAAA,GAAPD,MAAA,CAASK,QAAQ,cAAAJ,eAAA,eAAjBA,eAAA,CAAAK,IAAA,CAAAN,MAAA,EAAoB,qBAAqB,CAAC,KAAAE,OAAA,GAC1CH,IAAI,CAAC,CAAC,CAAC,cAAAG,OAAA,gBAAAC,eAAA,GAAPD,OAAA,CAASK,OAAO,cAAAJ,eAAA,gBAAAC,qBAAA,GAAhBD,eAAA,CAAkBE,QAAQ,cAAAD,qBAAA,eAA1BA,qBAAA,CAAAE,IAAA,CAAAH,eAAA,EAA6B,qBAAqB,CAAC,EACnD;UACA;UACA;QACF;QACAL,aAAa,CAACU,KAAK,CAAC1G,OAAO,EAAEiG,IAAI,CAAC;MACpC,CAAC;MAED,OAAO,MAAM;QACXjG,OAAO,CAACsD,KAAK,GAAG0C,aAAa;MAC/B,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAxL,SAAS,CAAC,MAAM;IACd,IAAI,CAACqE,cAAc,CAACkB,OAAO,IAAI1C,KAAK,CAACyC,MAAM,GAAG,CAAC,IAAItB,iBAAiB,EAAE;MACpE;MACA,MAAMoC,SAAS,GAAGC,UAAU,CAAC,MAAM;QACjCb,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;QAC9DzB,iBAAiB,CAACmI,OAAO,CAAC;UACxBC,OAAO,EAAE,GAAG;UACZC,kBAAkB,EAAE,IAAI;UACxBC,OAAO,EAAE,GAAG;UACZC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;MAEP,OAAO,MAAM3F,YAAY,CAACR,SAAS,CAAC;IACtC;EACF,CAAC,EAAE,CAACvD,KAAK,CAACyC,MAAM,EAAEtB,iBAAiB,CAAC,CAAC;EAErC,oBACE/B,OAAA;IAAKuK,GAAG,EAAEzI,gBAAiB;IAAC0I,SAAS,EAAC,eAAe;IAAAC,QAAA,GAClDlK,SAAS,IAAIqB,eAAe,iBAC3B5B,OAAA,CAACxB,KAAK;MAACoF,QAAQ,EAAC,OAAO;MAAC4G,SAAS,EAAC,WAAW;MAAAC,QAAA,eAC3CzK,OAAA,CAACF,kBAAkB;QACjB4K,aAAa,EAAE1B,iBAAkB;QACjC2B,sBAAsB,EAAExB,0BAA2B;QACnDyB,eAAe,EAAElJ,cAAe;QAChCF,QAAQ,EAAEA,QAAS;QACnBqJ,gBAAgB,EAAGC,IAAI,IAAK;UAC1BrJ,WAAW,CAACqJ,IAAI,CAAC;UACjB,IAAIA,IAAI,KAAK,SAAS,EAAE;YACtBnK,KAAK,CAAC;cACJqC,KAAK,EAAE,cAAc;cACrBC,WAAW,EACT;YACJ,CAAC,CAAC;UACJ,CAAC,MAAM,IAAI6H,IAAI,KAAK,QAAQ,EAAE;YAC5BnK,KAAK,CAAC;cACJqC,KAAK,EAAE,aAAa;cACpBC,WAAW,EAAE;YACf,CAAC,CAAC;UACJ;QACF,CAAE;QACF8H,cAAc,EAAEA,CAAA,KAAMxJ,kBAAkB,CAAC,IAAI;MAAE;QAAAyJ,QAAA,EAAAtN,YAAA;QAAAuN,UAAA;QAAAC,YAAA;MAAA,OAChD;IAAC;MAAAF,QAAA,EAAAtN,YAAA;MAAAuN,UAAA;MAAAC,YAAA;IAAA,OACG,CACR,EAEA3K,SAAS,iBACRP,OAAA,CAACxB,KAAK;MACJoF,QAAQ,EAAC,WAAW;MACpB4G,SAAS,EAAC,6FAA6F;MAAAC,QAAA,eAEvGzK,OAAA;QAAKwK,SAAS,EAAC,wBAAwB;QAAAC,QAAA,gBACrCzK,OAAA,CAAChB,MAAM;UACL+F,IAAI,EAAC,IAAI;UACTyF,SAAS,EAAC,wFAAwF;UAClGW,OAAO,EAAE9C,UAAW;UACpB+C,QAAQ,EAAEpJ,SAAS,CAACqB,MAAM,KAAK,CAAE;UAAAoH,QAAA,EAClC;QAED;UAAAO,QAAA,EAAAtN,YAAA;UAAAuN,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlL,OAAA,CAAChB,MAAM;UACL+F,IAAI,EAAC,IAAI;UACTyF,SAAS,EAAC,wFAAwF;UAClGW,OAAO,EAAE1C,UAAW;UACpB2C,QAAQ,EAAElJ,SAAS,CAACmB,MAAM,KAAK,CAAE;UAAAoH,QAAA,EAClC;QAED;UAAAO,QAAA,EAAAtN,YAAA;UAAAuN,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlL,OAAA,CAAChB,MAAM;UACLwL,SAAS,EAAC,8CAA8C;UACxDzF,IAAI,EAAC,IAAI;UACToG,OAAO,EAAEzE,iBAAkB;UAAA+D,QAAA,gBAE3BzK,OAAA,CAACb,IAAI;YAACqL,SAAS,EAAC;UAAc;YAAAQ,QAAA,EAAAtN,YAAA;YAAAuN,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,SACnC;QAAA;UAAAF,QAAA,EAAAtN,YAAA;UAAAuN,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAF,QAAA,EAAAtN,YAAA;QAAAuN,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAF,QAAA,EAAAtN,YAAA;MAAAuN,UAAA;MAAAC,YAAA;IAAA,OACD,CACR,eAEDlL,OAAA;MAAKwK,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACrBzK,OAAA,CAAC/B,SAAS;QAER2C,KAAK,EAAEgI,aAAa,CAAC,CAAE;QACvB7H,KAAK,EAAEA,KAAM;QACbD,aAAa,EAAEP,SAAS,GAAGO,aAAa,GAAGuK,SAAU;QACrDpK,aAAa,EAAEV,SAAS,GAAGU,aAAa,GAAGoK,SAAU;QACrD/F,SAAS,EAAE/E,SAAS,GAAG+E,SAAS,GAAG+F,SAAU;QAC7CnF,WAAW,EAAEA,WAAY;QACzBkC,WAAW,EAAEA,WAAY;QACzB3B,WAAW,EAAEA,WAAY;QACzBxG,SAAS,EAAEA,SAAU;QACrB0I,cAAc,EAAEA,cAAe;QAC/B2C,cAAc,EAAE/K,SAAU;QAC1BgL,gBAAgB,EAAEhL,SAAS,IAAIiB,QAAQ,KAAK,SAAU;QACtDgK,kBAAkB,EAAE,CAAChL,QAAS;QAC9BiL,kBAAkB,EAAE;UAClB9H,IAAI,EAAE,YAAY;UAClBa,KAAK,EAAE;YAAEmB,MAAM,EAAE;UAAU,CAAC;UAC5BD,QAAQ,EAAE,IAAI;UACd,IAAIhE,cAAc,KAAK,OAAO,IAAI;YAChCkE,SAAS,EAAE;cACTjC,IAAI,EAAEhF,UAAU,CAACkH,WAAW;cAC5BC,KAAK,EAAE,EAAE;cACTC,MAAM,EAAE,EAAE;cACVC,KAAK,EAAE;YACT;UACF,CAAC,CAAC;UACFjD,IAAI,EAAE;YACJrB;UACF;QACF,CAAE;QACFwI,OAAO;QACPwB,cAAc,EAAE;UACdvB,OAAO,EAAE,GAAG;UACZC,kBAAkB,EAAE,IAAI;UACxBC,OAAO,EAAE,GAAG;UACZC,OAAO,EAAE;QACX,CAAE;QACFD,OAAO,EAAE,GAAI;QACbC,OAAO,EAAE,CAAE;QACXqB,UAAU,EAAE,IAAK;QACjBC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAE;QACnBC,UAAU,EAAE,CACV,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EACd,CAAC,IAAI,EAAE,IAAI,CAAC,CACZ;QACFC,UAAU,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAE;QACtCC,mBAAmB,EAAE,IAAK;QAC1BC,iBAAiB,EAAE,KAAM;QACzBC,oBAAoB,EAAE,KAAM;QAC5BC,MAAM,EAAGC,QAAQ,IAAK;UACpB;UACAhI,UAAU,CAAC,MAAM;YACf,IAAIxD,KAAK,CAACyC,MAAM,GAAG,CAAC,EAAE;cACpB+I,QAAQ,CAAClC,OAAO,CAAC;gBAAEC,OAAO,EAAE;cAAI,CAAC,CAAC;cAClC5G,OAAO,CAACC,GAAG,CACT,qCAAqC,EACrC5C,KAAK,CAACyC,MACR,CAAC;YACH;UACF,CAAC,EAAE,GAAG,CAAC;QACT,CAAE;QAAAoH,QAAA,gBAEFzK,OAAA,CAAC7B,QAAQ;UAAA6M,QAAA,EAAAtN,YAAA;UAAAuN,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACZlL,OAAA,CAAC9B,OAAO;UAACmO,eAAe,EAAE,CAAE;UAACC,QAAQ;UAACC,QAAQ;QAAA;UAAAvB,QAAA,EAAAtN,YAAA;UAAAuN,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACjDlL,OAAA,CAAC5B,UAAU;UAACgJ,OAAO,EAAC,MAAM;UAACoF,GAAG,EAAE,EAAG;UAACzH,IAAI,EAAE,CAAE;UAACiB,KAAK,EAAC;QAAS;UAAAgF,QAAA,EAAAtN,YAAA;UAAAuN,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAhE1D,QAAQ9K,EAAE,IAAIQ,KAAK,CAACyC,MAAM,EAAE;QAAA2H,QAAA,EAAAtN,YAAA;QAAAuN,UAAA;QAAAC,YAAA;MAAA,OAiExB;IAAC;MAAAF,QAAA,EAAAtN,YAAA;MAAAuN,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,EAELhK,YAAY,iBACXlB,OAAA,CAACJ,eAAe;MACdkD,IAAI,EAAE5B,YAAa;MACnBuL,OAAO,EAAEA,CAAA,KAAMtL,eAAe,CAAC,IAAI,CAAE;MACrCuL,gBAAgB,EAAErK,oBAAqB;MACvCsK,QAAQ,EAAEpM,SAAS,GAAG2H,gBAAgB,GAAGmD,SAAU;MACnDuB,aAAa,EAAEzE,qBAAsB;MACrC0E,OAAO,EAAEtM,SAAU;MACnBC,QAAQ,EAAEA;IAAS;MAAAwK,QAAA,EAAAtN,YAAA;MAAAuN,UAAA;MAAAC,YAAA;IAAA,OACpB,CACF,EAEA5J,eAAe,iBACdtB,OAAA,CAACH,eAAe;MACdiN,IAAI,EAAExL,eAAgB;MACtBmL,OAAO,EAAEA,CAAA,KAAMlL,kBAAkB,CAAC,KAAK,CAAE;MACzCwL,KAAK,EAAE1F;IAAgB;MAAA2D,QAAA,EAAAtN,YAAA;MAAAuN,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF;EAAA;IAAAF,QAAA,EAAAtN,YAAA;IAAAuN,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACvN,EAAA,CAhwBQwC,gBAAgB;EAAA,QASLlB,QAAQ,EACeZ,aAAa,EACbC,aAAa,EAQ5BI,YAAY;AAAA;AAAAsO,EAAA,GAnB/B7M,gBAAgB;AAkwBzB,eAAe,SAAS8M,WAAWA,CAACC,KAAK,EAAE;EACzC,oBACElN,OAAA,CAACvB,iBAAiB;IAAAgM,QAAA,eAChBzK,OAAA,CAACG,gBAAgB;MAAA,GAAK+M;IAAK;MAAAlC,QAAA,EAAAtN,YAAA;MAAAuN,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAF,QAAA,EAAAtN,YAAA;IAAAuN,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAExB;AAACiC,GAAA,GANuBF,WAAW;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}