{"ast":null,"code":"import _objectSpread from\"D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import api from\"./api\";// Get all roadmaps\nexport const getRoadmaps=async()=>{const response=await api.get(\"/roadmaps\");return response.data;};// Get roadmap by ID\nexport const getRoadmapById=async id=>{const response=await api.get(\"/roadmaps/\".concat(id));// Format data to ensure consistent properties\nconst roadmapData=response.data;// Make sure categoryName is available\nif(roadmapData.category&&!roadmapData.categoryName){roadmapData.categoryName=roadmapData.category.name;}// Make sure author info is available for backward compatibility\nif(roadmapData.user&&!roadmapData.author){roadmapData.author=roadmapData.user.username;}return roadmapData;};// Create new roadmap\nexport const createRoadmap=async roadmapData=>{const response=await api.post(\"/roadmaps\",roadmapData);return response.data;};// Update roadmap\nexport const updateRoadmap=async(id,roadmapData)=>{const response=await api.put(\"/roadmaps/\".concat(id),roadmapData);return response.data;};// Delete roadmap\nexport const deleteRoadmap=async id=>{const response=await api.delete(\"/roadmaps/\".concat(id));return response.data;};// Get roadmap nodes - including course connections\nexport const getRoadmapNodes=async id=>{try{var _response$data,_response$data2;console.log(\"Fetching nodes for roadmap \".concat(id));const response=await api.get(\"/roadmaps/\".concat(id,\"/nodes\"));console.log(\"[FETCH NODES] Raw server response:\",{status:response.status,dataLength:((_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.length)||0,firstNode:((_response$data2=response.data)===null||_response$data2===void 0?void 0:_response$data2[0])||\"none\"});// Transform server-side node format to client-side format\nconst transformedNodes=response.data.map(node=>{try{// Parse the JSON data field\nconst nodeData=node.data?JSON.parse(node.data):{};// Check if this node is linked to a course\nlet courseDetails={};if(node.courseId){// In a real implementation, you might fetch course details here\n// or have them included in the node response\ncourseDetails={courseId:node.courseId// Other course properties would be added here\n};}return{id:node.nodeIdentifier,type:\"courseNode\",// Default type for all nodes\nposition:{x:node.positionX,y:node.positionY},data:_objectSpread({id:node.nodeIdentifier,label:nodeData.label||\"\",code:nodeData.code||\"\",description:nodeData.description||\"\",category:nodeData.category||\"\",categoryId:nodeData.categoryId||null,difficulty:nodeData.difficulty||\"beginner\",credits:nodeData.credits||0,completed:nodeData.completed||false,nodeColor:nodeData.nodeColor,nodeBgColor:nodeData.nodeBgColor,textColor:nodeData.textColor,fontSize:nodeData.fontSize,prerequisites:nodeData.prerequisites||\"\",documentation:nodeData.documentation||\"\"},courseDetails)};}catch(error){console.error(\"Error parsing node data:\",error,node);return null;}}).filter(node=>node!==null);console.log(\"Transformed \".concat(transformedNodes.length,\" nodes\"));if(transformedNodes.length>0){var _transformedNodes$0$d;console.log(\"[FETCH NODES] First transformed node:\",{id:transformedNodes[0].id,type:transformedNodes[0].type,position:transformedNodes[0].position,label:(_transformedNodes$0$d=transformedNodes[0].data)===null||_transformedNodes$0$d===void 0?void 0:_transformedNodes$0$d.label});}return transformedNodes;}catch(error){console.error(\"Error fetching roadmap nodes:\",error);throw error;}};// Update roadmap nodes\nexport const updateRoadmapNodes=async(id,nodes)=>{try{var _nodes;console.log(\"[API] Updating \".concat(((_nodes=nodes)===null||_nodes===void 0?void 0:_nodes.length)||0,\" nodes for roadmap \").concat(id));console.log(\"[API] Nodes data type:\",typeof nodes,Array.isArray(nodes));// Đảm bảo nodes là mảng hợp lệ\nif(!nodes){console.error(\"[API] Nodes is null or undefined\");nodes=[];}if(!Array.isArray(nodes)){console.error(\"[API] Invalid nodes data - not an array:\",typeof nodes);// Cố gắng chuyển đổi thành mảng nếu có thể\ntry{if(typeof nodes===\"object\"&&nodes!==null){nodes=Object.values(nodes);console.log(\"[API] Converted object to array, length:\",nodes.length);}else{nodes=[];}}catch(conversionError){console.error(\"[API] Conversion error:\",conversionError);nodes=[];}}if(nodes.length===0){console.warn(\"[API] Warning: Empty nodes array provided\");}// Transform to server format\nconst serverNodes=nodes.map(node=>{var _node$position,_node$position2,_node$data,_serverNode$data,_serverNode$data2;// Ensure all required node properties exist\nif(!(node!==null&&node!==void 0&&node.id)){console.error(\"[UPDATE] Node missing id:\",node);// Skip this node\nreturn null;}if(!node.position){console.warn(\"[UPDATE] Node \".concat(node.id,\" missing position, using default\"));node.position={x:0,y:0};}// Ensure node data is well-formed JSON\nlet nodeDataString;try{if(typeof node.data===\"object\"&&node.data!==null){nodeDataString=JSON.stringify(node.data);}else if(typeof node.data===\"string\"){// Validate that it's already valid JSON\ntry{JSON.parse(node.data);// Just testing if this works\nnodeDataString=node.data;}catch(e){console.error(\"[UPDATE] Invalid JSON data for node \".concat(node.id,\":\"),e);nodeDataString=JSON.stringify({label:node.data||\"Unknown\"});}}else{nodeDataString=JSON.stringify({label:\"Unknown\"});}}catch(jsonError){console.error(\"[UPDATE] Error stringifying data for node \".concat(node.id,\":\"),jsonError);nodeDataString=JSON.stringify({label:\"Unknown\"});}// Create properly formatted server node\nconst serverNode={nodeIdentifier:node.id,positionX:((_node$position=node.position)===null||_node$position===void 0?void 0:_node$position.x)||0,positionY:((_node$position2=node.position)===null||_node$position2===void 0?void 0:_node$position2.y)||0,data:nodeDataString,courseId:((_node$data=node.data)===null||_node$data===void 0?void 0:_node$data.courseId)||null};console.log(\"[UPDATE] Transformed node \".concat(node.id,\" for server:\"),{nodeIdentifier:serverNode.nodeIdentifier,positionX:serverNode.positionX,positionY:serverNode.positionY,dataLength:(_serverNode$data=serverNode.data)===null||_serverNode$data===void 0?void 0:_serverNode$data.length,dataPreview:(_serverNode$data2=serverNode.data)===null||_serverNode$data2===void 0?void 0:_serverNode$data2.substring(0,50),courseId:serverNode.courseId});return serverNode;}).filter(node=>node!==null);// Lọc bỏ các node null\nconsole.log(\"[API] Sending \".concat(serverNodes.length,\" nodes to server\"));const response=await api.put(\"/roadmaps/\".concat(id,\"/nodes\"),{nodes:serverNodes});console.log(\"[API] Server response for nodes update:\",response.status,response.statusText);console.log(\"[API] Response data:\",response.data);return response.data;}catch(error){console.error(\"[API ERROR] Failed to update nodes:\",error);if(error.response){console.error(\"[API ERROR] Response status:\",error.response.status);console.error(\"[API ERROR] Response data:\",error.response.data);}throw error;}};// Get roadmap edges\nexport const getRoadmapEdges=async id=>{try{var _response$data3,_response$data4;console.log(\"Fetching edges for roadmap \".concat(id));const response=await api.get(\"/roadmaps/\".concat(id,\"/edges\"));console.log(\"[FETCH EDGES] Raw server response:\",{status:response.status,dataLength:((_response$data3=response.data)===null||_response$data3===void 0?void 0:_response$data3.length)||0,firstEdge:((_response$data4=response.data)===null||_response$data4===void 0?void 0:_response$data4[0])||\"none\"});// Transform server-side edge format to client-side format\nconst transformedEdges=response.data.map(edge=>{try{// Parse the JSON style field\nconst edgeStyle=edge.style?JSON.parse(edge.style):{};console.log(\"[FETCH EDGES] Processing edge: ID=\".concat(edge.edgeIdentifier,\", Source=\").concat(edge.source,\", Target=\").concat(edge.target));return _objectSpread({id:edge.edgeIdentifier,source:edge.source,target:edge.target,type:edge.type||\"smoothstep\",animated:edge.animated||false,// 保留源句柄和目标句柄信息\nsourceHandle:edge.sourceHandle||null,targetHandle:edge.targetHandle||null,style:{stroke:edgeStyle.stroke||\"#6d28d9\",strokeWidth:edgeStyle.strokeWidth||1},// 确保保留连接类型和其他数据\ndata:_objectSpread({connectionType:edge.connectionType||\"arrow\"},edge.data||{})},edge.connectionType===\"arrow\"&&{markerEnd:{type:\"arrowclosed\",width:20,height:20,color:\"#6d28d9\"}});}catch(error){console.error(\"Error parsing edge data:\",error,edge);return null;}}).filter(edge=>edge!==null);console.log(\"Transformed \".concat(transformedEdges.length,\" edges\"));if(transformedEdges.length>0){console.log(\"[FETCH EDGES] First transformed edge:\",{id:transformedEdges[0].id,source:transformedEdges[0].source,target:transformedEdges[0].target,sourceHandle:transformedEdges[0].sourceHandle,targetHandle:transformedEdges[0].targetHandle});}return transformedEdges;}catch(error){console.error(\"Error fetching roadmap edges:\",error);throw error;}};// Update roadmap edges\nexport const updateRoadmapEdges=async(id,edges)=>{try{var _edges;console.log(\"[API] Updating \".concat(((_edges=edges)===null||_edges===void 0?void 0:_edges.length)||0,\" edges for roadmap \").concat(id));console.log(\"[API] Edges data type:\",typeof edges,Array.isArray(edges));// 确保edges是数组\nif(!edges){console.error(\"[API] Edges is null or undefined\");edges=[];}if(!Array.isArray(edges)){console.error(\"[API] Invalid edges data - not an array:\",typeof edges);// 尝试转换为数组\ntry{if(typeof edges===\"object\"&&edges!==null){edges=Object.values(edges);console.log(\"[API] Converted object to array, length:\",edges.length);}else{edges=[];}}catch(conversionError){console.error(\"[API] Conversion error:\",conversionError);edges=[];}}if(edges.length===0){console.warn(\"[API] Warning: Empty edges array provided\");}// Log每个边缘的详细信息，确保source和target正确\nedges.forEach((edge,index)=>{console.log(\"[API] Edge \".concat(index,\": ID=\").concat(edge.id,\", Source=\").concat(edge.source,\", Target=\").concat(edge.target,\", \\n        SourceHandle=\").concat(edge.sourceHandle,\", TargetHandle=\").concat(edge.targetHandle));});// Transform to server format\nconst serverEdges=edges.map(edge=>{var _edge$data;// Validate required edge properties\nif(!(edge!==null&&edge!==void 0&&edge.id)||!(edge!==null&&edge!==void 0&&edge.source)||!(edge!==null&&edge!==void 0&&edge.target)){console.error(\"[UPDATE] Edge missing required properties:\",edge);// Skip this edge instead of throwing an error\nreturn null;}// Ensure style is well-formed JSON\nlet styleString;if(typeof edge.style===\"object\"&&edge.style!==null){try{styleString=JSON.stringify(edge.style);}catch(e){console.error(\"[UPDATE] Error stringifying style for edge \".concat(edge.id,\":\"),e);styleString=JSON.stringify({stroke:\"#999\"});}}else if(typeof edge.style===\"string\"){// Validate that it's already valid JSON\ntry{JSON.parse(edge.style);// Just testing if this works\nstyleString=edge.style;}catch(e){console.error(\"[UPDATE] Invalid JSON style for edge \".concat(edge.id,\":\"),e);styleString=JSON.stringify({stroke:\"#999\"});}}else{styleString=JSON.stringify({stroke:\"#999\"});}// 创建正确格式化的服务器边缘\nconst serverEdge={edgeIdentifier:edge.id,source:edge.source,target:edge.target,// 保存句柄信息\nsourceHandle:edge.sourceHandle||null,targetHandle:edge.targetHandle||null,type:edge.type||\"smoothstep\",animated:edge.animated||false,style:styleString,// 保存连接类型\nconnectionType:((_edge$data=edge.data)===null||_edge$data===void 0?void 0:_edge$data.connectionType)||\"arrow\",// 保存其他数据\ndata:edge.data?JSON.stringify(edge.data):null};console.log(\"[UPDATE] Transformed edge \".concat(edge.id,\" for server:\"),{edgeIdentifier:serverEdge.edgeIdentifier,source:serverEdge.source,target:serverEdge.target,sourceHandle:serverEdge.sourceHandle,targetHandle:serverEdge.targetHandle,type:serverEdge.type});return serverEdge;}).filter(edge=>edge!==null);// 过滤掉无效边缘\nconsole.log(\"[API] Sending \".concat(serverEdges.length,\" edges to server\"));const response=await api.put(\"/roadmaps/\".concat(id,\"/edges\"),{edges:serverEdges});console.log(\"[API] Server response for edges update:\",response.status,response.statusText);console.log(\"[API] Response data:\",response.data);return response.data;}catch(error){console.error(\"[API ERROR] Failed to update edges:\",error);if(error.response){console.error(\"[API ERROR] Response status:\",error.response.status);console.error(\"[API ERROR] Response data:\",error.response.data);}throw error;}};// Toggle favorite roadmap\nexport const toggleFavoriteRoadmap=async id=>{const response=await api.post(\"/roadmaps/\".concat(id,\"/favorite\"));return response.data;};// Get user favorites\nexport const getUserFavorites=async()=>{const response=await api.get(\"/roadmaps/favorites\");return response.data;};// Link a course to a roadmap node\nexport const linkCourseToNode=async(roadmapId,nodeId,courseId)=>{try{const response=await api.post(\"/roadmaps/\".concat(roadmapId,\"/nodes/\").concat(nodeId,\"/link-course\"),{courseId:Number(courseId)});return response.data;}catch(error){console.error(\"Error linking course to node:\",error);throw error;}};","map":{"version":3,"names":["api","getRoadmaps","response","get","data","getRoadmapById","id","concat","roadmapData","category","categoryName","name","user","author","username","createRoadmap","post","updateRoadmap","put","deleteRoadmap","delete","getRoadmapNodes","_response$data","_response$data2","console","log","status","dataLength","length","firstNode","transformedNodes","map","node","nodeData","JSON","parse","courseDetails","courseId","nodeIdentifier","type","position","x","positionX","y","positionY","_objectSpread","label","code","description","categoryId","difficulty","credits","completed","nodeColor","nodeBgColor","textColor","fontSize","prerequisites","documentation","error","filter","_transformedNodes$0$d","updateRoadmapNodes","nodes","_nodes","Array","isArray","Object","values","conversionError","warn","serverNodes","_node$position","_node$position2","_node$data","_serverNode$data","_serverNode$data2","nodeDataString","stringify","e","jsonError","serverNode","dataPreview","substring","statusText","getRoadmapEdges","_response$data3","_response$data4","firstEdge","transformedEdges","edge","edgeStyle","style","edgeIdentifier","source","target","animated","sourceHandle","targetHandle","stroke","strokeWidth","connectionType","markerEnd","width","height","color","updateRoadmapEdges","edges","_edges","forEach","index","serverEdges","_edge$data","styleString","serverEdge","toggleFavoriteRoadmap","getUserFavorites","linkCourseToNode","roadmapId","nodeId","Number"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/services/roadmapService.js"],"sourcesContent":["import api from \"./api\";\r\n\r\n// Get all roadmaps\r\nexport const getRoadmaps = async () => {\r\n  const response = await api.get(\"/roadmaps\");\r\n  return response.data;\r\n};\r\n\r\n// Get roadmap by ID\r\nexport const getRoadmapById = async (id) => {\r\n  const response = await api.get(`/roadmaps/${id}`);\r\n  // Format data to ensure consistent properties\r\n  const roadmapData = response.data;\r\n\r\n  // Make sure categoryName is available\r\n  if (roadmapData.category && !roadmapData.categoryName) {\r\n    roadmapData.categoryName = roadmapData.category.name;\r\n  }\r\n\r\n  // Make sure author info is available for backward compatibility\r\n  if (roadmapData.user && !roadmapData.author) {\r\n    roadmapData.author = roadmapData.user.username;\r\n  }\r\n\r\n  return roadmapData;\r\n};\r\n\r\n// Create new roadmap\r\nexport const createRoadmap = async (roadmapData) => {\r\n  const response = await api.post(\"/roadmaps\", roadmapData);\r\n  return response.data;\r\n};\r\n\r\n// Update roadmap\r\nexport const updateRoadmap = async (id, roadmapData) => {\r\n  const response = await api.put(`/roadmaps/${id}`, roadmapData);\r\n  return response.data;\r\n};\r\n\r\n// Delete roadmap\r\nexport const deleteRoadmap = async (id) => {\r\n  const response = await api.delete(`/roadmaps/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Get roadmap nodes - including course connections\r\nexport const getRoadmapNodes = async (id) => {\r\n  try {\r\n    console.log(`Fetching nodes for roadmap ${id}`);\r\n    const response = await api.get(`/roadmaps/${id}/nodes`);\r\n\r\n    console.log(`[FETCH NODES] Raw server response:`, {\r\n      status: response.status,\r\n      dataLength: response.data?.length || 0,\r\n      firstNode: response.data?.[0] || \"none\",\r\n    });\r\n\r\n    // Transform server-side node format to client-side format\r\n    const transformedNodes = response.data\r\n      .map((node) => {\r\n        try {\r\n          // Parse the JSON data field\r\n          const nodeData = node.data ? JSON.parse(node.data) : {};\r\n\r\n          // Check if this node is linked to a course\r\n          let courseDetails = {};\r\n          if (node.courseId) {\r\n            // In a real implementation, you might fetch course details here\r\n            // or have them included in the node response\r\n            courseDetails = {\r\n              courseId: node.courseId,\r\n              // Other course properties would be added here\r\n            };\r\n          }\r\n\r\n          return {\r\n            id: node.nodeIdentifier,\r\n            type: \"courseNode\", // Default type for all nodes\r\n            position: {\r\n              x: node.positionX,\r\n              y: node.positionY,\r\n            },\r\n            data: {\r\n              id: node.nodeIdentifier,\r\n              label: nodeData.label || \"\",\r\n              code: nodeData.code || \"\",\r\n              description: nodeData.description || \"\",\r\n              category: nodeData.category || \"\",\r\n              categoryId: nodeData.categoryId || null,\r\n              difficulty: nodeData.difficulty || \"beginner\",\r\n              credits: nodeData.credits || 0,\r\n              completed: nodeData.completed || false,\r\n              nodeColor: nodeData.nodeColor,\r\n              nodeBgColor: nodeData.nodeBgColor,\r\n              textColor: nodeData.textColor,\r\n              fontSize: nodeData.fontSize,\r\n              prerequisites: nodeData.prerequisites || \"\",\r\n              documentation: nodeData.documentation || \"\",\r\n              ...courseDetails,\r\n            },\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error parsing node data:\", error, node);\r\n          return null;\r\n        }\r\n      })\r\n      .filter((node) => node !== null);\r\n\r\n    console.log(`Transformed ${transformedNodes.length} nodes`);\r\n    if (transformedNodes.length > 0) {\r\n      console.log(`[FETCH NODES] First transformed node:`, {\r\n        id: transformedNodes[0].id,\r\n        type: transformedNodes[0].type,\r\n        position: transformedNodes[0].position,\r\n        label: transformedNodes[0].data?.label,\r\n      });\r\n    }\r\n\r\n    return transformedNodes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching roadmap nodes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update roadmap nodes\r\nexport const updateRoadmapNodes = async (id, nodes) => {\r\n  try {\r\n    console.log(`[API] Updating ${nodes?.length || 0} nodes for roadmap ${id}`);\r\n    console.log(`[API] Nodes data type:`, typeof nodes, Array.isArray(nodes));\r\n\r\n    // Đảm bảo nodes là mảng hợp lệ\r\n    if (!nodes) {\r\n      console.error(\"[API] Nodes is null or undefined\");\r\n      nodes = [];\r\n    }\r\n\r\n    if (!Array.isArray(nodes)) {\r\n      console.error(\"[API] Invalid nodes data - not an array:\", typeof nodes);\r\n      // Cố gắng chuyển đổi thành mảng nếu có thể\r\n      try {\r\n        if (typeof nodes === \"object\" && nodes !== null) {\r\n          nodes = Object.values(nodes);\r\n          console.log(\"[API] Converted object to array, length:\", nodes.length);\r\n        } else {\r\n          nodes = [];\r\n        }\r\n      } catch (conversionError) {\r\n        console.error(\"[API] Conversion error:\", conversionError);\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    if (nodes.length === 0) {\r\n      console.warn(\"[API] Warning: Empty nodes array provided\");\r\n    }\r\n\r\n    // Transform to server format\r\n    const serverNodes = nodes\r\n      .map((node) => {\r\n        // Ensure all required node properties exist\r\n        if (!node?.id) {\r\n          console.error(\"[UPDATE] Node missing id:\", node);\r\n          // Skip this node\r\n          return null;\r\n        }\r\n\r\n        if (!node.position) {\r\n          console.warn(\r\n            `[UPDATE] Node ${node.id} missing position, using default`\r\n          );\r\n          node.position = { x: 0, y: 0 };\r\n        }\r\n\r\n        // Ensure node data is well-formed JSON\r\n        let nodeDataString;\r\n        try {\r\n          if (typeof node.data === \"object\" && node.data !== null) {\r\n            nodeDataString = JSON.stringify(node.data);\r\n          } else if (typeof node.data === \"string\") {\r\n            // Validate that it's already valid JSON\r\n            try {\r\n              JSON.parse(node.data); // Just testing if this works\r\n              nodeDataString = node.data;\r\n            } catch (e) {\r\n              console.error(\r\n                `[UPDATE] Invalid JSON data for node ${node.id}:`,\r\n                e\r\n              );\r\n              nodeDataString = JSON.stringify({\r\n                label: node.data || \"Unknown\",\r\n              });\r\n            }\r\n          } else {\r\n            nodeDataString = JSON.stringify({ label: \"Unknown\" });\r\n          }\r\n        } catch (jsonError) {\r\n          console.error(\r\n            `[UPDATE] Error stringifying data for node ${node.id}:`,\r\n            jsonError\r\n          );\r\n          nodeDataString = JSON.stringify({ label: \"Unknown\" });\r\n        }\r\n\r\n        // Create properly formatted server node\r\n        const serverNode = {\r\n          nodeIdentifier: node.id,\r\n          positionX: node.position?.x || 0,\r\n          positionY: node.position?.y || 0,\r\n          data: nodeDataString,\r\n          courseId: node.data?.courseId || null,\r\n        };\r\n\r\n        console.log(`[UPDATE] Transformed node ${node.id} for server:`, {\r\n          nodeIdentifier: serverNode.nodeIdentifier,\r\n          positionX: serverNode.positionX,\r\n          positionY: serverNode.positionY,\r\n          dataLength: serverNode.data?.length,\r\n          dataPreview: serverNode.data?.substring(0, 50),\r\n          courseId: serverNode.courseId,\r\n        });\r\n\r\n        return serverNode;\r\n      })\r\n      .filter((node) => node !== null); // Lọc bỏ các node null\r\n\r\n    console.log(`[API] Sending ${serverNodes.length} nodes to server`);\r\n\r\n    const response = await api.put(`/roadmaps/${id}/nodes`, {\r\n      nodes: serverNodes,\r\n    });\r\n\r\n    console.log(\r\n      `[API] Server response for nodes update:`,\r\n      response.status,\r\n      response.statusText\r\n    );\r\n    console.log(`[API] Response data:`, response.data);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`[API ERROR] Failed to update nodes:`, error);\r\n    if (error.response) {\r\n      console.error(`[API ERROR] Response status:`, error.response.status);\r\n      console.error(`[API ERROR] Response data:`, error.response.data);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get roadmap edges\r\nexport const getRoadmapEdges = async (id) => {\r\n  try {\r\n    console.log(`Fetching edges for roadmap ${id}`);\r\n    const response = await api.get(`/roadmaps/${id}/edges`);\r\n\r\n    console.log(`[FETCH EDGES] Raw server response:`, {\r\n      status: response.status,\r\n      dataLength: response.data?.length || 0,\r\n      firstEdge: response.data?.[0] || \"none\",\r\n    });\r\n\r\n    // Transform server-side edge format to client-side format\r\n    const transformedEdges = response.data\r\n      .map((edge) => {\r\n        try {\r\n          // Parse the JSON style field\r\n          const edgeStyle = edge.style ? JSON.parse(edge.style) : {};\r\n\r\n          console.log(\r\n            `[FETCH EDGES] Processing edge: ID=${edge.edgeIdentifier}, Source=${edge.source}, Target=${edge.target}`\r\n          );\r\n\r\n          return {\r\n            id: edge.edgeIdentifier,\r\n            source: edge.source,\r\n            target: edge.target,\r\n            type: edge.type || \"smoothstep\",\r\n            animated: edge.animated || false,\r\n            // 保留源句柄和目标句柄信息\r\n            sourceHandle: edge.sourceHandle || null,\r\n            targetHandle: edge.targetHandle || null,\r\n            style: {\r\n              stroke: edgeStyle.stroke || \"#6d28d9\",\r\n              strokeWidth: edgeStyle.strokeWidth || 1,\r\n            },\r\n            // 确保保留连接类型和其他数据\r\n            data: {\r\n              connectionType: edge.connectionType || \"arrow\",\r\n              ...(edge.data || {}),\r\n            },\r\n            // 如果有方向箭头信息，也需要保留\r\n            ...(edge.connectionType === \"arrow\" && {\r\n              markerEnd: {\r\n                type: \"arrowclosed\",\r\n                width: 20,\r\n                height: 20,\r\n                color: \"#6d28d9\",\r\n              },\r\n            }),\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error parsing edge data:\", error, edge);\r\n          return null;\r\n        }\r\n      })\r\n      .filter((edge) => edge !== null);\r\n\r\n    console.log(`Transformed ${transformedEdges.length} edges`);\r\n    if (transformedEdges.length > 0) {\r\n      console.log(`[FETCH EDGES] First transformed edge:`, {\r\n        id: transformedEdges[0].id,\r\n        source: transformedEdges[0].source,\r\n        target: transformedEdges[0].target,\r\n        sourceHandle: transformedEdges[0].sourceHandle,\r\n        targetHandle: transformedEdges[0].targetHandle,\r\n      });\r\n    }\r\n\r\n    return transformedEdges;\r\n  } catch (error) {\r\n    console.error(\"Error fetching roadmap edges:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update roadmap edges\r\nexport const updateRoadmapEdges = async (id, edges) => {\r\n  try {\r\n    console.log(`[API] Updating ${edges?.length || 0} edges for roadmap ${id}`);\r\n    console.log(`[API] Edges data type:`, typeof edges, Array.isArray(edges));\r\n\r\n    // 确保edges是数组\r\n    if (!edges) {\r\n      console.error(\"[API] Edges is null or undefined\");\r\n      edges = [];\r\n    }\r\n\r\n    if (!Array.isArray(edges)) {\r\n      console.error(\"[API] Invalid edges data - not an array:\", typeof edges);\r\n      // 尝试转换为数组\r\n      try {\r\n        if (typeof edges === \"object\" && edges !== null) {\r\n          edges = Object.values(edges);\r\n          console.log(\"[API] Converted object to array, length:\", edges.length);\r\n        } else {\r\n          edges = [];\r\n        }\r\n      } catch (conversionError) {\r\n        console.error(\"[API] Conversion error:\", conversionError);\r\n        edges = [];\r\n      }\r\n    }\r\n\r\n    if (edges.length === 0) {\r\n      console.warn(\"[API] Warning: Empty edges array provided\");\r\n    }\r\n\r\n    // Log每个边缘的详细信息，确保source和target正确\r\n    edges.forEach((edge, index) => {\r\n      console.log(`[API] Edge ${index}: ID=${edge.id}, Source=${edge.source}, Target=${edge.target}, \r\n        SourceHandle=${edge.sourceHandle}, TargetHandle=${edge.targetHandle}`);\r\n    });\r\n\r\n    // Transform to server format\r\n    const serverEdges = edges\r\n      .map((edge) => {\r\n        // Validate required edge properties\r\n        if (!edge?.id || !edge?.source || !edge?.target) {\r\n          console.error(\"[UPDATE] Edge missing required properties:\", edge);\r\n          // Skip this edge instead of throwing an error\r\n          return null;\r\n        }\r\n\r\n        // Ensure style is well-formed JSON\r\n        let styleString;\r\n        if (typeof edge.style === \"object\" && edge.style !== null) {\r\n          try {\r\n            styleString = JSON.stringify(edge.style);\r\n          } catch (e) {\r\n            console.error(\r\n              `[UPDATE] Error stringifying style for edge ${edge.id}:`,\r\n              e\r\n            );\r\n            styleString = JSON.stringify({ stroke: \"#999\" });\r\n          }\r\n        } else if (typeof edge.style === \"string\") {\r\n          // Validate that it's already valid JSON\r\n          try {\r\n            JSON.parse(edge.style); // Just testing if this works\r\n            styleString = edge.style;\r\n          } catch (e) {\r\n            console.error(\r\n              `[UPDATE] Invalid JSON style for edge ${edge.id}:`,\r\n              e\r\n            );\r\n            styleString = JSON.stringify({ stroke: \"#999\" });\r\n          }\r\n        } else {\r\n          styleString = JSON.stringify({ stroke: \"#999\" });\r\n        }\r\n\r\n        // 创建正确格式化的服务器边缘\r\n        const serverEdge = {\r\n          edgeIdentifier: edge.id,\r\n          source: edge.source,\r\n          target: edge.target,\r\n          // 保存句柄信息\r\n          sourceHandle: edge.sourceHandle || null,\r\n          targetHandle: edge.targetHandle || null,\r\n          type: edge.type || \"smoothstep\",\r\n          animated: edge.animated || false,\r\n          style: styleString,\r\n          // 保存连接类型\r\n          connectionType: edge.data?.connectionType || \"arrow\",\r\n          // 保存其他数据\r\n          data: edge.data ? JSON.stringify(edge.data) : null,\r\n        };\r\n\r\n        console.log(`[UPDATE] Transformed edge ${edge.id} for server:`, {\r\n          edgeIdentifier: serverEdge.edgeIdentifier,\r\n          source: serverEdge.source,\r\n          target: serverEdge.target,\r\n          sourceHandle: serverEdge.sourceHandle,\r\n          targetHandle: serverEdge.targetHandle,\r\n          type: serverEdge.type,\r\n        });\r\n\r\n        return serverEdge;\r\n      })\r\n      .filter((edge) => edge !== null); // 过滤掉无效边缘\r\n\r\n    console.log(`[API] Sending ${serverEdges.length} edges to server`);\r\n\r\n    const response = await api.put(`/roadmaps/${id}/edges`, {\r\n      edges: serverEdges,\r\n    });\r\n\r\n    console.log(\r\n      `[API] Server response for edges update:`,\r\n      response.status,\r\n      response.statusText\r\n    );\r\n    console.log(`[API] Response data:`, response.data);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`[API ERROR] Failed to update edges:`, error);\r\n    if (error.response) {\r\n      console.error(`[API ERROR] Response status:`, error.response.status);\r\n      console.error(`[API ERROR] Response data:`, error.response.data);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Toggle favorite roadmap\r\nexport const toggleFavoriteRoadmap = async (id) => {\r\n  const response = await api.post(`/roadmaps/${id}/favorite`);\r\n  return response.data;\r\n};\r\n\r\n// Get user favorites\r\nexport const getUserFavorites = async () => {\r\n  const response = await api.get(\"/roadmaps/favorites\");\r\n  return response.data;\r\n};\r\n\r\n// Link a course to a roadmap node\r\nexport const linkCourseToNode = async (roadmapId, nodeId, courseId) => {\r\n  try {\r\n    const response = await api.post(\r\n      `/roadmaps/${roadmapId}/nodes/${nodeId}/link-course`,\r\n      {\r\n        courseId: Number(courseId),\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error linking course to node:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}