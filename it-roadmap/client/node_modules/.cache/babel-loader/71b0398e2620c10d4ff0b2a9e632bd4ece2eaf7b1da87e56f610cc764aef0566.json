{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\demo\\\\DACS-jules_wip_16596734084587186652\\\\it-roadmap\\\\client\\\\src\\\\components\\\\RoadmapView.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, Panel, ReactFlowProvider, useReactFlow, MarkerType, Connection } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport { PlusCircle, Save, Trash, Plus, X, Link as LinkIcon, LinkOff, Palette, ArrowLeft, ArrowRight } from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  courseNode: CourseNode\n};\n\n// 边缘处理工具函数 - 定义在组件外部，避免重渲染\nconst processEdgeConfigUtil = edge => {\n  var _edge$data;\n  const connectionType = ((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.connectionType) || \"arrow\";\n  const needsArrow = connectionType === \"arrow\";\n  return {\n    ...edge,\n    // 确保保留现有的markerEnd配置或创建新的\n    markerEnd: edge.markerEnd || (needsArrow ? {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: \"hsl(var(--primary))\"\n    } : undefined),\n    data: {\n      ...(edge.data || {}),\n      connectionType,\n      // 确保存储源和目标信息\n      sourceId: edge.source,\n      targetId: edge.target,\n      sourceHandle: edge.sourceHandle || null,\n      targetHandle: edge.targetHandle || null\n    }\n  };\n};\nconst RoadmapViewInner = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate\n}, ref) => {\n  _s();\n  const {\n    toast\n  } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const isInitialMount = useRef(true);\n  // Keep track of manually added nodes to prevent them from being lost\n  const addedNodesRef = useRef([]);\n  const {\n    user,\n    devMode,\n    login,\n    logout,\n    isAuthenticated,\n    isAdmin\n  } = useAuth();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  // 工具函数：处理边缘连接配置 (组件内部版本，使用外部工具函数)\n  const processEdgeConfig = useCallback(edge => {\n    return processEdgeConfigUtil(edge);\n  }, []);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack(prev => [...prev, {\n      nodes: [...nodes],\n      edges: [...edges]\n    }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n\n  // 获取当前的默认边缘配置\n  const getDefaultEdgeOptions = useCallback(() => {\n    return {\n      type: \"smoothstep\",\n      style: {\n        stroke: \"hsl(var(--muted-foreground))\"\n      },\n      animated: false,\n      ...(connectionType === \"arrow\" && {\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          width: 20,\n          height: 20,\n          color: \"hsl(var(--primary))\"\n        }\n      }),\n      data: {\n        connectionType\n      }\n    };\n  }, [connectionType]);\n\n  // Define Save changes AFTER processEdgeConfig is defined\n  const saveChanges = useCallback(() => {\n    if (!onSave) return;\n    try {\n      console.log(\"[VIEW] Preparing to save changes\");\n      console.log(\"[VIEW] Current nodes count:\", nodes.length);\n      console.log(\"[VIEW] Current edges count:\", edges.length);\n\n      // Ensure all nodes have required properties\n      const cleanedNodes = nodes.map(node => {\n        var _node$position, _node$position2, _node$data, _node$data2, _node$data3, _node$data4, _node$data5, _node$data6, _node$data7, _node$data8, _node$data9, _node$data0, _node$data1;\n        // Create a clean copy of the node without React references\n        return {\n          id: node.id,\n          type: node.type || \"courseNode\",\n          position: {\n            x: ((_node$position = node.position) === null || _node$position === void 0 ? void 0 : _node$position.x) || 0,\n            y: ((_node$position2 = node.position) === null || _node$position2 === void 0 ? void 0 : _node$position2.y) || 0\n          },\n          // Extract only the data we need from node.data\n          data: {\n            label: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.label) || \"\",\n            id: node.id,\n            code: ((_node$data2 = node.data) === null || _node$data2 === void 0 ? void 0 : _node$data2.code) || \"\",\n            description: ((_node$data3 = node.data) === null || _node$data3 === void 0 ? void 0 : _node$data3.description) || \"\",\n            completed: ((_node$data4 = node.data) === null || _node$data4 === void 0 ? void 0 : _node$data4.completed) || false,\n            completedAt: ((_node$data5 = node.data) === null || _node$data5 === void 0 ? void 0 : _node$data5.completedAt) || null,\n            documents: ((_node$data6 = node.data) === null || _node$data6 === void 0 ? void 0 : _node$data6.documents) || [],\n            courseId: (_node$data7 = node.data) === null || _node$data7 === void 0 ? void 0 : _node$data7.courseId,\n            nodeColor: (_node$data8 = node.data) === null || _node$data8 === void 0 ? void 0 : _node$data8.nodeColor,\n            nodeBgColor: (_node$data9 = node.data) === null || _node$data9 === void 0 ? void 0 : _node$data9.nodeBgColor,\n            textColor: (_node$data0 = node.data) === null || _node$data0 === void 0 ? void 0 : _node$data0.textColor,\n            fontSize: (_node$data1 = node.data) === null || _node$data1 === void 0 ? void 0 : _node$data1.fontSize\n          }\n        };\n      });\n\n      // Remove any invalid edges\n      const nodeIdMap = new Set(cleanedNodes.map(node => node.id));\n\n      // Lọc bỏ các edges không hợp lệ\n      const validEdges = edges.filter(edge => {\n        if (!edge || !edge.id || !edge.source || !edge.target) {\n          console.warn(\"[VIEW] Skipping invalid edge missing id/source/target\");\n          return false;\n        }\n        return true;\n      });\n\n      // Clean edges - make sure they connect to existing nodes\n      const cleanedEdges = validEdges.filter(edge => {\n        // Check if source and target nodes exist\n        const sourceExists = nodeIdMap.has(edge.source);\n        const targetExists = nodeIdMap.has(edge.target);\n        if (!sourceExists || !targetExists) {\n          console.warn(`[VIEW] Removing invalid edge - Source exists: ${sourceExists}, Target exists: ${targetExists}`, edge);\n          return false;\n        }\n        return true;\n      }).map(edge => {\n        // 使用工具函数确保边缘数据的一致性\n        return processEdgeConfig(edge);\n      });\n      console.log(\"[VIEW] Cleaned nodes count:\", cleanedNodes.length);\n      console.log(\"[VIEW] Cleaned edges count:\", cleanedEdges.length);\n\n      // Debug: kiểm tra kiểu dữ liệu trước khi gọi callback\n      console.log(\"[VIEW] Cleaned nodes type:\", Array.isArray(cleanedNodes) ? \"Array\" : typeof cleanedNodes);\n      console.log(\"[VIEW] Cleaned edges type:\", Array.isArray(cleanedEdges) ? \"Array\" : typeof cleanedEdges);\n      console.log(\"[VIEW] First node in cleaned array:\", cleanedNodes[0]);\n\n      // Đảm bảo dữ liệu luôn là mảng\n      const finalNodes = Array.isArray(cleanedNodes) ? cleanedNodes : [];\n      const finalEdges = Array.isArray(cleanedEdges) ? cleanedEdges : [];\n\n      // Gọi callback để lưu dữ liệu đã được làm sạch\n      console.log(\"[VIEW] Calling onSave with:\", finalNodes.length, \"nodes and\", finalEdges.length, \"edges\");\n      onSave(finalNodes, finalEdges);\n    } catch (error) {\n      console.error(\"[VIEW] Error preparing data for save:\", error);\n      toast({\n        title: \"Lỗi khi chuẩn bị dữ liệu\",\n        description: \"Không thể chuẩn bị dữ liệu để lưu. Vui lòng thử lại.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [nodes, edges, onSave, toast, processEdgeConfig]);\n\n  // Now define handleCompleteToggle after saveChanges\n  const handleCompleteToggle = useCallback((nodeId, completed) => {\n    var _nodes$find;\n    if (readOnly) return;\n\n    // Get the current timestamp\n    const completedAt = completed ? new Date().toISOString() : null;\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            completed,\n            completedAt\n          }\n        };\n      }\n      return node;\n    }));\n    toast({\n      title: completed ? \"Course marked as completed\" : \"Course marked as incomplete\",\n      description: `You've ${completed ? \"completed\" : \"unmarked\"} ${(_nodes$find = nodes.find(n => n.id === nodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.label}`\n    });\n  }, [nodes, setNodes, toast, readOnly]);\n  const handleAddCourse = useCallback(courseData => {\n    saveCurrentState();\n    console.log(\"[ADD NODE] Adding new course node:\", courseData);\n\n    // Generate a unique node ID with timestamp for guaranteed uniqueness\n    const newNodeId = `node-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\n\n    // Simple positioning math to ensure nodes don't overlap\n    const nodeOffsets = [{\n      x: 0,\n      y: 0\n    }, {\n      x: 250,\n      y: 0\n    }, {\n      x: 0,\n      y: 150\n    }, {\n      x: 250,\n      y: 150\n    }, {\n      x: -250,\n      y: 0\n    }, {\n      x: -250,\n      y: 150\n    }];\n\n    // Base position starts at center if possible\n    let baseX = 0,\n      baseY = 0;\n    if (reactFlowInstance) {\n      const viewport = reactFlowInstance.getViewport();\n      const screenCenter = reactFlowInstance.screenToFlowPosition({\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      });\n      baseX = screenCenter.x;\n      baseY = screenCenter.y;\n    }\n\n    // Choose offset based on node count (cycle through positions)\n    const offset = nodeOffsets[nodes.length % nodeOffsets.length];\n\n    // Final position\n    const position = {\n      x: baseX + offset.x,\n      y: baseY + offset.y\n    };\n    console.log(`[ADD NODE] Creating new node at position: x=${position.x}, y=${position.y}`);\n\n    // Create the node with all required data\n    const newNode = {\n      id: newNodeId,\n      type: \"courseNode\",\n      position,\n      data: {\n        ...courseData,\n        id: newNodeId,\n        completed: false,\n        completedAt: null,\n        showQuickToggle: true,\n        onQuickToggle: handleCompleteToggle\n      }\n    };\n    console.log(\"[ADD NODE] New node created:\", newNode);\n\n    // Add node directly to state and tracking ref\n    setNodes(currentNodes => {\n      const updatedNodes = [...currentNodes, newNode];\n      console.log(\"[ADD NODE] Updated nodes state, new count:\", updatedNodes.length);\n      return updatedNodes;\n    });\n    addedNodesRef.current = [...addedNodesRef.current, newNode];\n    console.log(\"[ADD NODE] Added to tracking ref, new count:\", addedNodesRef.current.length);\n\n    // Close dialog and show confirmation\n    setIsAddCourseOpen(false);\n    toast({\n      title: \"Course added\",\n      description: `${courseData.label} has been added to the roadmap`\n    });\n\n    // Save changes immediately if we're in edit mode to prevent loss\n    if (isEditing && onSave) {\n      console.log(\"[ADD NODE] Auto-saving changes after adding node\");\n      setTimeout(() => {\n        saveChanges();\n      }, 500);\n    }\n\n    // Ensure newly added node is visible\n    setTimeout(() => {\n      if (reactFlowInstance) {\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: false,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        });\n      }\n    }, 100);\n  }, [setNodes, toast, reactFlowInstance, nodes.length, handleCompleteToggle, saveCurrentState, saveChanges, isEditing, onSave]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    // Skip effect if no initial data\n    if (!(initialNodes !== null && initialNodes !== void 0 && initialNodes.length) && !(initialEdges !== null && initialEdges !== void 0 && initialEdges.length)) {\n      return;\n    }\n\n    // Only run once during initial mount to avoid re-render cycles\n    if (isInitialMount.current) {\n      console.log(\"[FLOW] Initial setup with nodes:\", initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length);\n      if ((initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length) > 0) {\n        // Process nodes once with required properties for display\n        const processedNodes = initialNodes.map(node => {\n          var _node$data10;\n          return {\n            ...node,\n            type: \"courseNode\",\n            position: node.position || {\n              x: Math.random() * 500,\n              y: Math.random() * 300\n            },\n            data: {\n              ...node.data,\n              showQuickToggle: true,\n              onQuickToggle: handleCompleteToggle,\n              label: ((_node$data10 = node.data) === null || _node$data10 === void 0 ? void 0 : _node$data10.label) || \"Untitled Node\"\n            }\n          };\n        });\n\n        // Initialize with the processed nodes\n        setNodes(processedNodes);\n        // Store initial nodes in our ref for tracking\n        addedNodesRef.current = [...processedNodes];\n      }\n\n      // Process edges only after nodes are set\n      if ((initialEdges === null || initialEdges === void 0 ? void 0 : initialEdges.length) > 0) {\n        console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\n\n        // Create a map of node IDs for quick lookup\n        const nodeMap = new Map(initialNodes.map(node => [node.id, node]));\n\n        // Validate edges against existing nodes to ensure they connect to valid nodes\n        const validEdges = initialEdges.filter(edge => {\n          // Check that both source and target nodes exist\n          const sourceExists = nodeMap.has(edge.source);\n          const targetExists = nodeMap.has(edge.target);\n          if (!sourceExists || !targetExists) {\n            console.warn(`[FLOW] Skipping invalid edge: Source exists: ${sourceExists}, Target exists: ${targetExists}`, edge);\n            return false;\n          }\n          return true;\n        });\n\n        // Log the handle positions found in the data\n        console.log(\"[FLOW] Edge handle data:\", validEdges.map(edge => {\n          var _edge$data2, _edge$data3;\n          return {\n            id: edge.id,\n            sourceHandle: edge.sourceHandle || ((_edge$data2 = edge.data) === null || _edge$data2 === void 0 ? void 0 : _edge$data2.sourceHandle),\n            targetHandle: edge.targetHandle || ((_edge$data3 = edge.data) === null || _edge$data3 === void 0 ? void 0 : _edge$data3.targetHandle)\n          };\n        }));\n\n        // Process edges with additional data\n        const processedEdges = validEdges.map(edge => {\n          var _edge$data4, _edge$data5;\n          // Extract handle information from wherever it might be stored\n          const sourceHandle = edge.sourceHandle || ((_edge$data4 = edge.data) === null || _edge$data4 === void 0 ? void 0 : _edge$data4.sourceHandle) || null;\n          const targetHandle = edge.targetHandle || ((_edge$data5 = edge.data) === null || _edge$data5 === void 0 ? void 0 : _edge$data5.targetHandle) || null;\n\n          // Generate a consistent ID based on all connection points\n          const edgeId = edge.id || `edge-${edge.source}-${sourceHandle || \"default\"}-${edge.target}-${targetHandle || \"default\"}`;\n\n          // 创建基本边缘属性\n          const baseEdge = {\n            ...edge,\n            id: edgeId,\n            type: edge.type || \"smoothstep\",\n            animated: edge.animated !== undefined ? edge.animated : true,\n            style: edge.style || {\n              stroke: \"hsl(var(--muted-foreground))\"\n            },\n            sourceHandle: sourceHandle,\n            targetHandle: targetHandle,\n            className: `custom-edge source-${sourceHandle || \"default\"} target-${targetHandle || \"default\"}`\n          };\n\n          // 使用工具函数确保边缘配置一致性\n          return processEdgeConfig(baseEdge);\n        });\n        console.log(\"[FLOW] Processed edges:\", processedEdges.length);\n        setEdges(processedEdges);\n      }\n\n      // Mark as initialized to prevent future re-processing\n      isInitialMount.current = false;\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle, processEdgeConfig]);\n\n  // Update parent component with internal changes - optimized for fewer updates\n  useEffect(() => {\n    // Skip during initial render or if no update function provided\n    if (isInitialMount.current || !onInternalUpdate) return;\n\n    // Use a debounce to avoid too frequent updates\n    const timer = setTimeout(() => {\n      console.log(`[FLOW] Debounced parent update: ${nodes.length} nodes`);\n      onInternalUpdate(nodes, edges);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Simplify the node preservation effect\n  useEffect(() => {\n    if (addedNodesRef.current.length > 0 && nodes.length === 0) {\n      // Only restore if we've lost ALL nodes (prevents loops)\n      console.log(\"[FLOW] Lost all nodes, restoring from ref\");\n      setNodes(addedNodesRef.current);\n    }\n  }, [nodes.length, setNodes]);\n  const onNodeClick = useCallback((event, node) => {\n    event.stopPropagation();\n    if (editMode === \"delete\") {\n      // Delete mode: remove the node\n      saveCurrentState();\n      setNodes(nodes.filter(n => n.id !== node.id));\n      // Also remove any connected edges\n      setEdges(edges.filter(e => e.source !== node.id && e.target !== node.id));\n      toast({\n        title: \"Node deleted\",\n        description: `${node.data.label} has been removed from the roadmap`\n      });\n    } else if (editMode === \"connect\" && selectedNode) {\n      // Connect mode: create an edge between selectedNode and this node\n      if (selectedNode.id !== node.id) {\n        const newEdge = {\n          id: `edge-${Date.now()}`,\n          source: selectedNode.id,\n          target: node.id,\n          type: \"smoothstep\",\n          animated: true,\n          style: {\n            stroke: \"hsl(var(--muted-foreground))\"\n          },\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"hsl(var(--primary))\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        };\n        saveCurrentState();\n        setEdges(eds => [...eds, newEdge]);\n        setSelectedNode(null);\n        setEditMode(\"select\");\n        toast({\n          title: \"Connection created\",\n          description: `Connected ${selectedNode.data.label} to ${node.data.label}`\n        });\n      }\n    } else if (editMode === \"select\") {\n      // Regular select mode: show node details\n      setSelectedNode(node);\n    }\n  }, [editMode, selectedNode, nodes, edges, setNodes, setEdges, saveCurrentState, toast]);\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\"\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(node => {\n      var _node$data$category;\n      return ((_node$data$category = node.data.category) === null || _node$data$category === void 0 ? void 0 : _node$data$category.toLowerCase()) === selectedCategory.toLowerCase();\n    });\n  }, [nodes, selectedCategory]);\n  const handleStyleChange = useCallback(styles => {\n    // Apply styles to selected node or default edge options\n    if (selectedNode) {\n      handleCompleteToggle(selectedNode.id, styles.nodeStyle.completed);\n    }\n\n    // Update default edge options\n    // (would be implemented in a full version)\n  }, [selectedNode, handleCompleteToggle]);\n  const handleConnectionTypeChange = useCallback(type => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      // Instead of suppressing errors, let's implement a proper fix\n      let resizeObserverLoopErrCount = 0;\n      const debouncedResizeObserverCallback = debounce(() => {\n        resizeObserverLoopErrCount = 0;\n      }, 200);\n      const originalError = console.error;\n      console.error = (...args) => {\n        var _args$, _args$$includes, _args$2, _args$2$message, _args$2$message$inclu;\n        if ((_args$ = args[0]) !== null && _args$ !== void 0 && (_args$$includes = _args$.includes) !== null && _args$$includes !== void 0 && _args$$includes.call(_args$, \"ResizeObserver loop\") || (_args$2 = args[0]) !== null && _args$2 !== void 0 && (_args$2$message = _args$2.message) !== null && _args$2$message !== void 0 && (_args$2$message$inclu = _args$2$message.includes) !== null && _args$2$message$inclu !== void 0 && _args$2$message$inclu.call(_args$2$message, \"ResizeObserver loop\")) {\n          // Increment counter and invoke debounced callback\n          resizeObserverLoopErrCount += 1;\n          if (resizeObserverLoopErrCount <= 1) {\n            debouncedResizeObserverCallback();\n          }\n          // Suppress the error\n          return;\n        }\n        originalError.apply(console, args);\n      };\n      return () => {\n        console.error = originalError;\n      };\n    }\n\n    // Helper function for debounce\n    function debounce(fn, delay) {\n      let timeoutId;\n      return function () {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => fn.apply(this, arguments), delay);\n      };\n    }\n  }, []);\n\n  // Optimize edge rendering and enhance edge interaction\n  useEffect(() => {\n    // Configure ReactFlow for improved edge connection\n    const reactFlowEl = document.querySelector(\".react-flow\");\n    if (reactFlowEl) {\n      // Add custom class for better edge interaction\n      reactFlowEl.classList.add(\"improved-edge-connection\");\n    }\n    return () => {\n      if (reactFlowEl) {\n        reactFlowEl.classList.remove(\"improved-edge-connection\");\n      }\n    };\n  }, []);\n\n  // Ensure nodes are visible in the viewport\n  useEffect(() => {\n    if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\n      // Wait for rendering to complete, then fit view\n      const timeoutId = setTimeout(() => {\n        console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        });\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [nodes.length, reactFlowInstance]);\n\n  // Add a debug useEffect to log whenever nodes change\n  useEffect(() => {\n    if (nodes.length > 0) {\n      console.log(\"[FLOW] Nodes changed, current count:\", nodes.length);\n    }\n  }, [nodes]);\n\n  // Cleanup on unmount to prevent memory leaks\n  useEffect(() => {\n    return () => {\n      // Clear any timeouts that might be pending\n      const viewportEl = document.querySelector(\".react-flow__viewport\");\n      if (viewportEl) {\n        viewportEl.style.transitionProperty = \"\";\n        viewportEl.style.transitionDuration = \"\";\n      }\n      console.log(\"[FLOW] Component unmounting, performing cleanup\");\n    };\n  }, []);\n\n  // Add special effect to prevent excessive console logging during development\n  useEffect(() => {\n    if (process.env.NODE_ENV === \"development\") {\n      const originalConsoleLog = console.log;\n      const flowLogPattern = /^\\[FLOW\\]/;\n\n      // Filter out excessive flow logs in development\n      console.log = (...args) => {\n        if (typeof args[0] === \"string\" && flowLogPattern.test(args[0])) {\n          // Only log important flow messages or when explicitly debugging\n          if (args[0].includes(\"error\") || args[0].includes(\"Creating\") || args[0].includes(\"deleted\")) {\n            originalConsoleLog.apply(console, args);\n          }\n        } else {\n          originalConsoleLog.apply(console, args);\n        }\n      };\n      return () => {\n        console.log = originalConsoleLog;\n      };\n    }\n  }, []);\n\n  // Expose methods to parent component through ref\n  useImperativeHandle(ref, () => ({\n    saveChanges\n  }), [saveChanges]);\n  const onConnect = useCallback(params => {\n    if (readOnly) return false;\n    console.log(\"[CONNECT] Creating new connection:\", params);\n\n    // Save existing state for potential undo\n    saveCurrentState();\n\n    // Generate unique ID for edge\n    const newEdgeId = `edge-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\n\n    // 确定是否需要箭头\n    const needsArrow = connectionType === \"arrow\";\n\n    // 创建基本边缘\n    const baseEdge = {\n      ...params,\n      id: newEdgeId,\n      type: \"smoothstep\",\n      animated: false,\n      style: {\n        stroke: \"#6d28d9\",\n        strokeWidth: 2\n      },\n      data: {\n        connectionType: connectionType\n      }\n    };\n\n    // 使用工具函数处理边缘配置\n    const newEdge = processEdgeConfig(baseEdge);\n    console.log(\"[CONNECT] New edge created:\", newEdge);\n\n    // Add edge to state\n    setEdges(eds => {\n      const updatedEdges = addEdge(newEdge, eds);\n      console.log(\"[CONNECT] Updated edges, new count:\", updatedEdges.length);\n      return updatedEdges;\n    });\n\n    // Show confirmation\n    toast({\n      title: \"Connection created\",\n      description: \"A new connection has been added to the roadmap\"\n    });\n\n    // Save changes immediately if we're in edit mode to prevent loss\n    if (isEditing && onSave) {\n      console.log(\"[CONNECT] Auto-saving changes after adding edge\");\n      setTimeout(() => {\n        saveChanges();\n      }, 500);\n    }\n    return true;\n  }, [connectionType, readOnly, setEdges, saveCurrentState, toast, isEditing, onSave, saveChanges, processEdgeConfig]);\n  const handleDeleteNode = useCallback(nodeId => {\n    saveCurrentState();\n\n    // Remove the node from state\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n\n    // Remove the node from our tracking ref\n    addedNodesRef.current = addedNodesRef.current.filter(node => node.id !== nodeId);\n\n    // Remove connected edges\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n\n    // Clear selection\n    setSelectedNode(null);\n    toast({\n      title: \"Node deleted\",\n      description: \"The node has been removed from the roadmap\"\n    });\n\n    // Update view after deletion\n    setTimeout(() => {\n      if (reactFlowInstance) {\n        reactFlowInstance.fitView({\n          padding: 0.5\n        });\n      }\n    }, 100);\n  }, [setNodes, setEdges, toast, saveCurrentState, reactFlowInstance, setSelectedNode]);\n  const handleUpdateNodeStyle = useCallback((nodeId, style) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            ...style\n          }\n        };\n      }\n      return node;\n    }));\n  }, [setNodes]);\n  const onEdgeClick = useCallback((event, edge) => {\n    if (editMode === \"delete\") {\n      saveCurrentState();\n\n      // Delete the edge\n      setEdges(eds => eds.filter(e => e.id !== edge.id));\n      toast({\n        title: \"Connection removed\",\n        description: \"The connection between nodes has been removed\"\n      });\n    }\n  }, [setEdges, editMode, saveCurrentState, toast]);\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const previousState = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, currentState]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const nextState = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, currentState]);\n    setRedoStack(prev => prev.slice(0, -1));\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Debug for admin permissions\n  console.log(\"MainNav rendering with user:\", user);\n  console.log(\"User is admin?\", isAdmin);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    className: \"h-full w-full\",\n    children: [isEditing && showEditorPanel && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"right\",\n      className: \"w-72 mr-2\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapEditorPanel, {\n        onStyleChange: handleStyleChange,\n        onConnectionTypeChange: handleConnectionTypeChange,\n        activeEdgeStyle: connectionType,\n        editMode: editMode,\n        onEditModeChange: mode => {\n          setEditMode(mode);\n          if (mode === \"connect\") {\n            toast({\n              title: \"Connect mode\",\n              description: \"Click on a source node, then click on a target node to create a connection\"\n            });\n          } else if (mode === \"delete\") {\n            toast({\n              title: \"Delete mode\",\n              description: \"Click on a node or connection to delete it\"\n            });\n          }\n        },\n        onAddNodeClick: () => setIsAddCourseOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 999,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 998,\n      columnNumber: 11\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"top-right\",\n      className: \"bg-card p-3 rounded-sm border border-[hsl(var(--border))] shadow-md mb-4\" // Updated Panel classes, kept mr-[300px] for now\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2 justify-end\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          variant: \"outline\" // Changed to variant\n          ,\n          onClick: handleUndo,\n          disabled: undoStack.length === 0,\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            className: \"h-4 w-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1036,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          variant: \"outline\" // Changed to variant\n          ,\n          onClick: handleRedo,\n          disabled: redoStack.length === 0,\n          children: /*#__PURE__*/_jsxDEV(ArrowRight, {\n            className: \"h-4 w-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1044,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"default\" // Changed to variant\n          ,\n          size: \"sm\",\n          onClick: saveChanges,\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            className: \"h-4 w-4 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1051,\n            columnNumber: 17\n          }, this), \" Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1046,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: filteredNodes(),\n        edges: edges,\n        onNodesChange: isEditing ? onNodesChange : undefined,\n        onEdgesChange: isEditing ? onEdgesChange : undefined,\n        onConnect: isEditing ? onConnect : undefined,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        onPaneClick: onPaneClick,\n        nodeTypes: nodeTypes,\n        onNodeDragStop: onNodeDragStop,\n        nodesDraggable: isEditing,\n        nodesConnectable: isEditing && editMode === \"connect\",\n        elementsSelectable: !readOnly,\n        defaultEdgeOptions: getDefaultEdgeOptions(),\n        fitView: true,\n        fitViewOptions: {\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        },\n        minZoom: 0.2,\n        maxZoom: 4,\n        snapToGrid: true,\n        snapGrid: [10, 10],\n        nodeExtent: [[-2000, -2000], [2000, 2000]],\n        proOptions: {\n          hideAttribution: true\n        },\n        disableKeyboardA11y: true,\n        autoPanOnNodeDrag: false,\n        elevateEdgesOnSelect: false,\n        onInit: instance => {\n          // Use setTimeout to ensure proper initialization\n          setTimeout(() => {\n            if (nodes.length > 0) {\n              instance.fitView({\n                padding: 0.5\n              });\n              console.log(\"[FLOW] Flow initialized with nodes:\", nodes.length);\n            }\n          }, 300);\n        }\n        // Add custom edge rendering to set data attributes based on handle positions\n        ,\n        edgeUpdaterRadius: 10,\n        edgesUpdatable: true,\n        edgesFocusable: true,\n        onEdgeUpdate: (oldEdge, newConnection) => {\n          setEdges(els => els.map(edge => {\n            if (edge.id === oldEdge.id) {\n              // Generate new ID based on new connection points\n              const newId = `edge-${newConnection.source}-${newConnection.sourceHandle || \"default\"}-${newConnection.target}-${newConnection.targetHandle || \"default\"}`;\n              return {\n                ...edge,\n                id: newId,\n                source: newConnection.source,\n                target: newConnection.target,\n                sourceHandle: newConnection.sourceHandle,\n                targetHandle: newConnection.targetHandle,\n                data: {\n                  ...edge.data,\n                  sourceId: newConnection.source,\n                  targetId: newConnection.target,\n                  sourceHandle: newConnection.sourceHandle,\n                  targetHandle: newConnection.targetHandle,\n                  sourceHandleType: newConnection.sourceHandle || \"default\",\n                  targetHandleType: newConnection.targetHandle || \"default\"\n                }\n              };\n            }\n            return edge;\n          }));\n          return true;\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n          nodeStrokeWidth: 3,\n          zoomable: true,\n          pannable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 12,\n          size: 1,\n          color: \"hsl(var(--border))\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1147,\n          columnNumber: 13\n        }, this), \" \", edges.map(edge => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-edgeid\": edge.id,\n            \"data-sourcehandle\": edge.sourceHandle || \"default\",\n            \"data-targethandle\": edge.targetHandle || \"default\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1157,\n            columnNumber: 17\n          }, this)\n        }, `handle-${edge.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1156,\n          columnNumber: 15\n        }, this))]\n      }, `flow-${id}-${nodes.length}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 9\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(CourseInfoPanel, {\n      node: selectedNode,\n      onClose: () => setSelectedNode(null),\n      onCompleteToggle: handleCompleteToggle,\n      onDelete: isEditing ? handleDeleteNode : undefined,\n      onUpdateStyle: handleUpdateNodeStyle,\n      isAdmin: isEditing,\n      readOnly: readOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1168,\n      columnNumber: 11\n    }, this), isAddCourseOpen && /*#__PURE__*/_jsxDEV(AddCourseDialog, {\n      open: isAddCourseOpen,\n      onClose: () => setIsAddCourseOpen(false),\n      onAdd: handleAddCourse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1180,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 996,\n    columnNumber: 7\n  }, this);\n}, \"UoKUfC5I9EzRlTqf6qNHVZ5m9yk=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow, useAuth];\n})), \"UoKUfC5I9EzRlTqf6qNHVZ5m9yk=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow, useAuth];\n});\n_c2 = RoadmapViewInner;\nconst RoadmapView = /*#__PURE__*/forwardRef(_c3 = (props, ref) => {\n  var _props$initialNodes, _props$initialEdges;\n  console.log(\"[FLOW] RoadmapView wrapper rendering with props:\", {\n    id: props.id,\n    nodesCount: (_props$initialNodes = props.initialNodes) === null || _props$initialNodes === void 0 ? void 0 : _props$initialNodes.length,\n    edgesCount: (_props$initialEdges = props.initialEdges) === null || _props$initialEdges === void 0 ? void 0 : _props$initialEdges.length\n  });\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapViewInner, {\n        ref: ref,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1200,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1199,\n    columnNumber: 5\n  }, this);\n});\n_c4 = RoadmapView;\nexport default RoadmapView;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"RoadmapViewInner$forwardRef\");\n$RefreshReg$(_c2, \"RoadmapViewInner\");\n$RefreshReg$(_c3, \"RoadmapView$forwardRef\");\n$RefreshReg$(_c4, \"RoadmapView\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useCallback","useEffect","useRef","forwardRef","useImperativeHandle","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","Palette","ArrowLeft","ArrowRight","CourseNode","CourseInfoPanel","AddCourseDialog","RoadmapEditorPanel","useAuth","jsxDEV","_jsxDEV","nodeTypes","courseNode","processEdgeConfigUtil","edge","_edge$data","connectionType","data","needsArrow","markerEnd","type","ArrowClosed","width","height","color","undefined","sourceId","source","targetId","target","sourceHandle","targetHandle","RoadmapViewInner","_c","id","initialNodes","initialEdges","isEditing","readOnly","onSave","onInternalUpdate","ref","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","setConnectionType","showEditorPanel","setShowEditorPanel","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","isInitialMount","addedNodesRef","user","devMode","login","logout","isAuthenticated","isAdmin","isSidebarOpen","setIsSidebarOpen","processEdgeConfig","saveCurrentState","prev","getDefaultEdgeOptions","style","stroke","animated","saveChanges","console","log","length","cleanedNodes","map","node","_node$position","_node$position2","_node$data","_node$data2","_node$data3","_node$data4","_node$data5","_node$data6","_node$data7","_node$data8","_node$data9","_node$data0","_node$data1","position","x","y","label","code","description","completed","completedAt","documents","courseId","nodeColor","nodeBgColor","textColor","fontSize","nodeIdMap","Set","validEdges","filter","warn","cleanedEdges","sourceExists","has","targetExists","Array","isArray","finalNodes","finalEdges","error","title","variant","handleCompleteToggle","nodeId","_nodes$find","Date","toISOString","nds","find","n","handleAddCourse","courseData","newNodeId","now","Math","floor","random","nodeOffsets","baseX","baseY","viewport","getViewport","screenCenter","screenToFlowPosition","window","innerWidth","innerHeight","offset","newNode","showQuickToggle","onQuickToggle","currentNodes","updatedNodes","current","setTimeout","fitView","padding","includeHiddenNodes","minZoom","maxZoom","processedNodes","_node$data10","nodeMap","Map","_edge$data2","_edge$data3","processedEdges","_edge$data4","_edge$data5","edgeId","baseEdge","className","timer","clearTimeout","onNodeClick","event","stopPropagation","e","newEdge","eds","onPaneClick","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","handleStyleChange","styles","nodeStyle","handleConnectionTypeChange","process","env","NODE_ENV","resizeObserverLoopErrCount","debouncedResizeObserverCallback","debounce","originalError","args","_args$","_args$$includes","_args$2","_args$2$message","_args$2$message$inclu","includes","call","message","apply","fn","delay","timeoutId","arguments","reactFlowEl","document","querySelector","classList","add","remove","viewportEl","transitionProperty","transitionDuration","originalConsoleLog","flowLogPattern","test","onConnect","params","newEdgeId","strokeWidth","updatedEdges","handleDeleteNode","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","children","onStyleChange","onConnectionTypeChange","activeEdgeStyle","onEditModeChange","mode","onAddNodeClick","fileName","lineNumber","columnNumber","size","onClick","disabled","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitViewOptions","snapToGrid","snapGrid","nodeExtent","proOptions","hideAttribution","disableKeyboardA11y","autoPanOnNodeDrag","elevateEdgesOnSelect","onInit","instance","edgeUpdaterRadius","edgesUpdatable","edgesFocusable","onEdgeUpdate","oldEdge","newConnection","els","newId","sourceHandleType","targetHandleType","nodeStrokeWidth","zoomable","pannable","gap","display","onClose","onCompleteToggle","onDelete","onUpdateStyle","open","onAdd","_c2","RoadmapView","_c3","props","_props$initialNodes","_props$initialEdges","nodesCount","edgesCount","_c4","$RefreshReg$"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport ReactFlow, {\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n  Panel,\r\n  ReactFlowProvider,\r\n  useReactFlow,\r\n  MarkerType,\r\n  Connection,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\r\nimport { Button } from \"./ui/button\";\r\nimport { useToast } from \"./ui/use-toast\";\r\nimport {\r\n  PlusCircle,\r\n  Save,\r\n  Trash,\r\n  Plus,\r\n  X,\r\n  Link as LinkIcon,\r\n  LinkOff,\r\n  Palette,\r\n  ArrowLeft,\r\n  ArrowRight,\r\n} from \"lucide-react\";\r\nimport CourseNode from \"./CourseNode\";\r\nimport CourseInfoPanel from \"./CourseInfoPanel\";\r\nimport AddCourseDialog from \"./AddCourseDialog\";\r\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\n\r\nconst nodeTypes = {\r\n  courseNode: CourseNode,\r\n};\r\n\r\n// 边缘处理工具函数 - 定义在组件外部，避免重渲染\r\nconst processEdgeConfigUtil = (edge) => {\r\n  const connectionType = edge.data?.connectionType || \"arrow\";\r\n  const needsArrow = connectionType === \"arrow\";\r\n\r\n  return {\r\n    ...edge,\r\n    // 确保保留现有的markerEnd配置或创建新的\r\n    markerEnd:\r\n      edge.markerEnd ||\r\n      (needsArrow\r\n        ? {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: \"hsl(var(--primary))\",\r\n          }\r\n        : undefined),\r\n    data: {\r\n      ...(edge.data || {}),\r\n      connectionType,\r\n      // 确保存储源和目标信息\r\n      sourceId: edge.source,\r\n      targetId: edge.target,\r\n      sourceHandle: edge.sourceHandle || null,\r\n      targetHandle: edge.targetHandle || null,\r\n    },\r\n  };\r\n};\r\n\r\nconst RoadmapViewInner = forwardRef(\r\n  (\r\n    {\r\n      id,\r\n      initialNodes = [],\r\n      initialEdges = [],\r\n      isEditing = false,\r\n      readOnly = false,\r\n      onSave,\r\n      onInternalUpdate,\r\n    },\r\n    ref\r\n  ) => {\r\n    const { toast } = useToast();\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n    const [selectedCategory, setSelectedCategory] = useState(\"all\");\r\n    const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\r\n    const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\r\n    const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\r\n    const [showEditorPanel, setShowEditorPanel] = useState(true);\r\n    const reactFlowWrapper = useRef(null);\r\n    const reactFlowInstance = useReactFlow();\r\n    const [undoStack, setUndoStack] = useState([]);\r\n    const [redoStack, setRedoStack] = useState([]);\r\n    const isInitialMount = useRef(true);\r\n    // Keep track of manually added nodes to prevent them from being lost\r\n    const addedNodesRef = useRef([]);\r\n    const { user, devMode, login, logout, isAuthenticated, isAdmin } =\r\n      useAuth();\r\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n    // 工具函数：处理边缘连接配置 (组件内部版本，使用外部工具函数)\r\n    const processEdgeConfig = useCallback((edge) => {\r\n      return processEdgeConfigUtil(edge);\r\n    }, []);\r\n\r\n    // Save current state for undo feature\r\n    const saveCurrentState = useCallback(() => {\r\n      setUndoStack((prev) => [\r\n        ...prev,\r\n        { nodes: [...nodes], edges: [...edges] },\r\n      ]);\r\n      setRedoStack([]);\r\n    }, [nodes, edges]);\r\n\r\n    // 获取当前的默认边缘配置\r\n    const getDefaultEdgeOptions = useCallback(() => {\r\n      return {\r\n        type: \"smoothstep\",\r\n        style: { stroke: \"hsl(var(--muted-foreground))\" },\r\n        animated: false,\r\n        ...(connectionType === \"arrow\" && {\r\n          markerEnd: {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: \"hsl(var(--primary))\",\r\n          },\r\n        }),\r\n        data: {\r\n          connectionType,\r\n        },\r\n      };\r\n    }, [connectionType]);\r\n\r\n    // Define Save changes AFTER processEdgeConfig is defined\r\n    const saveChanges = useCallback(() => {\r\n      if (!onSave) return;\r\n\r\n      try {\r\n        console.log(\"[VIEW] Preparing to save changes\");\r\n        console.log(\"[VIEW] Current nodes count:\", nodes.length);\r\n        console.log(\"[VIEW] Current edges count:\", edges.length);\r\n\r\n        // Ensure all nodes have required properties\r\n        const cleanedNodes = nodes.map((node) => {\r\n          // Create a clean copy of the node without React references\r\n          return {\r\n            id: node.id,\r\n            type: node.type || \"courseNode\",\r\n            position: {\r\n              x: node.position?.x || 0,\r\n              y: node.position?.y || 0,\r\n            },\r\n            // Extract only the data we need from node.data\r\n            data: {\r\n              label: node.data?.label || \"\",\r\n              id: node.id,\r\n              code: node.data?.code || \"\",\r\n              description: node.data?.description || \"\",\r\n              completed: node.data?.completed || false,\r\n              completedAt: node.data?.completedAt || null,\r\n              documents: node.data?.documents || [],\r\n              courseId: node.data?.courseId,\r\n              nodeColor: node.data?.nodeColor,\r\n              nodeBgColor: node.data?.nodeBgColor,\r\n              textColor: node.data?.textColor,\r\n              fontSize: node.data?.fontSize,\r\n            },\r\n          };\r\n        });\r\n\r\n        // Remove any invalid edges\r\n        const nodeIdMap = new Set(cleanedNodes.map((node) => node.id));\r\n\r\n        // Lọc bỏ các edges không hợp lệ\r\n        const validEdges = edges.filter((edge) => {\r\n          if (!edge || !edge.id || !edge.source || !edge.target) {\r\n            console.warn(\r\n              \"[VIEW] Skipping invalid edge missing id/source/target\"\r\n            );\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n\r\n        // Clean edges - make sure they connect to existing nodes\r\n        const cleanedEdges = validEdges\r\n          .filter((edge) => {\r\n            // Check if source and target nodes exist\r\n            const sourceExists = nodeIdMap.has(edge.source);\r\n            const targetExists = nodeIdMap.has(edge.target);\r\n\r\n            if (!sourceExists || !targetExists) {\r\n              console.warn(\r\n                `[VIEW] Removing invalid edge - Source exists: ${sourceExists}, Target exists: ${targetExists}`,\r\n                edge\r\n              );\r\n              return false;\r\n            }\r\n            return true;\r\n          })\r\n          .map((edge) => {\r\n            // 使用工具函数确保边缘数据的一致性\r\n            return processEdgeConfig(edge);\r\n          });\r\n\r\n        console.log(\"[VIEW] Cleaned nodes count:\", cleanedNodes.length);\r\n        console.log(\"[VIEW] Cleaned edges count:\", cleanedEdges.length);\r\n\r\n        // Debug: kiểm tra kiểu dữ liệu trước khi gọi callback\r\n        console.log(\r\n          \"[VIEW] Cleaned nodes type:\",\r\n          Array.isArray(cleanedNodes) ? \"Array\" : typeof cleanedNodes\r\n        );\r\n        console.log(\r\n          \"[VIEW] Cleaned edges type:\",\r\n          Array.isArray(cleanedEdges) ? \"Array\" : typeof cleanedEdges\r\n        );\r\n        console.log(\"[VIEW] First node in cleaned array:\", cleanedNodes[0]);\r\n\r\n        // Đảm bảo dữ liệu luôn là mảng\r\n        const finalNodes = Array.isArray(cleanedNodes) ? cleanedNodes : [];\r\n        const finalEdges = Array.isArray(cleanedEdges) ? cleanedEdges : [];\r\n\r\n        // Gọi callback để lưu dữ liệu đã được làm sạch\r\n        console.log(\r\n          \"[VIEW] Calling onSave with:\",\r\n          finalNodes.length,\r\n          \"nodes and\",\r\n          finalEdges.length,\r\n          \"edges\"\r\n        );\r\n        onSave(finalNodes, finalEdges);\r\n      } catch (error) {\r\n        console.error(\"[VIEW] Error preparing data for save:\", error);\r\n        toast({\r\n          title: \"Lỗi khi chuẩn bị dữ liệu\",\r\n          description: \"Không thể chuẩn bị dữ liệu để lưu. Vui lòng thử lại.\",\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n    }, [nodes, edges, onSave, toast, processEdgeConfig]);\r\n\r\n    // Now define handleCompleteToggle after saveChanges\r\n    const handleCompleteToggle = useCallback(\r\n      (nodeId, completed) => {\r\n        if (readOnly) return;\r\n\r\n        // Get the current timestamp\r\n        const completedAt = completed ? new Date().toISOString() : null;\r\n\r\n        setNodes((nds) =>\r\n          nds.map((node) => {\r\n            if (node.id === nodeId) {\r\n              return {\r\n                ...node,\r\n                data: {\r\n                  ...node.data,\r\n                  completed,\r\n                  completedAt,\r\n                },\r\n              };\r\n            }\r\n            return node;\r\n          })\r\n        );\r\n\r\n        toast({\r\n          title: completed\r\n            ? \"Course marked as completed\"\r\n            : \"Course marked as incomplete\",\r\n          description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\r\n            nodes.find((n) => n.id === nodeId)?.data.label\r\n          }`,\r\n        });\r\n      },\r\n      [nodes, setNodes, toast, readOnly]\r\n    );\r\n\r\n    const handleAddCourse = useCallback(\r\n      (courseData) => {\r\n        saveCurrentState();\r\n\r\n        console.log(\"[ADD NODE] Adding new course node:\", courseData);\r\n\r\n        // Generate a unique node ID with timestamp for guaranteed uniqueness\r\n        const newNodeId = `node-${Date.now()}-${Math.floor(\r\n          Math.random() * 1000000\r\n        )}`;\r\n\r\n        // Simple positioning math to ensure nodes don't overlap\r\n        const nodeOffsets = [\r\n          { x: 0, y: 0 },\r\n          { x: 250, y: 0 },\r\n          { x: 0, y: 150 },\r\n          { x: 250, y: 150 },\r\n          { x: -250, y: 0 },\r\n          { x: -250, y: 150 },\r\n        ];\r\n\r\n        // Base position starts at center if possible\r\n        let baseX = 0,\r\n          baseY = 0;\r\n\r\n        if (reactFlowInstance) {\r\n          const viewport = reactFlowInstance.getViewport();\r\n          const screenCenter = reactFlowInstance.screenToFlowPosition({\r\n            x: window.innerWidth / 2,\r\n            y: window.innerHeight / 2,\r\n          });\r\n          baseX = screenCenter.x;\r\n          baseY = screenCenter.y;\r\n        }\r\n\r\n        // Choose offset based on node count (cycle through positions)\r\n        const offset = nodeOffsets[nodes.length % nodeOffsets.length];\r\n\r\n        // Final position\r\n        const position = {\r\n          x: baseX + offset.x,\r\n          y: baseY + offset.y,\r\n        };\r\n\r\n        console.log(\r\n          `[ADD NODE] Creating new node at position: x=${position.x}, y=${position.y}`\r\n        );\r\n\r\n        // Create the node with all required data\r\n        const newNode = {\r\n          id: newNodeId,\r\n          type: \"courseNode\",\r\n          position,\r\n          data: {\r\n            ...courseData,\r\n            id: newNodeId,\r\n            completed: false,\r\n            completedAt: null,\r\n            showQuickToggle: true,\r\n            onQuickToggle: handleCompleteToggle,\r\n          },\r\n        };\r\n\r\n        console.log(\"[ADD NODE] New node created:\", newNode);\r\n\r\n        // Add node directly to state and tracking ref\r\n        setNodes((currentNodes) => {\r\n          const updatedNodes = [...currentNodes, newNode];\r\n          console.log(\r\n            \"[ADD NODE] Updated nodes state, new count:\",\r\n            updatedNodes.length\r\n          );\r\n          return updatedNodes;\r\n        });\r\n\r\n        addedNodesRef.current = [...addedNodesRef.current, newNode];\r\n        console.log(\r\n          \"[ADD NODE] Added to tracking ref, new count:\",\r\n          addedNodesRef.current.length\r\n        );\r\n\r\n        // Close dialog and show confirmation\r\n        setIsAddCourseOpen(false);\r\n        toast({\r\n          title: \"Course added\",\r\n          description: `${courseData.label} has been added to the roadmap`,\r\n        });\r\n\r\n        // Save changes immediately if we're in edit mode to prevent loss\r\n        if (isEditing && onSave) {\r\n          console.log(\"[ADD NODE] Auto-saving changes after adding node\");\r\n          setTimeout(() => {\r\n            saveChanges();\r\n          }, 500);\r\n        }\r\n\r\n        // Ensure newly added node is visible\r\n        setTimeout(() => {\r\n          if (reactFlowInstance) {\r\n            reactFlowInstance.fitView({\r\n              padding: 0.5,\r\n              includeHiddenNodes: false,\r\n              minZoom: 0.5,\r\n              maxZoom: 1.5,\r\n            });\r\n          }\r\n        }, 100);\r\n      },\r\n      [\r\n        setNodes,\r\n        toast,\r\n        reactFlowInstance,\r\n        nodes.length,\r\n        handleCompleteToggle,\r\n        saveCurrentState,\r\n        saveChanges,\r\n        isEditing,\r\n        onSave,\r\n      ]\r\n    );\r\n\r\n    // Set initial nodes and edges when they change\r\n    useEffect(() => {\r\n      // Skip effect if no initial data\r\n      if (!initialNodes?.length && !initialEdges?.length) {\r\n        return;\r\n      }\r\n\r\n      // Only run once during initial mount to avoid re-render cycles\r\n      if (isInitialMount.current) {\r\n        console.log(\"[FLOW] Initial setup with nodes:\", initialNodes?.length);\r\n\r\n        if (initialNodes?.length > 0) {\r\n          // Process nodes once with required properties for display\r\n          const processedNodes = initialNodes.map((node) => ({\r\n            ...node,\r\n            type: \"courseNode\",\r\n            position: node.position || {\r\n              x: Math.random() * 500,\r\n              y: Math.random() * 300,\r\n            },\r\n            data: {\r\n              ...node.data,\r\n              showQuickToggle: true,\r\n              onQuickToggle: handleCompleteToggle,\r\n              label: node.data?.label || \"Untitled Node\",\r\n            },\r\n          }));\r\n\r\n          // Initialize with the processed nodes\r\n          setNodes(processedNodes);\r\n          // Store initial nodes in our ref for tracking\r\n          addedNodesRef.current = [...processedNodes];\r\n        }\r\n\r\n        // Process edges only after nodes are set\r\n        if (initialEdges?.length > 0) {\r\n          console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\r\n\r\n          // Create a map of node IDs for quick lookup\r\n          const nodeMap = new Map(initialNodes.map((node) => [node.id, node]));\r\n\r\n          // Validate edges against existing nodes to ensure they connect to valid nodes\r\n          const validEdges = initialEdges.filter((edge) => {\r\n            // Check that both source and target nodes exist\r\n            const sourceExists = nodeMap.has(edge.source);\r\n            const targetExists = nodeMap.has(edge.target);\r\n\r\n            if (!sourceExists || !targetExists) {\r\n              console.warn(\r\n                `[FLOW] Skipping invalid edge: Source exists: ${sourceExists}, Target exists: ${targetExists}`,\r\n                edge\r\n              );\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n\r\n          // Log the handle positions found in the data\r\n          console.log(\r\n            \"[FLOW] Edge handle data:\",\r\n            validEdges.map((edge) => ({\r\n              id: edge.id,\r\n              sourceHandle: edge.sourceHandle || edge.data?.sourceHandle,\r\n              targetHandle: edge.targetHandle || edge.data?.targetHandle,\r\n            }))\r\n          );\r\n\r\n          // Process edges with additional data\r\n          const processedEdges = validEdges.map((edge) => {\r\n            // Extract handle information from wherever it might be stored\r\n            const sourceHandle =\r\n              edge.sourceHandle || edge.data?.sourceHandle || null;\r\n            const targetHandle =\r\n              edge.targetHandle || edge.data?.targetHandle || null;\r\n\r\n            // Generate a consistent ID based on all connection points\r\n            const edgeId =\r\n              edge.id ||\r\n              `edge-${edge.source}-${sourceHandle || \"default\"}-${\r\n                edge.target\r\n              }-${targetHandle || \"default\"}`;\r\n\r\n            // 创建基本边缘属性\r\n            const baseEdge = {\r\n              ...edge,\r\n              id: edgeId,\r\n              type: edge.type || \"smoothstep\",\r\n              animated: edge.animated !== undefined ? edge.animated : true,\r\n              style: edge.style || { stroke: \"hsl(var(--muted-foreground))\" },\r\n              sourceHandle: sourceHandle,\r\n              targetHandle: targetHandle,\r\n              className: `custom-edge source-${\r\n                sourceHandle || \"default\"\r\n              } target-${targetHandle || \"default\"}`,\r\n            };\r\n\r\n            // 使用工具函数确保边缘配置一致性\r\n            return processEdgeConfig(baseEdge);\r\n          });\r\n\r\n          console.log(\"[FLOW] Processed edges:\", processedEdges.length);\r\n          setEdges(processedEdges);\r\n        }\r\n\r\n        // Mark as initialized to prevent future re-processing\r\n        isInitialMount.current = false;\r\n      }\r\n    }, [\r\n      initialNodes,\r\n      initialEdges,\r\n      setNodes,\r\n      setEdges,\r\n      handleCompleteToggle,\r\n      processEdgeConfig,\r\n    ]);\r\n\r\n    // Update parent component with internal changes - optimized for fewer updates\r\n    useEffect(() => {\r\n      // Skip during initial render or if no update function provided\r\n      if (isInitialMount.current || !onInternalUpdate) return;\r\n\r\n      // Use a debounce to avoid too frequent updates\r\n      const timer = setTimeout(() => {\r\n        console.log(`[FLOW] Debounced parent update: ${nodes.length} nodes`);\r\n        onInternalUpdate(nodes, edges);\r\n      }, 500);\r\n\r\n      return () => clearTimeout(timer);\r\n    }, [nodes, edges, onInternalUpdate]);\r\n\r\n    // Simplify the node preservation effect\r\n    useEffect(() => {\r\n      if (addedNodesRef.current.length > 0 && nodes.length === 0) {\r\n        // Only restore if we've lost ALL nodes (prevents loops)\r\n        console.log(\"[FLOW] Lost all nodes, restoring from ref\");\r\n        setNodes(addedNodesRef.current);\r\n      }\r\n    }, [nodes.length, setNodes]);\r\n\r\n    const onNodeClick = useCallback(\r\n      (event, node) => {\r\n        event.stopPropagation();\r\n\r\n        if (editMode === \"delete\") {\r\n          // Delete mode: remove the node\r\n          saveCurrentState();\r\n          setNodes(nodes.filter((n) => n.id !== node.id));\r\n          // Also remove any connected edges\r\n          setEdges(\r\n            edges.filter((e) => e.source !== node.id && e.target !== node.id)\r\n          );\r\n\r\n          toast({\r\n            title: \"Node deleted\",\r\n            description: `${node.data.label} has been removed from the roadmap`,\r\n          });\r\n        } else if (editMode === \"connect\" && selectedNode) {\r\n          // Connect mode: create an edge between selectedNode and this node\r\n          if (selectedNode.id !== node.id) {\r\n            const newEdge = {\r\n              id: `edge-${Date.now()}`,\r\n              source: selectedNode.id,\r\n              target: node.id,\r\n              type: \"smoothstep\",\r\n              animated: true,\r\n              style: { stroke: \"hsl(var(--muted-foreground))\" },\r\n              ...(connectionType === \"arrow\" && {\r\n                markerEnd: {\r\n                  type: MarkerType.ArrowClosed,\r\n                  width: 20,\r\n                  height: 20,\r\n                  color: \"hsl(var(--primary))\",\r\n                },\r\n              }),\r\n              data: {\r\n                connectionType,\r\n              },\r\n            };\r\n\r\n            saveCurrentState();\r\n            setEdges((eds) => [...eds, newEdge]);\r\n            setSelectedNode(null);\r\n            setEditMode(\"select\");\r\n\r\n            toast({\r\n              title: \"Connection created\",\r\n              description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\r\n            });\r\n          }\r\n        } else if (editMode === \"select\") {\r\n          // Regular select mode: show node details\r\n          setSelectedNode(node);\r\n        }\r\n      },\r\n      [\r\n        editMode,\r\n        selectedNode,\r\n        nodes,\r\n        edges,\r\n        setNodes,\r\n        setEdges,\r\n        saveCurrentState,\r\n        toast,\r\n      ]\r\n    );\r\n\r\n    const onPaneClick = useCallback(() => {\r\n      // In regular mode, clicking the pane should deselect the node\r\n      setSelectedNode(null);\r\n\r\n      // If in connect mode but no node selected, return to select mode\r\n      if (editMode === \"connect\" && selectedNode) {\r\n        setEditMode(\"select\");\r\n        setSelectedNode(null);\r\n        toast({\r\n          title: \"Connection cancelled\",\r\n          description: \"Node connection has been cancelled\",\r\n        });\r\n      }\r\n    }, [editMode, selectedNode, toast]);\r\n\r\n    // Update node positions when they are dragged\r\n    const onNodeDragStop = useCallback(() => {\r\n      if (isEditing) {\r\n        saveCurrentState();\r\n      }\r\n    }, [isEditing, saveCurrentState]);\r\n\r\n    // Handle category filtering\r\n    const filteredNodes = useCallback(() => {\r\n      if (selectedCategory === \"all\") {\r\n        return nodes;\r\n      }\r\n      return nodes.filter(\r\n        (node) =>\r\n          node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\r\n      );\r\n    }, [nodes, selectedCategory]);\r\n\r\n    const handleStyleChange = useCallback(\r\n      (styles) => {\r\n        // Apply styles to selected node or default edge options\r\n        if (selectedNode) {\r\n          handleCompleteToggle(selectedNode.id, styles.nodeStyle.completed);\r\n        }\r\n\r\n        // Update default edge options\r\n        // (would be implemented in a full version)\r\n      },\r\n      [selectedNode, handleCompleteToggle]\r\n    );\r\n\r\n    const handleConnectionTypeChange = useCallback((type) => {\r\n      setConnectionType(type);\r\n    }, []);\r\n\r\n    // Ngăn chặn cảnh báo ResizeObserver\r\n    useEffect(() => {\r\n      // Chỉ áp dụng trong môi trường phát triển\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        // Instead of suppressing errors, let's implement a proper fix\r\n        let resizeObserverLoopErrCount = 0;\r\n        const debouncedResizeObserverCallback = debounce(() => {\r\n          resizeObserverLoopErrCount = 0;\r\n        }, 200);\r\n\r\n        const originalError = console.error;\r\n        console.error = (...args) => {\r\n          if (\r\n            args[0]?.includes?.(\"ResizeObserver loop\") ||\r\n            args[0]?.message?.includes?.(\"ResizeObserver loop\")\r\n          ) {\r\n            // Increment counter and invoke debounced callback\r\n            resizeObserverLoopErrCount += 1;\r\n            if (resizeObserverLoopErrCount <= 1) {\r\n              debouncedResizeObserverCallback();\r\n            }\r\n            // Suppress the error\r\n            return;\r\n          }\r\n          originalError.apply(console, args);\r\n        };\r\n\r\n        return () => {\r\n          console.error = originalError;\r\n        };\r\n      }\r\n\r\n      // Helper function for debounce\r\n      function debounce(fn, delay) {\r\n        let timeoutId;\r\n        return function () {\r\n          clearTimeout(timeoutId);\r\n          timeoutId = setTimeout(() => fn.apply(this, arguments), delay);\r\n        };\r\n      }\r\n    }, []);\r\n\r\n    // Optimize edge rendering and enhance edge interaction\r\n    useEffect(() => {\r\n      // Configure ReactFlow for improved edge connection\r\n      const reactFlowEl = document.querySelector(\".react-flow\");\r\n      if (reactFlowEl) {\r\n        // Add custom class for better edge interaction\r\n        reactFlowEl.classList.add(\"improved-edge-connection\");\r\n      }\r\n\r\n      return () => {\r\n        if (reactFlowEl) {\r\n          reactFlowEl.classList.remove(\"improved-edge-connection\");\r\n        }\r\n      };\r\n    }, []);\r\n\r\n    // Ensure nodes are visible in the viewport\r\n    useEffect(() => {\r\n      if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\r\n        // Wait for rendering to complete, then fit view\r\n        const timeoutId = setTimeout(() => {\r\n          console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\r\n          reactFlowInstance.fitView({\r\n            padding: 0.5,\r\n            includeHiddenNodes: true,\r\n            minZoom: 0.5,\r\n            maxZoom: 1.5,\r\n          });\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeoutId);\r\n      }\r\n    }, [nodes.length, reactFlowInstance]);\r\n\r\n    // Add a debug useEffect to log whenever nodes change\r\n    useEffect(() => {\r\n      if (nodes.length > 0) {\r\n        console.log(\"[FLOW] Nodes changed, current count:\", nodes.length);\r\n      }\r\n    }, [nodes]);\r\n\r\n    // Cleanup on unmount to prevent memory leaks\r\n    useEffect(() => {\r\n      return () => {\r\n        // Clear any timeouts that might be pending\r\n        const viewportEl = document.querySelector(\".react-flow__viewport\");\r\n        if (viewportEl) {\r\n          viewportEl.style.transitionProperty = \"\";\r\n          viewportEl.style.transitionDuration = \"\";\r\n        }\r\n\r\n        console.log(\"[FLOW] Component unmounting, performing cleanup\");\r\n      };\r\n    }, []);\r\n\r\n    // Add special effect to prevent excessive console logging during development\r\n    useEffect(() => {\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        const originalConsoleLog = console.log;\r\n        const flowLogPattern = /^\\[FLOW\\]/;\r\n\r\n        // Filter out excessive flow logs in development\r\n        console.log = (...args) => {\r\n          if (typeof args[0] === \"string\" && flowLogPattern.test(args[0])) {\r\n            // Only log important flow messages or when explicitly debugging\r\n            if (\r\n              args[0].includes(\"error\") ||\r\n              args[0].includes(\"Creating\") ||\r\n              args[0].includes(\"deleted\")\r\n            ) {\r\n              originalConsoleLog.apply(console, args);\r\n            }\r\n          } else {\r\n            originalConsoleLog.apply(console, args);\r\n          }\r\n        };\r\n\r\n        return () => {\r\n          console.log = originalConsoleLog;\r\n        };\r\n      }\r\n    }, []);\r\n\r\n    // Expose methods to parent component through ref\r\n    useImperativeHandle(\r\n      ref,\r\n      () => ({\r\n        saveChanges,\r\n      }),\r\n      [saveChanges]\r\n    );\r\n\r\n    const onConnect = useCallback(\r\n      (params) => {\r\n        if (readOnly) return false;\r\n\r\n        console.log(\"[CONNECT] Creating new connection:\", params);\r\n\r\n        // Save existing state for potential undo\r\n        saveCurrentState();\r\n\r\n        // Generate unique ID for edge\r\n        const newEdgeId = `edge-${Date.now()}-${Math.floor(\r\n          Math.random() * 1000000\r\n        )}`;\r\n\r\n        // 确定是否需要箭头\r\n        const needsArrow = connectionType === \"arrow\";\r\n\r\n        // 创建基本边缘\r\n        const baseEdge = {\r\n          ...params,\r\n          id: newEdgeId,\r\n          type: \"smoothstep\",\r\n          animated: false,\r\n          style: { stroke: \"#6d28d9\", strokeWidth: 2 },\r\n          data: {\r\n            connectionType: connectionType,\r\n          },\r\n        };\r\n\r\n        // 使用工具函数处理边缘配置\r\n        const newEdge = processEdgeConfig(baseEdge);\r\n\r\n        console.log(\"[CONNECT] New edge created:\", newEdge);\r\n\r\n        // Add edge to state\r\n        setEdges((eds) => {\r\n          const updatedEdges = addEdge(newEdge, eds);\r\n          console.log(\r\n            \"[CONNECT] Updated edges, new count:\",\r\n            updatedEdges.length\r\n          );\r\n          return updatedEdges;\r\n        });\r\n\r\n        // Show confirmation\r\n        toast({\r\n          title: \"Connection created\",\r\n          description: \"A new connection has been added to the roadmap\",\r\n        });\r\n\r\n        // Save changes immediately if we're in edit mode to prevent loss\r\n        if (isEditing && onSave) {\r\n          console.log(\"[CONNECT] Auto-saving changes after adding edge\");\r\n          setTimeout(() => {\r\n            saveChanges();\r\n          }, 500);\r\n        }\r\n\r\n        return true;\r\n      },\r\n      [\r\n        connectionType,\r\n        readOnly,\r\n        setEdges,\r\n        saveCurrentState,\r\n        toast,\r\n        isEditing,\r\n        onSave,\r\n        saveChanges,\r\n        processEdgeConfig,\r\n      ]\r\n    );\r\n\r\n    const handleDeleteNode = useCallback(\r\n      (nodeId) => {\r\n        saveCurrentState();\r\n\r\n        // Remove the node from state\r\n        setNodes((nds) => nds.filter((node) => node.id !== nodeId));\r\n\r\n        // Remove the node from our tracking ref\r\n        addedNodesRef.current = addedNodesRef.current.filter(\r\n          (node) => node.id !== nodeId\r\n        );\r\n\r\n        // Remove connected edges\r\n        setEdges((eds) =>\r\n          eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\r\n        );\r\n\r\n        // Clear selection\r\n        setSelectedNode(null);\r\n\r\n        toast({\r\n          title: \"Node deleted\",\r\n          description: \"The node has been removed from the roadmap\",\r\n        });\r\n\r\n        // Update view after deletion\r\n        setTimeout(() => {\r\n          if (reactFlowInstance) {\r\n            reactFlowInstance.fitView({ padding: 0.5 });\r\n          }\r\n        }, 100);\r\n      },\r\n      [\r\n        setNodes,\r\n        setEdges,\r\n        toast,\r\n        saveCurrentState,\r\n        reactFlowInstance,\r\n        setSelectedNode,\r\n      ]\r\n    );\r\n\r\n    const handleUpdateNodeStyle = useCallback(\r\n      (nodeId, style) => {\r\n        setNodes((nds) =>\r\n          nds.map((node) => {\r\n            if (node.id === nodeId) {\r\n              return {\r\n                ...node,\r\n                data: {\r\n                  ...node.data,\r\n                  ...style,\r\n                },\r\n              };\r\n            }\r\n            return node;\r\n          })\r\n        );\r\n      },\r\n      [setNodes]\r\n    );\r\n\r\n    const onEdgeClick = useCallback(\r\n      (event, edge) => {\r\n        if (editMode === \"delete\") {\r\n          saveCurrentState();\r\n\r\n          // Delete the edge\r\n          setEdges((eds) => eds.filter((e) => e.id !== edge.id));\r\n\r\n          toast({\r\n            title: \"Connection removed\",\r\n            description: \"The connection between nodes has been removed\",\r\n          });\r\n        }\r\n      },\r\n      [setEdges, editMode, saveCurrentState, toast]\r\n    );\r\n\r\n    const handleUndo = useCallback(() => {\r\n      if (undoStack.length === 0) return;\r\n\r\n      const currentState = { nodes: [...nodes], edges: [...edges] };\r\n      const previousState = undoStack[undoStack.length - 1];\r\n\r\n      setRedoStack((prev) => [...prev, currentState]);\r\n      setUndoStack((prev) => prev.slice(0, -1));\r\n\r\n      setNodes(previousState.nodes);\r\n      setEdges(previousState.edges);\r\n\r\n      toast({\r\n        title: \"Undo\",\r\n        description: \"Previous action undone\",\r\n      });\r\n    }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\r\n\r\n    const handleRedo = useCallback(() => {\r\n      if (redoStack.length === 0) return;\r\n\r\n      const currentState = { nodes: [...nodes], edges: [...edges] };\r\n      const nextState = redoStack[redoStack.length - 1];\r\n\r\n      setUndoStack((prev) => [...prev, currentState]);\r\n      setRedoStack((prev) => prev.slice(0, -1));\r\n\r\n      setNodes(nextState.nodes);\r\n      setEdges(nextState.edges);\r\n\r\n      toast({\r\n        title: \"Redo\",\r\n        description: \"Action redone\",\r\n      });\r\n    }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\r\n\r\n    // Debug for admin permissions\r\n    console.log(\"MainNav rendering with user:\", user);\r\n    console.log(\"User is admin?\", isAdmin);\r\n\r\n    return (\r\n      <div ref={reactFlowWrapper} className=\"h-full w-full\">\r\n        {isEditing && showEditorPanel && (\r\n          <Panel position=\"right\" className=\"w-72 mr-2\">\r\n            <RoadmapEditorPanel\r\n              onStyleChange={handleStyleChange}\r\n              onConnectionTypeChange={handleConnectionTypeChange}\r\n              activeEdgeStyle={connectionType}\r\n              editMode={editMode}\r\n              onEditModeChange={(mode) => {\r\n                setEditMode(mode);\r\n                if (mode === \"connect\") {\r\n                  toast({\r\n                    title: \"Connect mode\",\r\n                    description:\r\n                      \"Click on a source node, then click on a target node to create a connection\",\r\n                  });\r\n                } else if (mode === \"delete\") {\r\n                  toast({\r\n                    title: \"Delete mode\",\r\n                    description: \"Click on a node or connection to delete it\",\r\n                  });\r\n                }\r\n              }}\r\n              onAddNodeClick={() => setIsAddCourseOpen(true)}\r\n            />\r\n          </Panel>\r\n        )}\r\n\r\n        {isEditing && (\r\n          <Panel\r\n            position=\"top-right\"\r\n            className=\"bg-card p-3 rounded-sm border border-[hsl(var(--border))] shadow-md mb-4\" // Updated Panel classes, kept mr-[300px] for now\r\n          >\r\n            <div className=\"flex gap-2 justify-end\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\" // Changed to variant\r\n                onClick={handleUndo}\r\n                disabled={undoStack.length === 0}\r\n              >\r\n                <ArrowLeft className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\" // Changed to variant\r\n                onClick={handleRedo}\r\n                disabled={redoStack.length === 0}\r\n              >\r\n                <ArrowRight className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"default\" // Changed to variant\r\n                size=\"sm\"\r\n                onClick={saveChanges}\r\n              >\r\n                <Save className=\"h-4 w-4 mr-1\" /> Save\r\n              </Button>\r\n            </div>\r\n          </Panel>\r\n        )}\r\n\r\n        <div className=\"h-full\">\r\n          <ReactFlow\r\n            key={`flow-${id}-${nodes.length}`}\r\n            nodes={filteredNodes()}\r\n            edges={edges}\r\n            onNodesChange={isEditing ? onNodesChange : undefined}\r\n            onEdgesChange={isEditing ? onEdgesChange : undefined}\r\n            onConnect={isEditing ? onConnect : undefined}\r\n            onNodeClick={onNodeClick}\r\n            onEdgeClick={onEdgeClick}\r\n            onPaneClick={onPaneClick}\r\n            nodeTypes={nodeTypes}\r\n            onNodeDragStop={onNodeDragStop}\r\n            nodesDraggable={isEditing}\r\n            nodesConnectable={isEditing && editMode === \"connect\"}\r\n            elementsSelectable={!readOnly}\r\n            defaultEdgeOptions={getDefaultEdgeOptions()}\r\n            fitView\r\n            fitViewOptions={{\r\n              padding: 0.5,\r\n              includeHiddenNodes: true,\r\n              minZoom: 0.5,\r\n              maxZoom: 1.5,\r\n            }}\r\n            minZoom={0.2}\r\n            maxZoom={4}\r\n            snapToGrid={true}\r\n            snapGrid={[10, 10]}\r\n            nodeExtent={[\r\n              [-2000, -2000],\r\n              [2000, 2000],\r\n            ]}\r\n            proOptions={{ hideAttribution: true }}\r\n            disableKeyboardA11y={true}\r\n            autoPanOnNodeDrag={false}\r\n            elevateEdgesOnSelect={false}\r\n            onInit={(instance) => {\r\n              // Use setTimeout to ensure proper initialization\r\n              setTimeout(() => {\r\n                if (nodes.length > 0) {\r\n                  instance.fitView({ padding: 0.5 });\r\n                  console.log(\r\n                    \"[FLOW] Flow initialized with nodes:\",\r\n                    nodes.length\r\n                  );\r\n                }\r\n              }, 300);\r\n            }}\r\n            // Add custom edge rendering to set data attributes based on handle positions\r\n            edgeUpdaterRadius={10}\r\n            edgesUpdatable={true}\r\n            edgesFocusable={true}\r\n            onEdgeUpdate={(oldEdge, newConnection) => {\r\n              setEdges((els) =>\r\n                els.map((edge) => {\r\n                  if (edge.id === oldEdge.id) {\r\n                    // Generate new ID based on new connection points\r\n                    const newId = `edge-${newConnection.source}-${\r\n                      newConnection.sourceHandle || \"default\"\r\n                    }-${newConnection.target}-${\r\n                      newConnection.targetHandle || \"default\"\r\n                    }`;\r\n                    return {\r\n                      ...edge,\r\n                      id: newId,\r\n                      source: newConnection.source,\r\n                      target: newConnection.target,\r\n                      sourceHandle: newConnection.sourceHandle,\r\n                      targetHandle: newConnection.targetHandle,\r\n                      data: {\r\n                        ...edge.data,\r\n                        sourceId: newConnection.source,\r\n                        targetId: newConnection.target,\r\n                        sourceHandle: newConnection.sourceHandle,\r\n                        targetHandle: newConnection.targetHandle,\r\n                        sourceHandleType:\r\n                          newConnection.sourceHandle || \"default\",\r\n                        targetHandleType:\r\n                          newConnection.targetHandle || \"default\",\r\n                      },\r\n                    };\r\n                  }\r\n                  return edge;\r\n                })\r\n              );\r\n              return true;\r\n            }}\r\n          >\r\n            <Controls />\r\n            <MiniMap nodeStrokeWidth={3} zoomable pannable />\r\n            <Background\r\n              variant=\"dots\"\r\n              gap={12}\r\n              size={1}\r\n              color=\"hsl(var(--border))\"\r\n            />{\" \"}\r\n            {/* Updated Background color */}\r\n            {/* Add custom edge styles for colored connections */}\r\n            {edges.map((edge) => (\r\n              <div key={`handle-${edge.id}`} style={{ display: \"none\" }}>\r\n                <div\r\n                  data-edgeid={edge.id}\r\n                  data-sourcehandle={edge.sourceHandle || \"default\"}\r\n                  data-targethandle={edge.targetHandle || \"default\"}\r\n                />\r\n              </div>\r\n            ))}\r\n          </ReactFlow>\r\n        </div>\r\n\r\n        {selectedNode && (\r\n          <CourseInfoPanel\r\n            node={selectedNode}\r\n            onClose={() => setSelectedNode(null)}\r\n            onCompleteToggle={handleCompleteToggle}\r\n            onDelete={isEditing ? handleDeleteNode : undefined}\r\n            onUpdateStyle={handleUpdateNodeStyle}\r\n            isAdmin={isEditing}\r\n            readOnly={readOnly}\r\n          />\r\n        )}\r\n\r\n        {isAddCourseOpen && (\r\n          <AddCourseDialog\r\n            open={isAddCourseOpen}\r\n            onClose={() => setIsAddCourseOpen(false)}\r\n            onAdd={handleAddCourse}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst RoadmapView = forwardRef((props, ref) => {\r\n  console.log(\"[FLOW] RoadmapView wrapper rendering with props:\", {\r\n    id: props.id,\r\n    nodesCount: props.initialNodes?.length,\r\n    edgesCount: props.initialEdges?.length,\r\n  });\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n      <div className=\"w-full h-full\">\r\n        <RoadmapViewInner ref={ref} {...props} />\r\n      </div>\r\n    </ReactFlowProvider>\r\n  );\r\n});\r\n\r\nexport default RoadmapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}