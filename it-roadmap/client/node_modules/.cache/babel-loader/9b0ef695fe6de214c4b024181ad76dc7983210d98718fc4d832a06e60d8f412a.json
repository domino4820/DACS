{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\demo\\\\DACS-jules_wip_16596734084587186652\\\\it-roadmap\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport api from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [devMode, setDevMode] = useState(false); // Track if we're using dev mode auth\n\n  // Load user from local storage on app start\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        // Check if token exists\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          console.log(\"No token found, user is not logged in\");\n          setLoading(false);\n          return;\n        }\n\n        // 确保授权头已设置\n        api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n        // 添加请求超时、重试和错误处理\n        let retries = 0;\n        const maxRetries = 2;\n        let success = false;\n        while (retries <= maxRetries && !success) {\n          try {\n            console.log(`Attempting to load user session (attempt ${retries + 1}/${maxRetries + 1})`);\n            const response = await api.get(\"/users/current\", {\n              timeout: 8000 // 8秒超时\n            });\n            if (response.data && response.data.id) {\n              setUser(response.data);\n              console.log(\"User session restored successfully\");\n              success = true;\n            } else {\n              throw new Error(\"Invalid user data received\");\n            }\n          } catch (retryErr) {\n            var _retryErr$response;\n            retries++;\n            if (((_retryErr$response = retryErr.response) === null || _retryErr$response === void 0 ? void 0 : _retryErr$response.status) === 401) {\n              var _retryErr$response2, _retryErr$response2$d;\n              console.error(\"Authentication error:\", ((_retryErr$response2 = retryErr.response) === null || _retryErr$response2 === void 0 ? void 0 : (_retryErr$response2$d = _retryErr$response2.data) === null || _retryErr$response2$d === void 0 ? void 0 : _retryErr$response2$d.message) || \"Token invalid or expired\");\n              break; // 不重试认证错误\n            }\n            if (retries > maxRetries) {\n              throw retryErr; // 重试次数用完，抛出最后一个错误\n            }\n\n            // 等待一段时间后重试\n            await new Promise(resolve => setTimeout(resolve, 1000 * retries));\n          }\n        }\n      } catch (err) {\n        console.error(\"Error loading user:\", err);\n        setError(err.message);\n\n        // 清除无效令牌和数据\n        localStorage.removeItem(\"token\");\n        delete api.defaults.headers.common[\"Authorization\"];\n\n        // 仅在非登录/注册页面重定向\n        const publicPaths = [\"/login\", \"/register\", \"/\", \"/explore\"];\n        const currentPath = window.location.pathname;\n        if (!publicPaths.some(path => currentPath.startsWith(path))) {\n          console.log(\"Redirecting to login page due to authentication failure\");\n          // 使用延迟防止可能的循环重定向\n          setTimeout(() => {\n            window.location.href = \"/login\";\n          }, 100);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Check if we're already using dev mode\n    const isDevMode = localStorage.getItem(\"devMode\") === \"true\";\n    setDevMode(isDevMode);\n\n    // If in dev mode, don't try to load user from API\n    if (isDevMode) {\n      const storedUser = JSON.parse(localStorage.getItem(\"devModeUser\"));\n      if (storedUser) {\n        setUser(storedUser);\n      }\n      setLoading(false);\n    } else {\n      loadUser();\n    }\n  }, []);\n  const login = async credentials => {\n    // If we're in dev mode, handle mock login\n    if (devMode) {\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        username: credentials.email.split(\"@\")[0],\n        email: credentials.email,\n        isAdmin: credentials.email.includes(\"admin\")\n      };\n      console.log(\"Logging in with dev mode user:\", mockUser);\n      setUser(mockUser);\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\n      localStorage.setItem(\"token\", \"dev-mode-token\"); // 确保设置token\n\n      // 设置默认授权头\n      api.defaults.headers.common[\"Authorization\"] = `Bearer dev-mode-token`;\n      return {\n        user: mockUser,\n        token: \"dev-mode-token\"\n      };\n    }\n\n    // Real login\n    try {\n      // Simplify login flow - use only one endpoint\n      const response = await api.post(\"/users/login\", credentials);\n\n      // 验证响应包含必要的数据\n      if (!response.data || !response.data.token || !response.data.user) {\n        throw new Error(\"Invalid response format from server\");\n      }\n\n      // Save token to localStorage\n      localStorage.setItem(\"token\", response.data.token);\n\n      // Set default authorization header for Axios\n      api.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.token}`;\n      console.log(\"Logged in user:\", response.data.user);\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      // 移除任何可能存在的旧令牌\n      localStorage.removeItem(\"token\");\n      delete api.defaults.headers.common[\"Authorization\"];\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || \"Login failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const register = async userData => {\n    // If we're in dev mode, handle mock registration\n    if (devMode) {\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        username: userData.username,\n        email: userData.email,\n        isAdmin: userData.email.includes(\"admin\")\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\n      localStorage.setItem(\"token\", \"dev-mode-token\"); // 确保设置token\n\n      // 设置默认授权头\n      api.defaults.headers.common[\"Authorization\"] = `Bearer dev-mode-token`;\n      return {\n        user: mockUser,\n        token: \"dev-mode-token\"\n      };\n    }\n\n    // Real registration\n    try {\n      const response = await api.post(\"/auth/register\", userData);\n\n      // 验证响应数据\n      if (!response.data || !response.data.token || !response.data.user) {\n        throw new Error(\"Invalid response format from server\");\n      }\n\n      // Save token to localStorage\n      localStorage.setItem(\"token\", response.data.token);\n\n      // Set default authorization header for Axios\n      api.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.token}`;\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message || \"Registration failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n\n    // If in dev mode, also clear dev mode user\n    if (devMode) {\n      localStorage.removeItem(\"devModeUser\");\n    }\n    delete api.defaults.headers.common[\"Authorization\"];\n    setUser(null);\n  };\n\n  // Toggle development mode - only for development!\n  const toggleDevMode = () => {\n    if (process.env.NODE_ENV !== \"development\") return;\n    const newDevMode = !devMode;\n    setDevMode(newDevMode);\n    if (newDevMode) {\n      localStorage.setItem(\"devMode\", \"true\");\n    } else {\n      localStorage.removeItem(\"devMode\");\n      localStorage.removeItem(\"devModeUser\");\n    }\n\n    // Clear current user when switching modes\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      isAuthenticated: !!user,\n      isAdmin: (user === null || user === void 0 ? void 0 : user.isAdmin) || false,\n      devMode,\n      login,\n      register,\n      logout,\n      toggleDevMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ISej//qsRkrvbrPS+VYFplDEyiw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","error","setError","devMode","setDevMode","loadUser","token","localStorage","getItem","console","log","defaults","headers","common","retries","maxRetries","success","response","get","timeout","data","id","Error","retryErr","_retryErr$response","status","_retryErr$response2","_retryErr$response2$d","message","Promise","resolve","setTimeout","err","removeItem","publicPaths","currentPath","window","location","pathname","some","path","startsWith","href","isDevMode","storedUser","JSON","parse","login","credentials","mockUser","Math","floor","random","username","email","split","isAdmin","includes","setItem","stringify","post","_err$response","_err$response$data","errorMessage","register","userData","_err$response2","_err$response2$data","logout","toggleDevMode","process","env","NODE_ENV","newDevMode","Provider","value","isAuthenticated","fileName","lineNumber","columnNumber","_c","useAuth","$RefreshReg$"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/context/AuthContext.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, useContext, useState, useEffect } from \"react\";\r\nimport api from \"../services/api\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [devMode, setDevMode] = useState(false); // Track if we're using dev mode auth\r\n\r\n  // Load user from local storage on app start\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      try {\r\n        // Check if token exists\r\n        const token = localStorage.getItem(\"token\");\r\n        if (!token) {\r\n          console.log(\"No token found, user is not logged in\");\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // 确保授权头已设置\r\n        api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n\r\n        // 添加请求超时、重试和错误处理\r\n        let retries = 0;\r\n        const maxRetries = 2;\r\n        let success = false;\r\n\r\n        while (retries <= maxRetries && !success) {\r\n          try {\r\n            console.log(\r\n              `Attempting to load user session (attempt ${retries + 1}/${\r\n                maxRetries + 1\r\n              })`\r\n            );\r\n\r\n            const response = await api.get(\"/users/current\", {\r\n              timeout: 8000, // 8秒超时\r\n            });\r\n\r\n            if (response.data && response.data.id) {\r\n              setUser(response.data);\r\n              console.log(\"User session restored successfully\");\r\n              success = true;\r\n            } else {\r\n              throw new Error(\"Invalid user data received\");\r\n            }\r\n          } catch (retryErr) {\r\n            retries++;\r\n\r\n            if (retryErr.response?.status === 401) {\r\n              console.error(\r\n                \"Authentication error:\",\r\n                retryErr.response?.data?.message || \"Token invalid or expired\"\r\n              );\r\n              break; // 不重试认证错误\r\n            }\r\n\r\n            if (retries > maxRetries) {\r\n              throw retryErr; // 重试次数用完，抛出最后一个错误\r\n            }\r\n\r\n            // 等待一段时间后重试\r\n            await new Promise((resolve) => setTimeout(resolve, 1000 * retries));\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error loading user:\", err);\r\n        setError(err.message);\r\n\r\n        // 清除无效令牌和数据\r\n        localStorage.removeItem(\"token\");\r\n        delete api.defaults.headers.common[\"Authorization\"];\r\n\r\n        // 仅在非登录/注册页面重定向\r\n        const publicPaths = [\"/login\", \"/register\", \"/\", \"/explore\"];\r\n        const currentPath = window.location.pathname;\r\n\r\n        if (!publicPaths.some((path) => currentPath.startsWith(path))) {\r\n          console.log(\r\n            \"Redirecting to login page due to authentication failure\"\r\n          );\r\n          // 使用延迟防止可能的循环重定向\r\n          setTimeout(() => {\r\n            window.location.href = \"/login\";\r\n          }, 100);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Check if we're already using dev mode\r\n    const isDevMode = localStorage.getItem(\"devMode\") === \"true\";\r\n    setDevMode(isDevMode);\r\n\r\n    // If in dev mode, don't try to load user from API\r\n    if (isDevMode) {\r\n      const storedUser = JSON.parse(localStorage.getItem(\"devModeUser\"));\r\n      if (storedUser) {\r\n        setUser(storedUser);\r\n      }\r\n      setLoading(false);\r\n    } else {\r\n      loadUser();\r\n    }\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    // If we're in dev mode, handle mock login\r\n    if (devMode) {\r\n      const mockUser = {\r\n        id: Math.floor(Math.random() * 1000),\r\n        username: credentials.email.split(\"@\")[0],\r\n        email: credentials.email,\r\n        isAdmin: credentials.email.includes(\"admin\"),\r\n      };\r\n      console.log(\"Logging in with dev mode user:\", mockUser);\r\n      setUser(mockUser);\r\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\r\n      localStorage.setItem(\"token\", \"dev-mode-token\"); // 确保设置token\r\n\r\n      // 设置默认授权头\r\n      api.defaults.headers.common[\"Authorization\"] = `Bearer dev-mode-token`;\r\n\r\n      return { user: mockUser, token: \"dev-mode-token\" };\r\n    }\r\n\r\n    // Real login\r\n    try {\r\n      // Simplify login flow - use only one endpoint\r\n      const response = await api.post(\"/users/login\", credentials);\r\n\r\n      // 验证响应包含必要的数据\r\n      if (!response.data || !response.data.token || !response.data.user) {\r\n        throw new Error(\"Invalid response format from server\");\r\n      }\r\n\r\n      // Save token to localStorage\r\n      localStorage.setItem(\"token\", response.data.token);\r\n\r\n      // Set default authorization header for Axios\r\n      api.defaults.headers.common[\r\n        \"Authorization\"\r\n      ] = `Bearer ${response.data.token}`;\r\n\r\n      console.log(\"Logged in user:\", response.data.user);\r\n      setUser(response.data.user);\r\n      return response.data;\r\n    } catch (err) {\r\n      // 移除任何可能存在的旧令牌\r\n      localStorage.removeItem(\"token\");\r\n      delete api.defaults.headers.common[\"Authorization\"];\r\n\r\n      const errorMessage =\r\n        err.response?.data?.message || err.message || \"Login failed\";\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    // If we're in dev mode, handle mock registration\r\n    if (devMode) {\r\n      const mockUser = {\r\n        id: Math.floor(Math.random() * 1000),\r\n        username: userData.username,\r\n        email: userData.email,\r\n        isAdmin: userData.email.includes(\"admin\"),\r\n      };\r\n      setUser(mockUser);\r\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\r\n      localStorage.setItem(\"token\", \"dev-mode-token\"); // 确保设置token\r\n\r\n      // 设置默认授权头\r\n      api.defaults.headers.common[\"Authorization\"] = `Bearer dev-mode-token`;\r\n\r\n      return { user: mockUser, token: \"dev-mode-token\" };\r\n    }\r\n\r\n    // Real registration\r\n    try {\r\n      const response = await api.post(\"/auth/register\", userData);\r\n\r\n      // 验证响应数据\r\n      if (!response.data || !response.data.token || !response.data.user) {\r\n        throw new Error(\"Invalid response format from server\");\r\n      }\r\n\r\n      // Save token to localStorage\r\n      localStorage.setItem(\"token\", response.data.token);\r\n\r\n      // Set default authorization header for Axios\r\n      api.defaults.headers.common[\r\n        \"Authorization\"\r\n      ] = `Bearer ${response.data.token}`;\r\n\r\n      setUser(response.data.user);\r\n      return response.data;\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err.response?.data?.message || err.message || \"Registration failed\";\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n\r\n    // If in dev mode, also clear dev mode user\r\n    if (devMode) {\r\n      localStorage.removeItem(\"devModeUser\");\r\n    }\r\n\r\n    delete api.defaults.headers.common[\"Authorization\"];\r\n    setUser(null);\r\n  };\r\n\r\n  // Toggle development mode - only for development!\r\n  const toggleDevMode = () => {\r\n    if (process.env.NODE_ENV !== \"development\") return;\r\n\r\n    const newDevMode = !devMode;\r\n    setDevMode(newDevMode);\r\n\r\n    if (newDevMode) {\r\n      localStorage.setItem(\"devMode\", \"true\");\r\n    } else {\r\n      localStorage.removeItem(\"devMode\");\r\n      localStorage.removeItem(\"devModeUser\");\r\n    }\r\n\r\n    // Clear current user when switching modes\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        loading,\r\n        error,\r\n        isAuthenticated: !!user,\r\n        isAdmin: user?.isAdmin || false,\r\n        devMode,\r\n        login,\r\n        register,\r\n        logout,\r\n        toggleDevMode,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}