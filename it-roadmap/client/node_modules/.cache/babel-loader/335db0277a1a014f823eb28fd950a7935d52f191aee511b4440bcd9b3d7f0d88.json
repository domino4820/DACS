{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\CyberPath\\\\it-roadmap\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport api from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [devMode, setDevMode] = useState(false); // Track if we're using dev mode auth\n\n  // Load user from local storage on app start\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        // Check if token exists\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          setLoading(false);\n          return;\n        }\n\n        // Get current user\n        const response = await api.get(\"/auth/me\");\n        setUser(response.data);\n      } catch (err) {\n        console.error(\"Error loading user:\", err);\n        setError(err.message);\n        // Clear invalid token\n        localStorage.removeItem(\"token\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Check if we're already using dev mode\n    const isDevMode = localStorage.getItem(\"devMode\") === \"true\";\n    setDevMode(isDevMode);\n\n    // If in dev mode, don't try to load user from API\n    if (isDevMode) {\n      const storedUser = JSON.parse(localStorage.getItem(\"devModeUser\"));\n      if (storedUser) {\n        setUser(storedUser);\n      }\n      setLoading(false);\n    } else {\n      loadUser();\n    }\n  }, []);\n  const login = async credentials => {\n    // If we're in dev mode, handle mock login\n    if (devMode) {\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        username: credentials.email.split(\"@\")[0],\n        email: credentials.email,\n        isAdmin: credentials.email.includes(\"admin\")\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\n      return {\n        user: mockUser,\n        token: \"dev-mode-token\"\n      };\n    }\n\n    // Real login\n    try {\n      // Simplify login flow - use only one endpoint\n      const response = await api.post(\"/users/login\", credentials);\n\n      // Save token to localStorage\n      if (response.data.token) {\n        localStorage.setItem(\"token\", response.data.token);\n        // Set default authorization header for Axios\n        api.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.token}`;\n      }\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Login failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const register = async userData => {\n    // If we're in dev mode, handle mock registration\n    if (devMode) {\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        username: userData.username,\n        email: userData.email,\n        isAdmin: userData.email.includes(\"admin\")\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\n      return {\n        user: mockUser,\n        token: \"dev-mode-token\"\n      };\n    }\n\n    // Real registration\n    try {\n      const response = await api.post(\"/auth/register\", userData);\n\n      // Save token to localStorage\n      if (response.data.token) {\n        localStorage.setItem(\"token\", response.data.token);\n        // Set default authorization header for Axios\n        api.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.token}`;\n      }\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Registration failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n\n    // If in dev mode, also clear dev mode user\n    if (devMode) {\n      localStorage.removeItem(\"devModeUser\");\n    }\n    delete api.defaults.headers.common[\"Authorization\"];\n    setUser(null);\n  };\n\n  // Toggle development mode - only for development!\n  const toggleDevMode = () => {\n    if (process.env.NODE_ENV !== \"development\") return;\n    const newDevMode = !devMode;\n    setDevMode(newDevMode);\n    if (newDevMode) {\n      localStorage.setItem(\"devMode\", \"true\");\n    } else {\n      localStorage.removeItem(\"devMode\");\n      localStorage.removeItem(\"devModeUser\");\n    }\n\n    // Clear current user when switching modes\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      isAuthenticated: !!user,\n      isAdmin: (user === null || user === void 0 ? void 0 : user.isAdmin) || false,\n      devMode,\n      login,\n      register,\n      logout,\n      toggleDevMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ISej//qsRkrvbrPS+VYFplDEyiw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","error","setError","devMode","setDevMode","loadUser","token","localStorage","getItem","response","get","data","err","console","message","removeItem","isDevMode","storedUser","JSON","parse","login","credentials","mockUser","id","Math","floor","random","username","email","split","isAdmin","includes","setItem","stringify","post","defaults","headers","common","_err$response","_err$response$data","errorMessage","Error","register","userData","_err$response2","_err$response2$data","logout","toggleDevMode","process","env","NODE_ENV","newDevMode","Provider","value","isAuthenticated","fileName","lineNumber","columnNumber","_c","useAuth","$RefreshReg$"],"sources":["D:/CyberPath/it-roadmap/client/src/context/AuthContext.jsx"],"sourcesContent":["\"use client\";\n\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport api from \"../services/api\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [devMode, setDevMode] = useState(false); // Track if we're using dev mode auth\n\n  // Load user from local storage on app start\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        // Check if token exists\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          setLoading(false);\n          return;\n        }\n\n        // Get current user\n        const response = await api.get(\"/auth/me\");\n        setUser(response.data);\n      } catch (err) {\n        console.error(\"Error loading user:\", err);\n        setError(err.message);\n        // Clear invalid token\n        localStorage.removeItem(\"token\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Check if we're already using dev mode\n    const isDevMode = localStorage.getItem(\"devMode\") === \"true\";\n    setDevMode(isDevMode);\n\n    // If in dev mode, don't try to load user from API\n    if (isDevMode) {\n      const storedUser = JSON.parse(localStorage.getItem(\"devModeUser\"));\n      if (storedUser) {\n        setUser(storedUser);\n      }\n      setLoading(false);\n    } else {\n      loadUser();\n    }\n  }, []);\n\n  const login = async (credentials) => {\n    // If we're in dev mode, handle mock login\n    if (devMode) {\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        username: credentials.email.split(\"@\")[0],\n        email: credentials.email,\n        isAdmin: credentials.email.includes(\"admin\"),\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\n      return { user: mockUser, token: \"dev-mode-token\" };\n    }\n\n    // Real login\n    try {\n      // Simplify login flow - use only one endpoint\n      const response = await api.post(\"/users/login\", credentials);\n\n      // Save token to localStorage\n      if (response.data.token) {\n        localStorage.setItem(\"token\", response.data.token);\n        // Set default authorization header for Axios\n        api.defaults.headers.common[\n          \"Authorization\"\n        ] = `Bearer ${response.data.token}`;\n      }\n\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || \"Login failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const register = async (userData) => {\n    // If we're in dev mode, handle mock registration\n    if (devMode) {\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        username: userData.username,\n        email: userData.email,\n        isAdmin: userData.email.includes(\"admin\"),\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\n      return { user: mockUser, token: \"dev-mode-token\" };\n    }\n\n    // Real registration\n    try {\n      const response = await api.post(\"/auth/register\", userData);\n\n      // Save token to localStorage\n      if (response.data.token) {\n        localStorage.setItem(\"token\", response.data.token);\n        // Set default authorization header for Axios\n        api.defaults.headers.common[\n          \"Authorization\"\n        ] = `Bearer ${response.data.token}`;\n      }\n\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || \"Registration failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n\n    // If in dev mode, also clear dev mode user\n    if (devMode) {\n      localStorage.removeItem(\"devModeUser\");\n    }\n\n    delete api.defaults.headers.common[\"Authorization\"];\n    setUser(null);\n  };\n\n  // Toggle development mode - only for development!\n  const toggleDevMode = () => {\n    if (process.env.NODE_ENV !== \"development\") return;\n\n    const newDevMode = !devMode;\n    setDevMode(newDevMode);\n\n    if (newDevMode) {\n      localStorage.setItem(\"devMode\", \"true\");\n    } else {\n      localStorage.removeItem(\"devMode\");\n      localStorage.removeItem(\"devModeUser\");\n    }\n\n    // Clear current user when switching modes\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        isAuthenticated: !!user,\n        isAdmin: user?.isAdmin || false,\n        devMode,\n        login,\n        register,\n        logout,\n        toggleDevMode,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;EAAAC,GAAA,GAAAD,YAAA;AAEb,SAASE,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,OAAOC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAZ,EAAA;EAC5C,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMe,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF;QACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAI,CAACF,KAAK,EAAE;UACVN,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;;QAEA;QACA,MAAMS,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,GAAG,CAAC,UAAU,CAAC;QAC1CZ,OAAO,CAACW,QAAQ,CAACE,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACZ,KAAK,CAAC,qBAAqB,EAAEW,GAAG,CAAC;QACzCV,QAAQ,CAACU,GAAG,CAACE,OAAO,CAAC;QACrB;QACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;MAClC,CAAC,SAAS;QACRf,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACA,MAAMgB,SAAS,GAAGT,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,KAAK,MAAM;IAC5DJ,UAAU,CAACY,SAAS,CAAC;;IAErB;IACA,IAAIA,SAAS,EAAE;MACb,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACZ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;MAClE,IAAIS,UAAU,EAAE;QACdnB,OAAO,CAACmB,UAAU,CAAC;MACrB;MACAjB,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,MAAM;MACLK,QAAQ,CAAC,CAAC;IACZ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC;IACA,IAAIlB,OAAO,EAAE;MACX,MAAMmB,QAAQ,GAAG;QACfC,EAAE,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;QACpCC,QAAQ,EAAEN,WAAW,CAACO,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzCD,KAAK,EAAEP,WAAW,CAACO,KAAK;QACxBE,OAAO,EAAET,WAAW,CAACO,KAAK,CAACG,QAAQ,CAAC,OAAO;MAC7C,CAAC;MACDjC,OAAO,CAACwB,QAAQ,CAAC;MACjBf,YAAY,CAACyB,OAAO,CAAC,aAAa,EAAEd,IAAI,CAACe,SAAS,CAACX,QAAQ,CAAC,CAAC;MAC7D,OAAO;QAAEzB,IAAI,EAAEyB,QAAQ;QAAEhB,KAAK,EAAE;MAAiB,CAAC;IACpD;;IAEA;IACA,IAAI;MACF;MACA,MAAMG,QAAQ,GAAG,MAAMlB,GAAG,CAAC2C,IAAI,CAAC,cAAc,EAAEb,WAAW,CAAC;;MAE5D;MACA,IAAIZ,QAAQ,CAACE,IAAI,CAACL,KAAK,EAAE;QACvBC,YAAY,CAACyB,OAAO,CAAC,OAAO,EAAEvB,QAAQ,CAACE,IAAI,CAACL,KAAK,CAAC;QAClD;QACAf,GAAG,CAAC4C,QAAQ,CAACC,OAAO,CAACC,MAAM,CACzB,eAAe,CAChB,GAAG,UAAU5B,QAAQ,CAACE,IAAI,CAACL,KAAK,EAAE;MACrC;MAEAR,OAAO,CAACW,QAAQ,CAACE,IAAI,CAACd,IAAI,CAAC;MAC3B,OAAOY,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAA0B,aAAA,EAAAC,kBAAA;MACZ,MAAMC,YAAY,GAAG,EAAAF,aAAA,GAAA1B,GAAG,CAACH,QAAQ,cAAA6B,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAc3B,IAAI,cAAA4B,kBAAA,uBAAlBA,kBAAA,CAAoBzB,OAAO,KAAI,cAAc;MAClEZ,QAAQ,CAACsC,YAAY,CAAC;MACtB,MAAM,IAAIC,KAAK,CAACD,YAAY,CAAC;IAC/B;EACF,CAAC;EAED,MAAME,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC;IACA,IAAIxC,OAAO,EAAE;MACX,MAAMmB,QAAQ,GAAG;QACfC,EAAE,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;QACpCC,QAAQ,EAAEgB,QAAQ,CAAChB,QAAQ;QAC3BC,KAAK,EAAEe,QAAQ,CAACf,KAAK;QACrBE,OAAO,EAAEa,QAAQ,CAACf,KAAK,CAACG,QAAQ,CAAC,OAAO;MAC1C,CAAC;MACDjC,OAAO,CAACwB,QAAQ,CAAC;MACjBf,YAAY,CAACyB,OAAO,CAAC,aAAa,EAAEd,IAAI,CAACe,SAAS,CAACX,QAAQ,CAAC,CAAC;MAC7D,OAAO;QAAEzB,IAAI,EAAEyB,QAAQ;QAAEhB,KAAK,EAAE;MAAiB,CAAC;IACpD;;IAEA;IACA,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMlB,GAAG,CAAC2C,IAAI,CAAC,gBAAgB,EAAES,QAAQ,CAAC;;MAE3D;MACA,IAAIlC,QAAQ,CAACE,IAAI,CAACL,KAAK,EAAE;QACvBC,YAAY,CAACyB,OAAO,CAAC,OAAO,EAAEvB,QAAQ,CAACE,IAAI,CAACL,KAAK,CAAC;QAClD;QACAf,GAAG,CAAC4C,QAAQ,CAACC,OAAO,CAACC,MAAM,CACzB,eAAe,CAChB,GAAG,UAAU5B,QAAQ,CAACE,IAAI,CAACL,KAAK,EAAE;MACrC;MAEAR,OAAO,CAACW,QAAQ,CAACE,IAAI,CAACd,IAAI,CAAC;MAC3B,OAAOY,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAgC,cAAA,EAAAC,mBAAA;MACZ,MAAML,YAAY,GAAG,EAAAI,cAAA,GAAAhC,GAAG,CAACH,QAAQ,cAAAmC,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcjC,IAAI,cAAAkC,mBAAA,uBAAlBA,mBAAA,CAAoB/B,OAAO,KAAI,qBAAqB;MACzEZ,QAAQ,CAACsC,YAAY,CAAC;MACtB,MAAM,IAAIC,KAAK,CAACD,YAAY,CAAC;IAC/B;EACF,CAAC;EAED,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACnBvC,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;;IAEhC;IACA,IAAIZ,OAAO,EAAE;MACXI,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC;IACxC;IAEA,OAAOxB,GAAG,CAAC4C,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACnDvC,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;;EAED;EACA,MAAMiD,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAE5C,MAAMC,UAAU,GAAG,CAAChD,OAAO;IAC3BC,UAAU,CAAC+C,UAAU,CAAC;IAEtB,IAAIA,UAAU,EAAE;MACd5C,YAAY,CAACyB,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC;IACzC,CAAC,MAAM;MACLzB,YAAY,CAACQ,UAAU,CAAC,SAAS,CAAC;MAClCR,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC;IACxC;;IAEA;IACAjB,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACEL,OAAA,CAACC,WAAW,CAAC0D,QAAQ;IACnBC,KAAK,EAAE;MACLxD,IAAI;MACJE,OAAO;MACPE,KAAK;MACLqD,eAAe,EAAE,CAAC,CAACzD,IAAI;MACvBiC,OAAO,EAAE,CAAAjC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiC,OAAO,KAAI,KAAK;MAC/B3B,OAAO;MACPiB,KAAK;MACLsB,QAAQ;MACRI,MAAM;MACNC;IACF,CAAE;IAAAnD,QAAA,EAEDA;EAAQ;IAAA2D,QAAA,EAAAxE,YAAA;IAAAyE,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzE,EAAA,CAvKWW,YAAY;AAAA+D,EAAA,GAAZ/D,YAAY;AAyKzB,OAAO,MAAMgE,OAAO,GAAGA,CAAA;EAAAzE,GAAA;EAAA,OAAME,UAAU,CAACM,WAAW,CAAC;AAAA;AAACR,GAAA,CAAxCyE,OAAO;AAAA,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}