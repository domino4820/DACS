{"ast":null,"code":"import { MarkerType } from \"reactflow\";\n\n/**\r\n * 处理边缘配置，确保源节点和目标节点方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 处理后的边缘对象\r\n */\nexport const processEdgeConfig = edge => {\n  if (!edge) return null;\n\n  // 确保边缘有数据对象\n  const edgeData = edge.data || {};\n  const connectionType = edgeData.connectionType || \"arrow\";\n  const needsArrow = connectionType === \"arrow\";\n\n  // 记录连接点信息，方便调试\n  console.log(\"Processing edge handles:\", {\n    id: edge.id,\n    sourceHandle: edge.sourceHandle,\n    targetHandle: edge.targetHandle,\n    dataSourceHandle: edgeData.sourceHandle,\n    dataTargetHandle: edgeData.targetHandle\n  });\n\n  // 确保保留源节点和目标节点的正确方向\n  return {\n    ...edge,\n    // 确保保留原始的连接点信息\n    sourceHandle: edge.sourceHandle || edgeData.sourceHandle || null,\n    targetHandle: edge.targetHandle || edgeData.targetHandle || null,\n    // 确保保留现有的markerEnd配置或创建新的\n    markerEnd: edge.markerEnd || (needsArrow ? {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: \"hsl(var(--primary))\"\n    } : undefined),\n    data: {\n      ...edgeData,\n      connectionType,\n      // 显式存储源和目标信息以确保方向一致性\n      sourceId: edge.source,\n      targetId: edge.target,\n      // 在data中也保存连接点信息，确保两处一致\n      sourceHandle: edge.sourceHandle || edgeData.sourceHandle || null,\n      targetHandle: edge.targetHandle || edgeData.targetHandle || null\n    }\n  };\n};\n\n/**\r\n * 创建新的边缘连接\r\n * @param {Object} params - 连接参数\r\n * @param {string} connectionType - 连接类型 (arrow 或 none)\r\n * @returns {Object} - 创建的新边缘对象\r\n */\nexport const createEdgeConnection = (params, connectionType = \"arrow\") => {\n  if (!params.source || !params.target) {\n    console.error(\"Cannot create edge: missing source or target\");\n    return null;\n  }\n\n  // 记录原始连接参数\n  console.log(\"Creating edge with handles:\", {\n    sourceHandle: params.sourceHandle,\n    targetHandle: params.targetHandle\n  });\n\n  // 生成唯一ID\n  const newEdgeId = `edge-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\n\n  // 确定是否需要箭头\n  const needsArrow = connectionType === \"arrow\";\n\n  // 创建边缘基本数据\n  const baseEdge = {\n    ...params,\n    id: newEdgeId,\n    type: \"smoothstep\",\n    animated: false,\n    style: {\n      stroke: \"#6d28d9\",\n      strokeWidth: 2\n    },\n    // 确保连接点信息存在于顶层属性中\n    sourceHandle: params.sourceHandle || null,\n    targetHandle: params.targetHandle || null,\n    data: {\n      connectionType: connectionType,\n      // 显式存储源和目标节点信息以确保方向一致性\n      sourceId: params.source,\n      targetId: params.target,\n      // 在data中也存储连接点信息\n      sourceHandle: params.sourceHandle || null,\n      targetHandle: params.targetHandle || null\n    },\n    markerEnd: needsArrow ? {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: \"hsl(var(--primary))\"\n    } : undefined\n  };\n\n  // 应用处理确保一致性\n  return processEdgeConfig(baseEdge);\n};\n\n/**\r\n * 从原始边缘数据中提取关键信息用于日志记录和调试\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 包含关键信息的简化对象\r\n */\nexport const getEdgeDebugInfo = edge => {\n  var _edge$data, _edge$data2, _edge$data3, _edge$data4, _edge$data5;\n  if (!edge) return {\n    missing: true\n  };\n  return {\n    id: edge.id,\n    source: edge.source,\n    target: edge.target,\n    sourceId: (_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.sourceId,\n    targetId: (_edge$data2 = edge.data) === null || _edge$data2 === void 0 ? void 0 : _edge$data2.targetId,\n    sourceHandle: edge.sourceHandle,\n    targetHandle: edge.targetHandle,\n    dataSourceHandle: (_edge$data3 = edge.data) === null || _edge$data3 === void 0 ? void 0 : _edge$data3.sourceHandle,\n    dataTargetHandle: (_edge$data4 = edge.data) === null || _edge$data4 === void 0 ? void 0 : _edge$data4.targetHandle,\n    connectionType: (_edge$data5 = edge.data) === null || _edge$data5 === void 0 ? void 0 : _edge$data5.connectionType,\n    hasMarkerEnd: !!edge.markerEnd\n  };\n};\n\n/**\r\n * 验证边缘方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {boolean} - 方向是否一致\r\n */\nexport const validateEdgeDirection = edge => {\n  if (!edge || !edge.data) return false;\n\n  // 检查源节点和目标节点的一致性\n  const sourceConsistent = edge.source === edge.data.sourceId;\n  const targetConsistent = edge.target === edge.data.targetId;\n  // 检查连接点一致性\n  const sourceHandleConsistent = edge.sourceHandle === edge.data.sourceHandle;\n  const targetHandleConsistent = edge.targetHandle === edge.data.targetHandle;\n  return sourceConsistent && targetConsistent && sourceHandleConsistent && targetHandleConsistent;\n};","map":{"version":3,"names":["MarkerType","processEdgeConfig","edge","edgeData","data","connectionType","needsArrow","console","log","id","sourceHandle","targetHandle","dataSourceHandle","dataTargetHandle","markerEnd","type","ArrowClosed","width","height","color","undefined","sourceId","source","targetId","target","createEdgeConnection","params","error","newEdgeId","Date","now","Math","floor","random","baseEdge","animated","style","stroke","strokeWidth","getEdgeDebugInfo","_edge$data","_edge$data2","_edge$data3","_edge$data4","_edge$data5","missing","hasMarkerEnd","validateEdgeDirection","sourceConsistent","targetConsistent","sourceHandleConsistent","targetHandleConsistent"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/utils/edgeUtils.js"],"sourcesContent":["import { MarkerType } from \"reactflow\";\r\n\r\n/**\r\n * 处理边缘配置，确保源节点和目标节点方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 处理后的边缘对象\r\n */\r\nexport const processEdgeConfig = (edge) => {\r\n  if (!edge) return null;\r\n\r\n  // 确保边缘有数据对象\r\n  const edgeData = edge.data || {};\r\n  const connectionType = edgeData.connectionType || \"arrow\";\r\n  const needsArrow = connectionType === \"arrow\";\r\n\r\n  // 记录连接点信息，方便调试\r\n  console.log(\"Processing edge handles:\", {\r\n    id: edge.id,\r\n    sourceHandle: edge.sourceHandle,\r\n    targetHandle: edge.targetHandle,\r\n    dataSourceHandle: edgeData.sourceHandle,\r\n    dataTargetHandle: edgeData.targetHandle,\r\n  });\r\n\r\n  // 确保保留源节点和目标节点的正确方向\r\n  return {\r\n    ...edge,\r\n    // 确保保留原始的连接点信息\r\n    sourceHandle: edge.sourceHandle || edgeData.sourceHandle || null,\r\n    targetHandle: edge.targetHandle || edgeData.targetHandle || null,\r\n    // 确保保留现有的markerEnd配置或创建新的\r\n    markerEnd:\r\n      edge.markerEnd ||\r\n      (needsArrow\r\n        ? {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: \"hsl(var(--primary))\",\r\n          }\r\n        : undefined),\r\n    data: {\r\n      ...edgeData,\r\n      connectionType,\r\n      // 显式存储源和目标信息以确保方向一致性\r\n      sourceId: edge.source,\r\n      targetId: edge.target,\r\n      // 在data中也保存连接点信息，确保两处一致\r\n      sourceHandle: edge.sourceHandle || edgeData.sourceHandle || null,\r\n      targetHandle: edge.targetHandle || edgeData.targetHandle || null,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * 创建新的边缘连接\r\n * @param {Object} params - 连接参数\r\n * @param {string} connectionType - 连接类型 (arrow 或 none)\r\n * @returns {Object} - 创建的新边缘对象\r\n */\r\nexport const createEdgeConnection = (params, connectionType = \"arrow\") => {\r\n  if (!params.source || !params.target) {\r\n    console.error(\"Cannot create edge: missing source or target\");\r\n    return null;\r\n  }\r\n\r\n  // 记录原始连接参数\r\n  console.log(\"Creating edge with handles:\", {\r\n    sourceHandle: params.sourceHandle,\r\n    targetHandle: params.targetHandle,\r\n  });\r\n\r\n  // 生成唯一ID\r\n  const newEdgeId = `edge-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\r\n\r\n  // 确定是否需要箭头\r\n  const needsArrow = connectionType === \"arrow\";\r\n\r\n  // 创建边缘基本数据\r\n  const baseEdge = {\r\n    ...params,\r\n    id: newEdgeId,\r\n    type: \"smoothstep\",\r\n    animated: false,\r\n    style: { stroke: \"#6d28d9\", strokeWidth: 2 },\r\n    // 确保连接点信息存在于顶层属性中\r\n    sourceHandle: params.sourceHandle || null,\r\n    targetHandle: params.targetHandle || null,\r\n    data: {\r\n      connectionType: connectionType,\r\n      // 显式存储源和目标节点信息以确保方向一致性\r\n      sourceId: params.source,\r\n      targetId: params.target,\r\n      // 在data中也存储连接点信息\r\n      sourceHandle: params.sourceHandle || null,\r\n      targetHandle: params.targetHandle || null,\r\n    },\r\n    markerEnd: needsArrow\r\n      ? {\r\n          type: MarkerType.ArrowClosed,\r\n          width: 20,\r\n          height: 20,\r\n          color: \"hsl(var(--primary))\",\r\n        }\r\n      : undefined,\r\n  };\r\n\r\n  // 应用处理确保一致性\r\n  return processEdgeConfig(baseEdge);\r\n};\r\n\r\n/**\r\n * 从原始边缘数据中提取关键信息用于日志记录和调试\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 包含关键信息的简化对象\r\n */\r\nexport const getEdgeDebugInfo = (edge) => {\r\n  if (!edge) return { missing: true };\r\n\r\n  return {\r\n    id: edge.id,\r\n    source: edge.source,\r\n    target: edge.target,\r\n    sourceId: edge.data?.sourceId,\r\n    targetId: edge.data?.targetId,\r\n    sourceHandle: edge.sourceHandle,\r\n    targetHandle: edge.targetHandle,\r\n    dataSourceHandle: edge.data?.sourceHandle,\r\n    dataTargetHandle: edge.data?.targetHandle,\r\n    connectionType: edge.data?.connectionType,\r\n    hasMarkerEnd: !!edge.markerEnd,\r\n  };\r\n};\r\n\r\n/**\r\n * 验证边缘方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {boolean} - 方向是否一致\r\n */\r\nexport const validateEdgeDirection = (edge) => {\r\n  if (!edge || !edge.data) return false;\r\n\r\n  // 检查源节点和目标节点的一致性\r\n  const sourceConsistent = edge.source === edge.data.sourceId;\r\n  const targetConsistent = edge.target === edge.data.targetId;\r\n  // 检查连接点一致性\r\n  const sourceHandleConsistent = edge.sourceHandle === edge.data.sourceHandle;\r\n  const targetHandleConsistent = edge.targetHandle === edge.data.targetHandle;\r\n\r\n  return (\r\n    sourceConsistent &&\r\n    targetConsistent &&\r\n    sourceHandleConsistent &&\r\n    targetHandleConsistent\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}