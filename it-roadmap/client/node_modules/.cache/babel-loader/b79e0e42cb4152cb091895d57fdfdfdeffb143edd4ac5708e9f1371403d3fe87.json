{"ast":null,"code":"import { MarkerType } from \"reactflow\";\n\n/**\r\n * 处理边缘配置，确保源节点和目标节点方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 处理后的边缘对象\r\n */\nexport const processEdgeConfig = edge => {\n  if (!edge) return null;\n\n  // 确保边缘有数据对象\n  const edgeData = edge.data || {};\n  const connectionType = edgeData.connectionType || \"arrow\";\n  const needsArrow = connectionType === \"arrow\";\n\n  // 确保保留源节点和目标节点的正确方向\n  return {\n    ...edge,\n    // 确保保留现有的markerEnd配置或创建新的\n    markerEnd: edge.markerEnd || (needsArrow ? {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: \"hsl(var(--primary))\"\n    } : undefined),\n    data: {\n      ...edgeData,\n      connectionType,\n      // 显式存储源和目标信息以确保方向一致性\n      sourceId: edge.source,\n      targetId: edge.target,\n      sourceHandle: edge.sourceHandle || null,\n      targetHandle: edge.targetHandle || null\n    }\n  };\n};\n\n/**\r\n * 创建新的边缘连接\r\n * @param {Object} params - 连接参数\r\n * @param {string} connectionType - 连接类型 (arrow 或 none)\r\n * @returns {Object} - 创建的新边缘对象\r\n */\nexport const createEdgeConnection = (params, connectionType = \"arrow\") => {\n  if (!params.source || !params.target) {\n    console.error(\"Cannot create edge: missing source or target\");\n    return null;\n  }\n\n  // 生成唯一ID\n  const newEdgeId = `edge-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\n\n  // 确定是否需要箭头\n  const needsArrow = connectionType === \"arrow\";\n\n  // 创建边缘基本数据\n  const baseEdge = {\n    ...params,\n    id: newEdgeId,\n    type: \"smoothstep\",\n    animated: false,\n    style: {\n      stroke: \"#6d28d9\",\n      strokeWidth: 2\n    },\n    data: {\n      connectionType: connectionType,\n      // 显式存储源和目标节点信息以确保方向一致性\n      sourceId: params.source,\n      targetId: params.target,\n      sourceHandle: params.sourceHandle || null,\n      targetHandle: params.targetHandle || null\n    },\n    markerEnd: needsArrow ? {\n      type: MarkerType.ArrowClosed,\n      width: 20,\n      height: 20,\n      color: \"hsl(var(--primary))\"\n    } : undefined\n  };\n\n  // 应用处理确保一致性\n  return processEdgeConfig(baseEdge);\n};\n\n/**\r\n * 从原始边缘数据中提取关键信息用于日志记录和调试\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 包含关键信息的简化对象\r\n */\nexport const getEdgeDebugInfo = edge => {\n  var _edge$data, _edge$data2, _edge$data3;\n  if (!edge) return {\n    missing: true\n  };\n  return {\n    id: edge.id,\n    source: edge.source,\n    target: edge.target,\n    sourceId: (_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.sourceId,\n    targetId: (_edge$data2 = edge.data) === null || _edge$data2 === void 0 ? void 0 : _edge$data2.targetId,\n    connectionType: (_edge$data3 = edge.data) === null || _edge$data3 === void 0 ? void 0 : _edge$data3.connectionType,\n    hasMarkerEnd: !!edge.markerEnd\n  };\n};\n\n/**\r\n * 验证边缘方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {boolean} - 方向是否一致\r\n */\nexport const validateEdgeDirection = edge => {\n  if (!edge || !edge.data) return false;\n\n  // 检查源节点和目标节点的一致性\n  const sourceConsistent = edge.source === edge.data.sourceId;\n  const targetConsistent = edge.target === edge.data.targetId;\n  return sourceConsistent && targetConsistent;\n};","map":{"version":3,"names":["MarkerType","processEdgeConfig","edge","edgeData","data","connectionType","needsArrow","markerEnd","type","ArrowClosed","width","height","color","undefined","sourceId","source","targetId","target","sourceHandle","targetHandle","createEdgeConnection","params","console","error","newEdgeId","Date","now","Math","floor","random","baseEdge","id","animated","style","stroke","strokeWidth","getEdgeDebugInfo","_edge$data","_edge$data2","_edge$data3","missing","hasMarkerEnd","validateEdgeDirection","sourceConsistent","targetConsistent"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/utils/edgeUtils.js"],"sourcesContent":["import { MarkerType } from \"reactflow\";\r\n\r\n/**\r\n * 处理边缘配置，确保源节点和目标节点方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 处理后的边缘对象\r\n */\r\nexport const processEdgeConfig = (edge) => {\r\n  if (!edge) return null;\r\n\r\n  // 确保边缘有数据对象\r\n  const edgeData = edge.data || {};\r\n  const connectionType = edgeData.connectionType || \"arrow\";\r\n  const needsArrow = connectionType === \"arrow\";\r\n\r\n  // 确保保留源节点和目标节点的正确方向\r\n  return {\r\n    ...edge,\r\n    // 确保保留现有的markerEnd配置或创建新的\r\n    markerEnd:\r\n      edge.markerEnd ||\r\n      (needsArrow\r\n        ? {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: \"hsl(var(--primary))\",\r\n          }\r\n        : undefined),\r\n    data: {\r\n      ...edgeData,\r\n      connectionType,\r\n      // 显式存储源和目标信息以确保方向一致性\r\n      sourceId: edge.source,\r\n      targetId: edge.target,\r\n      sourceHandle: edge.sourceHandle || null,\r\n      targetHandle: edge.targetHandle || null,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * 创建新的边缘连接\r\n * @param {Object} params - 连接参数\r\n * @param {string} connectionType - 连接类型 (arrow 或 none)\r\n * @returns {Object} - 创建的新边缘对象\r\n */\r\nexport const createEdgeConnection = (params, connectionType = \"arrow\") => {\r\n  if (!params.source || !params.target) {\r\n    console.error(\"Cannot create edge: missing source or target\");\r\n    return null;\r\n  }\r\n\r\n  // 生成唯一ID\r\n  const newEdgeId = `edge-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\r\n\r\n  // 确定是否需要箭头\r\n  const needsArrow = connectionType === \"arrow\";\r\n\r\n  // 创建边缘基本数据\r\n  const baseEdge = {\r\n    ...params,\r\n    id: newEdgeId,\r\n    type: \"smoothstep\",\r\n    animated: false,\r\n    style: { stroke: \"#6d28d9\", strokeWidth: 2 },\r\n    data: {\r\n      connectionType: connectionType,\r\n      // 显式存储源和目标节点信息以确保方向一致性\r\n      sourceId: params.source,\r\n      targetId: params.target,\r\n      sourceHandle: params.sourceHandle || null,\r\n      targetHandle: params.targetHandle || null,\r\n    },\r\n    markerEnd: needsArrow\r\n      ? {\r\n          type: MarkerType.ArrowClosed,\r\n          width: 20,\r\n          height: 20,\r\n          color: \"hsl(var(--primary))\",\r\n        }\r\n      : undefined,\r\n  };\r\n\r\n  // 应用处理确保一致性\r\n  return processEdgeConfig(baseEdge);\r\n};\r\n\r\n/**\r\n * 从原始边缘数据中提取关键信息用于日志记录和调试\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 包含关键信息的简化对象\r\n */\r\nexport const getEdgeDebugInfo = (edge) => {\r\n  if (!edge) return { missing: true };\r\n\r\n  return {\r\n    id: edge.id,\r\n    source: edge.source,\r\n    target: edge.target,\r\n    sourceId: edge.data?.sourceId,\r\n    targetId: edge.data?.targetId,\r\n    connectionType: edge.data?.connectionType,\r\n    hasMarkerEnd: !!edge.markerEnd,\r\n  };\r\n};\r\n\r\n/**\r\n * 验证边缘方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {boolean} - 方向是否一致\r\n */\r\nexport const validateEdgeDirection = (edge) => {\r\n  if (!edge || !edge.data) return false;\r\n\r\n  // 检查源节点和目标节点的一致性\r\n  const sourceConsistent = edge.source === edge.data.sourceId;\r\n  const targetConsistent = edge.target === edge.data.targetId;\r\n\r\n  return sourceConsistent && targetConsistent;\r\n};\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,WAAW;;AAEtC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EACzC,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;;EAEtB;EACA,MAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAI,IAAI,CAAC,CAAC;EAChC,MAAMC,cAAc,GAAGF,QAAQ,CAACE,cAAc,IAAI,OAAO;EACzD,MAAMC,UAAU,GAAGD,cAAc,KAAK,OAAO;;EAE7C;EACA,OAAO;IACL,GAAGH,IAAI;IACP;IACAK,SAAS,EACPL,IAAI,CAACK,SAAS,KACbD,UAAU,GACP;MACEE,IAAI,EAAER,UAAU,CAACS,WAAW;MAC5BC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE;IACT,CAAC,GACDC,SAAS,CAAC;IAChBT,IAAI,EAAE;MACJ,GAAGD,QAAQ;MACXE,cAAc;MACd;MACAS,QAAQ,EAAEZ,IAAI,CAACa,MAAM;MACrBC,QAAQ,EAAEd,IAAI,CAACe,MAAM;MACrBC,YAAY,EAAEhB,IAAI,CAACgB,YAAY,IAAI,IAAI;MACvCC,YAAY,EAAEjB,IAAI,CAACiB,YAAY,IAAI;IACrC;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,MAAM,EAAEhB,cAAc,GAAG,OAAO,KAAK;EACxE,IAAI,CAACgB,MAAM,CAACN,MAAM,IAAI,CAACM,MAAM,CAACJ,MAAM,EAAE;IACpCK,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;IAC7D,OAAO,IAAI;EACb;;EAEA;EACA,MAAMC,SAAS,GAAG,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,EAAE;;EAE7E;EACA,MAAMvB,UAAU,GAAGD,cAAc,KAAK,OAAO;;EAE7C;EACA,MAAMyB,QAAQ,GAAG;IACf,GAAGT,MAAM;IACTU,EAAE,EAAEP,SAAS;IACbhB,IAAI,EAAE,YAAY;IAClBwB,QAAQ,EAAE,KAAK;IACfC,KAAK,EAAE;MAAEC,MAAM,EAAE,SAAS;MAAEC,WAAW,EAAE;IAAE,CAAC;IAC5C/B,IAAI,EAAE;MACJC,cAAc,EAAEA,cAAc;MAC9B;MACAS,QAAQ,EAAEO,MAAM,CAACN,MAAM;MACvBC,QAAQ,EAAEK,MAAM,CAACJ,MAAM;MACvBC,YAAY,EAAEG,MAAM,CAACH,YAAY,IAAI,IAAI;MACzCC,YAAY,EAAEE,MAAM,CAACF,YAAY,IAAI;IACvC,CAAC;IACDZ,SAAS,EAAED,UAAU,GACjB;MACEE,IAAI,EAAER,UAAU,CAACS,WAAW;MAC5BC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE;IACT,CAAC,GACDC;EACN,CAAC;;EAED;EACA,OAAOZ,iBAAiB,CAAC6B,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,gBAAgB,GAAIlC,IAAI,IAAK;EAAA,IAAAmC,UAAA,EAAAC,WAAA,EAAAC,WAAA;EACxC,IAAI,CAACrC,IAAI,EAAE,OAAO;IAAEsC,OAAO,EAAE;EAAK,CAAC;EAEnC,OAAO;IACLT,EAAE,EAAE7B,IAAI,CAAC6B,EAAE;IACXhB,MAAM,EAAEb,IAAI,CAACa,MAAM;IACnBE,MAAM,EAAEf,IAAI,CAACe,MAAM;IACnBH,QAAQ,GAAAuB,UAAA,GAAEnC,IAAI,CAACE,IAAI,cAAAiC,UAAA,uBAATA,UAAA,CAAWvB,QAAQ;IAC7BE,QAAQ,GAAAsB,WAAA,GAAEpC,IAAI,CAACE,IAAI,cAAAkC,WAAA,uBAATA,WAAA,CAAWtB,QAAQ;IAC7BX,cAAc,GAAAkC,WAAA,GAAErC,IAAI,CAACE,IAAI,cAAAmC,WAAA,uBAATA,WAAA,CAAWlC,cAAc;IACzCoC,YAAY,EAAE,CAAC,CAACvC,IAAI,CAACK;EACvB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMmC,qBAAqB,GAAIxC,IAAI,IAAK;EAC7C,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACE,IAAI,EAAE,OAAO,KAAK;;EAErC;EACA,MAAMuC,gBAAgB,GAAGzC,IAAI,CAACa,MAAM,KAAKb,IAAI,CAACE,IAAI,CAACU,QAAQ;EAC3D,MAAM8B,gBAAgB,GAAG1C,IAAI,CAACe,MAAM,KAAKf,IAAI,CAACE,IAAI,CAACY,QAAQ;EAE3D,OAAO2B,gBAAgB,IAAIC,gBAAgB;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}