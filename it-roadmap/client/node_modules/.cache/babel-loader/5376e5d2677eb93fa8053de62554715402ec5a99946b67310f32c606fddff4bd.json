{"ast":null,"code":"import api from \"./api\";\n\n// Get all roadmaps\nexport const getRoadmaps = async () => {\n  const response = await api.get(\"/roadmaps\");\n  return response.data;\n};\n\n// Get roadmap by ID\nexport const getRoadmapById = async id => {\n  const response = await api.get(`/roadmaps/${id}`);\n  // Format data to ensure consistent properties\n  const roadmapData = response.data;\n\n  // Make sure categoryName is available\n  if (roadmapData.category && !roadmapData.categoryName) {\n    roadmapData.categoryName = roadmapData.category.name;\n  }\n\n  // Make sure author info is available for backward compatibility\n  if (roadmapData.user && !roadmapData.author) {\n    roadmapData.author = roadmapData.user.username;\n  }\n  return roadmapData;\n};\n\n// Create new roadmap\nexport const createRoadmap = async roadmapData => {\n  const response = await api.post(\"/roadmaps\", roadmapData);\n  return response.data;\n};\n\n// Update roadmap\nexport const updateRoadmap = async (id, roadmapData) => {\n  const response = await api.put(`/roadmaps/${id}`, roadmapData);\n  return response.data;\n};\n\n// Delete roadmap\nexport const deleteRoadmap = async id => {\n  const response = await api.delete(`/roadmaps/${id}`);\n  return response.data;\n};\n\n// Get roadmap nodes\nexport const getRoadmapNodes = async id => {\n  const response = await api.get(`/roadmaps/${id}/nodes`);\n\n  // Transform server-side node format to client-side format\n  const transformedNodes = response.data.map(node => {\n    try {\n      // Parse the JSON data field\n      const nodeData = node.data ? JSON.parse(node.data) : {};\n      return {\n        id: node.nodeIdentifier,\n        type: \"courseNode\",\n        // Default type for all nodes\n        position: {\n          x: node.positionX,\n          y: node.positionY\n        },\n        data: {\n          id: node.nodeIdentifier,\n          label: nodeData.label || \"\",\n          code: nodeData.code || \"\",\n          description: nodeData.description || \"\",\n          category: nodeData.category || \"\",\n          categoryId: nodeData.categoryId || null,\n          difficulty: nodeData.difficulty || \"beginner\",\n          credits: nodeData.credits || 0,\n          completed: nodeData.completed || false,\n          nodeColor: nodeData.nodeColor,\n          nodeBgColor: nodeData.nodeBgColor,\n          textColor: nodeData.textColor,\n          fontSize: nodeData.fontSize,\n          prerequisites: nodeData.prerequisites || \"\",\n          documentation: nodeData.documentation || \"\"\n        }\n      };\n    } catch (error) {\n      console.error(\"Error parsing node data:\", error);\n      return null;\n    }\n  }).filter(node => node !== null);\n  return transformedNodes;\n};\n\n// Update roadmap nodes\nexport const updateRoadmapNodes = async (id, nodes) => {\n  const response = await api.put(`/roadmaps/${id}/nodes`, {\n    nodes\n  });\n  return response.data;\n};\n\n// Get roadmap edges\nexport const getRoadmapEdges = async id => {\n  const response = await api.get(`/roadmaps/${id}/edges`);\n\n  // Transform server-side edge format to client-side format\n  const transformedEdges = response.data.map(edge => {\n    try {\n      // Parse the JSON style field\n      const edgeStyle = edge.style ? JSON.parse(edge.style) : {};\n      return {\n        id: edge.edgeIdentifier,\n        source: edge.source,\n        target: edge.target,\n        type: edge.type || \"smoothstep\",\n        animated: edge.animated || false,\n        style: {\n          stroke: edgeStyle.stroke || \"#6d28d9\",\n          strokeWidth: edgeStyle.strokeWidth || 1\n        }\n      };\n    } catch (error) {\n      console.error(\"Error parsing edge data:\", error);\n      return null;\n    }\n  }).filter(edge => edge !== null);\n  return transformedEdges;\n};\n\n// Update roadmap edges\nexport const updateRoadmapEdges = async (id, edges) => {\n  const response = await api.put(`/roadmaps/${id}/edges`, {\n    edges\n  });\n  return response.data;\n};\n\n// Toggle favorite roadmap\nexport const toggleFavoriteRoadmap = async id => {\n  const response = await api.post(`/roadmaps/${id}/favorite`);\n  return response.data;\n};\n\n// Get user favorites\nexport const getUserFavorites = async () => {\n  const response = await api.get(\"/roadmaps/favorites\");\n  return response.data;\n};","map":{"version":3,"names":["api","getRoadmaps","response","get","data","getRoadmapById","id","roadmapData","category","categoryName","name","user","author","username","createRoadmap","post","updateRoadmap","put","deleteRoadmap","delete","getRoadmapNodes","transformedNodes","map","node","nodeData","JSON","parse","nodeIdentifier","type","position","x","positionX","y","positionY","label","code","description","categoryId","difficulty","credits","completed","nodeColor","nodeBgColor","textColor","fontSize","prerequisites","documentation","error","console","filter","updateRoadmapNodes","nodes","getRoadmapEdges","transformedEdges","edge","edgeStyle","style","edgeIdentifier","source","target","animated","stroke","strokeWidth","updateRoadmapEdges","edges","toggleFavoriteRoadmap","getUserFavorites"],"sources":["D:/CyberPath/it-roadmap/client/src/services/roadmapService.js"],"sourcesContent":["import api from \"./api\";\n\n// Get all roadmaps\nexport const getRoadmaps = async () => {\n  const response = await api.get(\"/roadmaps\");\n  return response.data;\n};\n\n// Get roadmap by ID\nexport const getRoadmapById = async (id) => {\n  const response = await api.get(`/roadmaps/${id}`);\n  // Format data to ensure consistent properties\n  const roadmapData = response.data;\n\n  // Make sure categoryName is available\n  if (roadmapData.category && !roadmapData.categoryName) {\n    roadmapData.categoryName = roadmapData.category.name;\n  }\n\n  // Make sure author info is available for backward compatibility\n  if (roadmapData.user && !roadmapData.author) {\n    roadmapData.author = roadmapData.user.username;\n  }\n\n  return roadmapData;\n};\n\n// Create new roadmap\nexport const createRoadmap = async (roadmapData) => {\n  const response = await api.post(\"/roadmaps\", roadmapData);\n  return response.data;\n};\n\n// Update roadmap\nexport const updateRoadmap = async (id, roadmapData) => {\n  const response = await api.put(`/roadmaps/${id}`, roadmapData);\n  return response.data;\n};\n\n// Delete roadmap\nexport const deleteRoadmap = async (id) => {\n  const response = await api.delete(`/roadmaps/${id}`);\n  return response.data;\n};\n\n// Get roadmap nodes\nexport const getRoadmapNodes = async (id) => {\n  const response = await api.get(`/roadmaps/${id}/nodes`);\n\n  // Transform server-side node format to client-side format\n  const transformedNodes = response.data\n    .map((node) => {\n      try {\n        // Parse the JSON data field\n        const nodeData = node.data ? JSON.parse(node.data) : {};\n\n        return {\n          id: node.nodeIdentifier,\n          type: \"courseNode\", // Default type for all nodes\n          position: {\n            x: node.positionX,\n            y: node.positionY,\n          },\n          data: {\n            id: node.nodeIdentifier,\n            label: nodeData.label || \"\",\n            code: nodeData.code || \"\",\n            description: nodeData.description || \"\",\n            category: nodeData.category || \"\",\n            categoryId: nodeData.categoryId || null,\n            difficulty: nodeData.difficulty || \"beginner\",\n            credits: nodeData.credits || 0,\n            completed: nodeData.completed || false,\n            nodeColor: nodeData.nodeColor,\n            nodeBgColor: nodeData.nodeBgColor,\n            textColor: nodeData.textColor,\n            fontSize: nodeData.fontSize,\n            prerequisites: nodeData.prerequisites || \"\",\n            documentation: nodeData.documentation || \"\",\n          },\n        };\n      } catch (error) {\n        console.error(\"Error parsing node data:\", error);\n        return null;\n      }\n    })\n    .filter((node) => node !== null);\n\n  return transformedNodes;\n};\n\n// Update roadmap nodes\nexport const updateRoadmapNodes = async (id, nodes) => {\n  const response = await api.put(`/roadmaps/${id}/nodes`, { nodes });\n  return response.data;\n};\n\n// Get roadmap edges\nexport const getRoadmapEdges = async (id) => {\n  const response = await api.get(`/roadmaps/${id}/edges`);\n\n  // Transform server-side edge format to client-side format\n  const transformedEdges = response.data\n    .map((edge) => {\n      try {\n        // Parse the JSON style field\n        const edgeStyle = edge.style ? JSON.parse(edge.style) : {};\n\n        return {\n          id: edge.edgeIdentifier,\n          source: edge.source,\n          target: edge.target,\n          type: edge.type || \"smoothstep\",\n          animated: edge.animated || false,\n          style: {\n            stroke: edgeStyle.stroke || \"#6d28d9\",\n            strokeWidth: edgeStyle.strokeWidth || 1,\n          },\n        };\n      } catch (error) {\n        console.error(\"Error parsing edge data:\", error);\n        return null;\n      }\n    })\n    .filter((edge) => edge !== null);\n\n  return transformedEdges;\n};\n\n// Update roadmap edges\nexport const updateRoadmapEdges = async (id, edges) => {\n  const response = await api.put(`/roadmaps/${id}/edges`, { edges });\n  return response.data;\n};\n\n// Toggle favorite roadmap\nexport const toggleFavoriteRoadmap = async (id) => {\n  const response = await api.post(`/roadmaps/${id}/favorite`);\n  return response.data;\n};\n\n// Get user favorites\nexport const getUserFavorites = async () => {\n  const response = await api.get(\"/roadmaps/favorites\");\n  return response.data;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}