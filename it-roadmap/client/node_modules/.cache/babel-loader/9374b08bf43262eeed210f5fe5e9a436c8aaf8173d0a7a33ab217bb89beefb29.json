{"ast":null,"code":"import axios from \"axios\";\n\n// Base URL for API requests\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// 已处理的401错误标识，避免循环重定向\nlet isHandlingAuth = false;\n// 最后一次401错误的时间戳，用于防止短时间内多次触发\nlet lastAuthErrorTimestamp = 0;\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  // 全局请求超时设置\n  timeout: 10000\n});\n\n// Add a request interceptor to add the auth token to every request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    // Use Authorization Bearer header (standard JWT auth)\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle token expiration\napi.interceptors.response.use(response => response, error => {\n  // 检查错误响应是否存在\n  if (error.response) {\n    // 处理401未授权错误（令牌过期、无效）\n    if (error.response.status === 401) {\n      const currentTime = Date.now();\n      // 防止在5秒内多次处理401错误\n      if (!isHandlingAuth && currentTime - lastAuthErrorTimestamp > 5000) {\n        var _error$response, _error$response$data;\n        isHandlingAuth = true;\n        lastAuthErrorTimestamp = currentTime;\n        console.log(\"Auth error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.code) || \"未知认证错误\");\n\n        // 清除本地存储的令牌\n        localStorage.removeItem(\"token\");\n\n        // 如果是在开发模式下，也清除开发模式用户数据\n        if (localStorage.getItem(\"devMode\") === \"true\") {\n          localStorage.removeItem(\"devModeUser\");\n        }\n\n        // 清除API默认请求头中的Authorization\n        delete api.defaults.headers.common[\"Authorization\"];\n\n        // 重定向到登录页面，但避免循环重定向\n        const currentPath = window.location.pathname;\n        if (!currentPath.includes(\"/login\") && !currentPath.includes(\"/register\")) {\n          var _error$response$data2;\n          // 在浏览器控制台中显示明确的错误信息\n          console.error(\"身份验证失败：\", ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || \"会话已过期，请重新登录\");\n\n          // 延迟重定向，避免可能的渲染问题\n          setTimeout(() => {\n            window.location.href = \"/login\";\n            isHandlingAuth = false;\n          }, 300);\n        } else {\n          isHandlingAuth = false;\n        }\n      }\n    }\n\n    // 处理服务器错误\n    else if (error.response.status >= 500) {\n      console.error(\"服务器错误:\", error.response.data);\n    }\n  } else if (error.request) {\n    // 请求已发送但没有收到响应\n    console.error(\"网络错误: 服务器无响应\", error.request);\n  } else {\n    // 请求配置出错\n    console.error(\"请求错误:\", error.message);\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","isHandlingAuth","lastAuthErrorTimestamp","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","currentTime","Date","now","_error$response","_error$response$data","console","log","data","code","removeItem","defaults","common","currentPath","window","location","pathname","includes","_error$response$data2","message","setTimeout","href"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Base URL for API requests\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// 已处理的401错误标识，避免循环重定向\r\nlet isHandlingAuth = false;\r\n// 最后一次401错误的时间戳，用于防止短时间内多次触发\r\nlet lastAuthErrorTimestamp = 0;\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  // 全局请求超时设置\r\n  timeout: 10000,\r\n});\r\n\r\n// Add a request interceptor to add the auth token to every request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      // Use Authorization Bearer header (standard JWT auth)\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // 检查错误响应是否存在\r\n    if (error.response) {\r\n      // 处理401未授权错误（令牌过期、无效）\r\n      if (error.response.status === 401) {\r\n        const currentTime = Date.now();\r\n        // 防止在5秒内多次处理401错误\r\n        if (!isHandlingAuth && currentTime - lastAuthErrorTimestamp > 5000) {\r\n          isHandlingAuth = true;\r\n          lastAuthErrorTimestamp = currentTime;\r\n\r\n          console.log(\r\n            \"Auth error:\",\r\n            error.response?.data?.code || \"未知认证错误\"\r\n          );\r\n\r\n          // 清除本地存储的令牌\r\n          localStorage.removeItem(\"token\");\r\n\r\n          // 如果是在开发模式下，也清除开发模式用户数据\r\n          if (localStorage.getItem(\"devMode\") === \"true\") {\r\n            localStorage.removeItem(\"devModeUser\");\r\n          }\r\n\r\n          // 清除API默认请求头中的Authorization\r\n          delete api.defaults.headers.common[\"Authorization\"];\r\n\r\n          // 重定向到登录页面，但避免循环重定向\r\n          const currentPath = window.location.pathname;\r\n          if (\r\n            !currentPath.includes(\"/login\") &&\r\n            !currentPath.includes(\"/register\")\r\n          ) {\r\n            // 在浏览器控制台中显示明确的错误信息\r\n            console.error(\r\n              \"身份验证失败：\",\r\n              error.response.data?.message || \"会话已过期，请重新登录\"\r\n            );\r\n\r\n            // 延迟重定向，避免可能的渲染问题\r\n            setTimeout(() => {\r\n              window.location.href = \"/login\";\r\n              isHandlingAuth = false;\r\n            }, 300);\r\n          } else {\r\n            isHandlingAuth = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 处理服务器错误\r\n      else if (error.response.status >= 500) {\r\n        console.error(\"服务器错误:\", error.response.data);\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发送但没有收到响应\r\n      console.error(\"网络错误: 服务器无响应\", error.request);\r\n    } else {\r\n      // 请求配置出错\r\n      console.error(\"请求错误:\", error.message);\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}