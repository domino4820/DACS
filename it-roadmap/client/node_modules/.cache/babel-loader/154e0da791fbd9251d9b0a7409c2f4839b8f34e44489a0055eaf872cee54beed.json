{"ast":null,"code":"import axios from\"axios\";// Base URL for API requests\nconst API_URL=process.env.REACT_APP_API_URL||\"http://localhost:5000/api\";// 已处理的401错误标识，避免循环重定向\nlet isHandlingAuth=false;// 最后一次401错误的时间戳，用于防止短时间内多次触发\nlet lastAuthErrorTimestamp=0;// Create axios instance\nconst api=axios.create({baseURL:API_URL,headers:{\"Content-Type\":\"application/json\"},// 全局请求超时设置\ntimeout:10000});// Add a request interceptor to add the auth token to every request\napi.interceptors.request.use(config=>{const token=localStorage.getItem(\"token\");if(token){// Use Authorization Bearer header (standard JWT auth)\nconfig.headers[\"Authorization\"]=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Add a response interceptor to handle token expiration\napi.interceptors.response.use(response=>response,error=>{// 检查错误响应是否存在\nif(error.response){// 处理401未授权错误（令牌过期、无效）\nif(error.response.status===401){const currentTime=Date.now();// 防止在5秒内多次处理401错误\nif(!isHandlingAuth&&currentTime-lastAuthErrorTimestamp>5000){var _error$response,_error$response$data;isHandlingAuth=true;lastAuthErrorTimestamp=currentTime;console.log(\"Auth error:\",((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.code)||\"未知认证错误\");// 清除本地存储的令牌\nlocalStorage.removeItem(\"token\");// 如果是在开发模式下，也清除开发模式用户数据\nif(localStorage.getItem(\"devMode\")===\"true\"){localStorage.removeItem(\"devModeUser\");}// 清除API默认请求头中的Authorization\ndelete api.defaults.headers.common[\"Authorization\"];// 重定向到登录页面，但避免循环重定向\nconst currentPath=window.location.pathname;if(!currentPath.includes(\"/login\")&&!currentPath.includes(\"/register\")){var _error$response$data2;// 在浏览器控制台中显示明确的错误信息\nconsole.error(\"身份验证失败：\",((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.message)||\"会话已过期，请重新登录\");// 延迟重定向，避免可能的渲染问题\nsetTimeout(()=>{window.location.href=\"/login\";isHandlingAuth=false;},300);}else{isHandlingAuth=false;}}}// 处理服务器错误\nelse if(error.response.status>=500){console.error(\"服务器错误:\",error.response.data);}}else if(error.request){// 请求已发送但没有收到响应\nconsole.error(\"网络错误: 服务器无响应\",error.request);}else{// 请求配置出错\nconsole.error(\"请求错误:\",error.message);}return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","isHandlingAuth","lastAuthErrorTimestamp","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","concat","error","Promise","reject","response","status","currentTime","Date","now","_error$response","_error$response$data","console","log","data","code","removeItem","defaults","common","currentPath","window","location","pathname","includes","_error$response$data2","message","setTimeout","href"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Base URL for API requests\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// 已处理的401错误标识，避免循环重定向\r\nlet isHandlingAuth = false;\r\n// 最后一次401错误的时间戳，用于防止短时间内多次触发\r\nlet lastAuthErrorTimestamp = 0;\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  // 全局请求超时设置\r\n  timeout: 10000,\r\n});\r\n\r\n// Add a request interceptor to add the auth token to every request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      // Use Authorization Bearer header (standard JWT auth)\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // 检查错误响应是否存在\r\n    if (error.response) {\r\n      // 处理401未授权错误（令牌过期、无效）\r\n      if (error.response.status === 401) {\r\n        const currentTime = Date.now();\r\n        // 防止在5秒内多次处理401错误\r\n        if (!isHandlingAuth && currentTime - lastAuthErrorTimestamp > 5000) {\r\n          isHandlingAuth = true;\r\n          lastAuthErrorTimestamp = currentTime;\r\n\r\n          console.log(\r\n            \"Auth error:\",\r\n            error.response?.data?.code || \"未知认证错误\"\r\n          );\r\n\r\n          // 清除本地存储的令牌\r\n          localStorage.removeItem(\"token\");\r\n\r\n          // 如果是在开发模式下，也清除开发模式用户数据\r\n          if (localStorage.getItem(\"devMode\") === \"true\") {\r\n            localStorage.removeItem(\"devModeUser\");\r\n          }\r\n\r\n          // 清除API默认请求头中的Authorization\r\n          delete api.defaults.headers.common[\"Authorization\"];\r\n\r\n          // 重定向到登录页面，但避免循环重定向\r\n          const currentPath = window.location.pathname;\r\n          if (\r\n            !currentPath.includes(\"/login\") &&\r\n            !currentPath.includes(\"/register\")\r\n          ) {\r\n            // 在浏览器控制台中显示明确的错误信息\r\n            console.error(\r\n              \"身份验证失败：\",\r\n              error.response.data?.message || \"会话已过期，请重新登录\"\r\n            );\r\n\r\n            // 延迟重定向，避免可能的渲染问题\r\n            setTimeout(() => {\r\n              window.location.href = \"/login\";\r\n              isHandlingAuth = false;\r\n            }, 300);\r\n          } else {\r\n            isHandlingAuth = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 处理服务器错误\r\n      else if (error.response.status >= 500) {\r\n        console.error(\"服务器错误:\", error.response.data);\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发送但没有收到响应\r\n      console.error(\"网络错误: 服务器无响应\", error.request);\r\n    } else {\r\n      // 请求配置出错\r\n      console.error(\"请求错误:\", error.message);\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}