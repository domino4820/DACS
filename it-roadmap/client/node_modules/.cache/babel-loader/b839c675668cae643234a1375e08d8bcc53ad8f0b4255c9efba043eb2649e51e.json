{"ast":null,"code":"import api from \"./api\";\n\n// Get course with full roadmap data (nodes and edges)\nexport const getCourseRoadmap = async courseId => {\n  try {\n    console.log(`Fetching roadmap data for course ${courseId}`);\n\n    // Get the course data\n    const courseResponse = await api.get(`/courses/${courseId}`);\n    const courseData = courseResponse.data;\n\n    // Check if this course has an associated roadmap\n    let roadmapId = courseData.roadmapId;\n    let nodes = [];\n    let edges = [];\n\n    // If there's a roadmap associated, get its nodes and edges\n    if (roadmapId) {\n      console.log(`Course has roadmap ID: ${roadmapId}, fetching roadmap data`);\n      try {\n        // Get the roadmap data\n        const roadmapResponse = await api.get(`/roadmaps/${roadmapId}`);\n        const roadmapData = roadmapResponse.data;\n\n        // Get nodes from the roadmap\n        const nodesResponse = await api.get(`/roadmaps/${roadmapId}/nodes`);\n        if (nodesResponse.data && Array.isArray(nodesResponse.data)) {\n          nodes = transformNodesToClientFormat(nodesResponse.data);\n        }\n\n        // Get edges from the roadmap\n        const edgesResponse = await api.get(`/roadmaps/${roadmapId}/edges`);\n        if (edgesResponse.data && Array.isArray(edgesResponse.data)) {\n          edges = transformEdgesToClientFormat(edgesResponse.data);\n        }\n        console.log(`Got ${nodes.length} nodes and ${edges.length} edges from roadmap ${roadmapId}`);\n      } catch (error) {\n        console.error(`Error fetching roadmap ${roadmapId} data:`, error);\n        // Continue with empty nodes/edges\n      }\n    } else {\n      console.log(`Course ${courseId} has no associated roadmap yet`);\n    }\n\n    // Combine all data\n    const roadmapData = {\n      ...courseData,\n      nodes,\n      edges\n    };\n    console.log(`Got roadmap data for course ${courseId}:`, roadmapData);\n    return roadmapData;\n  } catch (error) {\n    console.error(`Error fetching roadmap for course ${courseId}:`, error);\n    throw error;\n  }\n};\n\n// Save course roadmap data (nodes and edges)\nexport const saveCourseRoadmap = async (courseId, roadmapData) => {\n  try {\n    console.log(`Saving roadmap data for course ${courseId}`);\n    if (!courseId || isNaN(Number(courseId))) {\n      throw new Error(`Invalid course ID: ${courseId}`);\n    }\n    const numericCourseId = Number(courseId);\n    const {\n      nodes,\n      edges\n    } = roadmapData;\n    console.log(\"Received nodes:\", nodes);\n    console.log(\"Received edges:\", edges);\n\n    // Validate nodes and edges\n    if (!Array.isArray(nodes)) {\n      throw new Error(\"Nodes must be an array\");\n    }\n    if (!Array.isArray(edges)) {\n      throw new Error(\"Edges must be an array\");\n    }\n\n    // Since this is a course roadmap, we need to associate nodes and edges with a roadmap\n    // First, check if the course already has a roadmap\n    const response = await api.get(`/courses/${numericCourseId}`);\n    const courseData = response.data;\n\n    // Let's create a roadmap for this course if it doesn't exist or use the existing one\n    let roadmapId;\n\n    // Use the first roadmap we find or create a new one\n    if (courseData.roadmapId) {\n      roadmapId = courseData.roadmapId;\n      console.log(`Using existing roadmap ID: ${roadmapId}`);\n    } else {\n      // Create a new roadmap for this course\n      const roadmapResponse = await api.post(\"/roadmaps\", {\n        title: `Roadmap for ${courseData.title}`,\n        description: `Learning roadmap for course: ${courseData.title}`,\n        categoryId: courseData.categoryId,\n        skillId: courseData.skillId\n      });\n      roadmapId = roadmapResponse.data.id;\n\n      // Associate the roadmap with the course\n      await api.put(`/courses/${numericCourseId}`, {\n        roadmapId: roadmapId\n      });\n      console.log(`Created new roadmap with ID: ${roadmapId}`);\n    }\n\n    // Now properly transform the nodes and edges to include the roadmapId\n    const transformedNodes = transformNodesToServerFormat(nodes).map(node => ({\n      ...node,\n      roadmapId: roadmapId\n    }));\n    const transformedEdges = transformEdgesToServerFormat(edges).map(edge => ({\n      ...edge,\n      roadmapId: roadmapId\n    }));\n    console.log(\"Transformed nodes with roadmapId:\", transformedNodes);\n    console.log(\"Transformed edges with roadmapId:\", transformedEdges);\n\n    // Save to the roadmap endpoints instead of course endpoints\n    if (transformedNodes.length > 0) {\n      console.log(`Saving ${transformedNodes.length} nodes to roadmap ${roadmapId}`);\n      await api.post(`/roadmaps/${roadmapId}/nodes`, {\n        nodes: transformedNodes\n      });\n    } else {\n      console.log(\"No nodes to save\");\n    }\n    if (transformedEdges.length > 0) {\n      console.log(`Saving ${transformedEdges.length} edges to roadmap ${roadmapId}`);\n      await api.post(`/roadmaps/${roadmapId}/edges`, {\n        edges: transformedEdges\n      });\n    } else {\n      console.log(\"No edges to save\");\n    }\n    console.log(\"Successfully saved nodes and edges to roadmap\");\n\n    // Get updated data\n    return await getCourseRoadmap(numericCourseId);\n  } catch (error) {\n    console.error(`Error saving roadmap for course ${courseId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new course with roadmap data\nexport const createCourseWithRoadmap = async courseData => {\n  try {\n    console.log(\"Creating new course with roadmap data\");\n    const {\n      nodes,\n      edges,\n      ...courseDetails\n    } = courseData;\n\n    // Create the course first\n    const courseResponse = await api.post(\"/courses\", courseDetails);\n    const newCourse = courseResponse.data;\n    const courseId = newCourse.id;\n\n    // Then save nodes and edges if provided\n    if (nodes && nodes.length > 0 || edges && edges.length > 0) {\n      await saveCourseRoadmap(courseId, {\n        nodes,\n        edges\n      });\n    }\n\n    // Return the full course with roadmap data\n    return await getCourseRoadmap(courseId);\n  } catch (error) {\n    console.error(\"Error creating course with roadmap:\", error);\n    throw error;\n  }\n};\n\n// Transform nodes from server format to client format\nexport const transformNodesToClientFormat = nodes => {\n  return nodes.map(node => {\n    try {\n      // If node already has client format, return as is\n      if (node.type && node.position && node.data) {\n        return node;\n      }\n\n      // Parse the data if it's a string\n      let nodeData = node.data;\n      if (typeof node.data === \"string\") {\n        try {\n          nodeData = JSON.parse(node.data);\n        } catch (e) {\n          nodeData = {\n            label: node.data\n          };\n        }\n      }\n      return {\n        id: node.nodeIdentifier,\n        type: \"courseNode\",\n        // Default node type\n        position: {\n          x: node.positionX || 0,\n          y: node.positionY || 0\n        },\n        data: {\n          ...nodeData,\n          id: node.nodeIdentifier\n        }\n      };\n    } catch (error) {\n      console.error(\"Error transforming node to client format:\", error, node);\n      return null;\n    }\n  }).filter(Boolean);\n};\n\n// Transform nodes from client format to server format\nexport const transformNodesToServerFormat = nodes => {\n  if (!Array.isArray(nodes)) {\n    console.error(\"Nodes is not an array:\", nodes);\n    return [];\n  }\n  return nodes.map(node => {\n    try {\n      var _node$position, _node$position2;\n      if (!node || !node.id) {\n        console.warn(\"Invalid node object:\", node);\n        return null;\n      }\n\n      // Make sure position exists and has valid x, y values\n      const posX = ((_node$position = node.position) === null || _node$position === void 0 ? void 0 : _node$position.x) || 0;\n      const posY = ((_node$position2 = node.position) === null || _node$position2 === void 0 ? void 0 : _node$position2.y) || 0;\n\n      // Ensure data is properly converted to string if it's an object\n      let nodeData;\n      if (typeof node.data === \"string\") {\n        nodeData = node.data;\n      } else if (typeof node.data === \"object\") {\n        try {\n          nodeData = JSON.stringify(node.data || {});\n        } catch (e) {\n          console.error(\"Error stringifying node data:\", e);\n          nodeData = JSON.stringify({\n            label: \"Error parsing data\"\n          });\n        }\n      } else {\n        nodeData = JSON.stringify({\n          label: \"Untitled\"\n        });\n      }\n      return {\n        nodeIdentifier: node.id,\n        positionX: posX,\n        positionY: posY,\n        data: nodeData\n      };\n    } catch (error) {\n      console.error(\"Error transforming node to server format:\", error, node);\n      return null;\n    }\n  }).filter(Boolean);\n};\n\n// Transform edges from server format to client format\nexport const transformEdgesToClientFormat = edges => {\n  return edges.map(edge => {\n    try {\n      // If edge already has client format, return as is\n      if (edge.source && edge.target && edge.id) {\n        return edge;\n      }\n\n      // Parse the style if it's a string\n      let style = {};\n      if (edge.style) {\n        try {\n          if (typeof edge.style === \"string\") {\n            style = JSON.parse(edge.style);\n          } else if (typeof edge.style === \"object\") {\n            style = edge.style;\n          }\n        } catch (e) {\n          style = {};\n        }\n      }\n      return {\n        id: edge.edgeIdentifier,\n        source: edge.source,\n        target: edge.target,\n        type: edge.type || \"smoothstep\",\n        animated: edge.animated || false,\n        style: {\n          stroke: style.stroke || \"#6d28d9\",\n          strokeWidth: style.strokeWidth || 1,\n          ...style\n        }\n      };\n    } catch (error) {\n      console.error(\"Error transforming edge to client format:\", error, edge);\n      return null;\n    }\n  }).filter(Boolean);\n};\n\n// Transform edges from client format to server format\nexport const transformEdgesToServerFormat = edges => {\n  if (!Array.isArray(edges)) {\n    console.error(\"Edges is not an array:\", edges);\n    return [];\n  }\n  return edges.map(edge => {\n    try {\n      if (!edge || !edge.id || !edge.source || !edge.target) {\n        console.warn(\"Invalid edge object:\", edge);\n        return null;\n      }\n\n      // Ensure style is properly converted to string if it's an object\n      let edgeStyle;\n      if (typeof edge.style === \"string\") {\n        edgeStyle = edge.style;\n      } else if (typeof edge.style === \"object\") {\n        try {\n          edgeStyle = JSON.stringify(edge.style || {});\n        } catch (e) {\n          console.error(\"Error stringifying edge style:\", e);\n          edgeStyle = JSON.stringify({});\n        }\n      } else {\n        edgeStyle = JSON.stringify({});\n      }\n      return {\n        edgeIdentifier: edge.id,\n        source: edge.source,\n        target: edge.target,\n        type: edge.type || \"smoothstep\",\n        animated: Boolean(edge.animated),\n        style: edgeStyle\n      };\n    } catch (error) {\n      console.error(\"Error transforming edge to server format:\", error, edge);\n      return null;\n    }\n  }).filter(Boolean);\n};\nexport default {\n  getCourseRoadmap,\n  saveCourseRoadmap,\n  createCourseWithRoadmap,\n  transformNodesToClientFormat,\n  transformNodesToServerFormat,\n  transformEdgesToClientFormat,\n  transformEdgesToServerFormat\n};","map":{"version":3,"names":["api","getCourseRoadmap","courseId","console","log","courseResponse","get","courseData","data","roadmapId","nodes","edges","roadmapResponse","roadmapData","nodesResponse","Array","isArray","transformNodesToClientFormat","edgesResponse","transformEdgesToClientFormat","length","error","saveCourseRoadmap","isNaN","Number","Error","numericCourseId","response","post","title","description","categoryId","skillId","id","put","transformedNodes","transformNodesToServerFormat","map","node","transformedEdges","transformEdgesToServerFormat","edge","createCourseWithRoadmap","courseDetails","newCourse","type","position","nodeData","JSON","parse","e","label","nodeIdentifier","x","positionX","y","positionY","filter","Boolean","_node$position","_node$position2","warn","posX","posY","stringify","source","target","style","edgeIdentifier","animated","stroke","strokeWidth","edgeStyle"],"sources":["D:/CyberPath/it-roadmap/client/src/services/courseRoadmapService.js"],"sourcesContent":["import api from \"./api\";\r\n\r\n// Get course with full roadmap data (nodes and edges)\r\nexport const getCourseRoadmap = async (courseId) => {\r\n  try {\r\n    console.log(`Fetching roadmap data for course ${courseId}`);\r\n\r\n    // Get the course data\r\n    const courseResponse = await api.get(`/courses/${courseId}`);\r\n    const courseData = courseResponse.data;\r\n\r\n    // Check if this course has an associated roadmap\r\n    let roadmapId = courseData.roadmapId;\r\n    let nodes = [];\r\n    let edges = [];\r\n\r\n    // If there's a roadmap associated, get its nodes and edges\r\n    if (roadmapId) {\r\n      console.log(`Course has roadmap ID: ${roadmapId}, fetching roadmap data`);\r\n\r\n      try {\r\n        // Get the roadmap data\r\n        const roadmapResponse = await api.get(`/roadmaps/${roadmapId}`);\r\n        const roadmapData = roadmapResponse.data;\r\n\r\n        // Get nodes from the roadmap\r\n        const nodesResponse = await api.get(`/roadmaps/${roadmapId}/nodes`);\r\n        if (nodesResponse.data && Array.isArray(nodesResponse.data)) {\r\n          nodes = transformNodesToClientFormat(nodesResponse.data);\r\n        }\r\n\r\n        // Get edges from the roadmap\r\n        const edgesResponse = await api.get(`/roadmaps/${roadmapId}/edges`);\r\n        if (edgesResponse.data && Array.isArray(edgesResponse.data)) {\r\n          edges = transformEdgesToClientFormat(edgesResponse.data);\r\n        }\r\n\r\n        console.log(\r\n          `Got ${nodes.length} nodes and ${edges.length} edges from roadmap ${roadmapId}`\r\n        );\r\n      } catch (error) {\r\n        console.error(`Error fetching roadmap ${roadmapId} data:`, error);\r\n        // Continue with empty nodes/edges\r\n      }\r\n    } else {\r\n      console.log(`Course ${courseId} has no associated roadmap yet`);\r\n    }\r\n\r\n    // Combine all data\r\n    const roadmapData = {\r\n      ...courseData,\r\n      nodes,\r\n      edges,\r\n    };\r\n\r\n    console.log(`Got roadmap data for course ${courseId}:`, roadmapData);\r\n    return roadmapData;\r\n  } catch (error) {\r\n    console.error(`Error fetching roadmap for course ${courseId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Save course roadmap data (nodes and edges)\r\nexport const saveCourseRoadmap = async (courseId, roadmapData) => {\r\n  try {\r\n    console.log(`Saving roadmap data for course ${courseId}`);\r\n\r\n    if (!courseId || isNaN(Number(courseId))) {\r\n      throw new Error(`Invalid course ID: ${courseId}`);\r\n    }\r\n\r\n    const numericCourseId = Number(courseId);\r\n    const { nodes, edges } = roadmapData;\r\n\r\n    console.log(\"Received nodes:\", nodes);\r\n    console.log(\"Received edges:\", edges);\r\n\r\n    // Validate nodes and edges\r\n    if (!Array.isArray(nodes)) {\r\n      throw new Error(\"Nodes must be an array\");\r\n    }\r\n\r\n    if (!Array.isArray(edges)) {\r\n      throw new Error(\"Edges must be an array\");\r\n    }\r\n\r\n    // Since this is a course roadmap, we need to associate nodes and edges with a roadmap\r\n    // First, check if the course already has a roadmap\r\n    const response = await api.get(`/courses/${numericCourseId}`);\r\n    const courseData = response.data;\r\n\r\n    // Let's create a roadmap for this course if it doesn't exist or use the existing one\r\n    let roadmapId;\r\n\r\n    // Use the first roadmap we find or create a new one\r\n    if (courseData.roadmapId) {\r\n      roadmapId = courseData.roadmapId;\r\n      console.log(`Using existing roadmap ID: ${roadmapId}`);\r\n    } else {\r\n      // Create a new roadmap for this course\r\n      const roadmapResponse = await api.post(\"/roadmaps\", {\r\n        title: `Roadmap for ${courseData.title}`,\r\n        description: `Learning roadmap for course: ${courseData.title}`,\r\n        categoryId: courseData.categoryId,\r\n        skillId: courseData.skillId,\r\n      });\r\n\r\n      roadmapId = roadmapResponse.data.id;\r\n\r\n      // Associate the roadmap with the course\r\n      await api.put(`/courses/${numericCourseId}`, {\r\n        roadmapId: roadmapId,\r\n      });\r\n\r\n      console.log(`Created new roadmap with ID: ${roadmapId}`);\r\n    }\r\n\r\n    // Now properly transform the nodes and edges to include the roadmapId\r\n    const transformedNodes = transformNodesToServerFormat(nodes).map(\r\n      (node) => ({\r\n        ...node,\r\n        roadmapId: roadmapId,\r\n      })\r\n    );\r\n\r\n    const transformedEdges = transformEdgesToServerFormat(edges).map(\r\n      (edge) => ({\r\n        ...edge,\r\n        roadmapId: roadmapId,\r\n      })\r\n    );\r\n\r\n    console.log(\"Transformed nodes with roadmapId:\", transformedNodes);\r\n    console.log(\"Transformed edges with roadmapId:\", transformedEdges);\r\n\r\n    // Save to the roadmap endpoints instead of course endpoints\r\n    if (transformedNodes.length > 0) {\r\n      console.log(\r\n        `Saving ${transformedNodes.length} nodes to roadmap ${roadmapId}`\r\n      );\r\n      await api.post(`/roadmaps/${roadmapId}/nodes`, {\r\n        nodes: transformedNodes,\r\n      });\r\n    } else {\r\n      console.log(\"No nodes to save\");\r\n    }\r\n\r\n    if (transformedEdges.length > 0) {\r\n      console.log(\r\n        `Saving ${transformedEdges.length} edges to roadmap ${roadmapId}`\r\n      );\r\n      await api.post(`/roadmaps/${roadmapId}/edges`, {\r\n        edges: transformedEdges,\r\n      });\r\n    } else {\r\n      console.log(\"No edges to save\");\r\n    }\r\n\r\n    console.log(\"Successfully saved nodes and edges to roadmap\");\r\n\r\n    // Get updated data\r\n    return await getCourseRoadmap(numericCourseId);\r\n  } catch (error) {\r\n    console.error(`Error saving roadmap for course ${courseId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new course with roadmap data\r\nexport const createCourseWithRoadmap = async (courseData) => {\r\n  try {\r\n    console.log(\"Creating new course with roadmap data\");\r\n    const { nodes, edges, ...courseDetails } = courseData;\r\n\r\n    // Create the course first\r\n    const courseResponse = await api.post(\"/courses\", courseDetails);\r\n    const newCourse = courseResponse.data;\r\n    const courseId = newCourse.id;\r\n\r\n    // Then save nodes and edges if provided\r\n    if ((nodes && nodes.length > 0) || (edges && edges.length > 0)) {\r\n      await saveCourseRoadmap(courseId, { nodes, edges });\r\n    }\r\n\r\n    // Return the full course with roadmap data\r\n    return await getCourseRoadmap(courseId);\r\n  } catch (error) {\r\n    console.error(\"Error creating course with roadmap:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Transform nodes from server format to client format\r\nexport const transformNodesToClientFormat = (nodes) => {\r\n  return nodes\r\n    .map((node) => {\r\n      try {\r\n        // If node already has client format, return as is\r\n        if (node.type && node.position && node.data) {\r\n          return node;\r\n        }\r\n\r\n        // Parse the data if it's a string\r\n        let nodeData = node.data;\r\n        if (typeof node.data === \"string\") {\r\n          try {\r\n            nodeData = JSON.parse(node.data);\r\n          } catch (e) {\r\n            nodeData = { label: node.data };\r\n          }\r\n        }\r\n\r\n        return {\r\n          id: node.nodeIdentifier,\r\n          type: \"courseNode\", // Default node type\r\n          position: {\r\n            x: node.positionX || 0,\r\n            y: node.positionY || 0,\r\n          },\r\n          data: {\r\n            ...nodeData,\r\n            id: node.nodeIdentifier,\r\n          },\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error transforming node to client format:\", error, node);\r\n        return null;\r\n      }\r\n    })\r\n    .filter(Boolean);\r\n};\r\n\r\n// Transform nodes from client format to server format\r\nexport const transformNodesToServerFormat = (nodes) => {\r\n  if (!Array.isArray(nodes)) {\r\n    console.error(\"Nodes is not an array:\", nodes);\r\n    return [];\r\n  }\r\n\r\n  return nodes\r\n    .map((node) => {\r\n      try {\r\n        if (!node || !node.id) {\r\n          console.warn(\"Invalid node object:\", node);\r\n          return null;\r\n        }\r\n\r\n        // Make sure position exists and has valid x, y values\r\n        const posX = node.position?.x || 0;\r\n        const posY = node.position?.y || 0;\r\n\r\n        // Ensure data is properly converted to string if it's an object\r\n        let nodeData;\r\n        if (typeof node.data === \"string\") {\r\n          nodeData = node.data;\r\n        } else if (typeof node.data === \"object\") {\r\n          try {\r\n            nodeData = JSON.stringify(node.data || {});\r\n          } catch (e) {\r\n            console.error(\"Error stringifying node data:\", e);\r\n            nodeData = JSON.stringify({ label: \"Error parsing data\" });\r\n          }\r\n        } else {\r\n          nodeData = JSON.stringify({ label: \"Untitled\" });\r\n        }\r\n\r\n        return {\r\n          nodeIdentifier: node.id,\r\n          positionX: posX,\r\n          positionY: posY,\r\n          data: nodeData,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error transforming node to server format:\", error, node);\r\n        return null;\r\n      }\r\n    })\r\n    .filter(Boolean);\r\n};\r\n\r\n// Transform edges from server format to client format\r\nexport const transformEdgesToClientFormat = (edges) => {\r\n  return edges\r\n    .map((edge) => {\r\n      try {\r\n        // If edge already has client format, return as is\r\n        if (edge.source && edge.target && edge.id) {\r\n          return edge;\r\n        }\r\n\r\n        // Parse the style if it's a string\r\n        let style = {};\r\n        if (edge.style) {\r\n          try {\r\n            if (typeof edge.style === \"string\") {\r\n              style = JSON.parse(edge.style);\r\n            } else if (typeof edge.style === \"object\") {\r\n              style = edge.style;\r\n            }\r\n          } catch (e) {\r\n            style = {};\r\n          }\r\n        }\r\n\r\n        return {\r\n          id: edge.edgeIdentifier,\r\n          source: edge.source,\r\n          target: edge.target,\r\n          type: edge.type || \"smoothstep\",\r\n          animated: edge.animated || false,\r\n          style: {\r\n            stroke: style.stroke || \"#6d28d9\",\r\n            strokeWidth: style.strokeWidth || 1,\r\n            ...style,\r\n          },\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error transforming edge to client format:\", error, edge);\r\n        return null;\r\n      }\r\n    })\r\n    .filter(Boolean);\r\n};\r\n\r\n// Transform edges from client format to server format\r\nexport const transformEdgesToServerFormat = (edges) => {\r\n  if (!Array.isArray(edges)) {\r\n    console.error(\"Edges is not an array:\", edges);\r\n    return [];\r\n  }\r\n\r\n  return edges\r\n    .map((edge) => {\r\n      try {\r\n        if (!edge || !edge.id || !edge.source || !edge.target) {\r\n          console.warn(\"Invalid edge object:\", edge);\r\n          return null;\r\n        }\r\n\r\n        // Ensure style is properly converted to string if it's an object\r\n        let edgeStyle;\r\n        if (typeof edge.style === \"string\") {\r\n          edgeStyle = edge.style;\r\n        } else if (typeof edge.style === \"object\") {\r\n          try {\r\n            edgeStyle = JSON.stringify(edge.style || {});\r\n          } catch (e) {\r\n            console.error(\"Error stringifying edge style:\", e);\r\n            edgeStyle = JSON.stringify({});\r\n          }\r\n        } else {\r\n          edgeStyle = JSON.stringify({});\r\n        }\r\n\r\n        return {\r\n          edgeIdentifier: edge.id,\r\n          source: edge.source,\r\n          target: edge.target,\r\n          type: edge.type || \"smoothstep\",\r\n          animated: Boolean(edge.animated),\r\n          style: edgeStyle,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error transforming edge to server format:\", error, edge);\r\n        return null;\r\n      }\r\n    })\r\n    .filter(Boolean);\r\n};\r\n\r\nexport default {\r\n  getCourseRoadmap,\r\n  saveCourseRoadmap,\r\n  createCourseWithRoadmap,\r\n  transformNodesToClientFormat,\r\n  transformNodesToServerFormat,\r\n  transformEdgesToClientFormat,\r\n  transformEdgesToServerFormat,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}