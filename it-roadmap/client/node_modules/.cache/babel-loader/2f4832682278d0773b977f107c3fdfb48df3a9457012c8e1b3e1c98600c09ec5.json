{"ast":null,"code":"import anime from \"animejs\";\n\n/**\r\n * Adds a glitch effect to elements\r\n * @param {string} selector - CSS selector for target elements\r\n */\nexport const glitchAnimation = selector => {\n  const elements = document.querySelectorAll(selector);\n  elements.forEach(el => {\n    // Set data-text attribute for pseudo-elements\n    if (!el.hasAttribute(\"data-text\")) {\n      el.setAttribute(\"data-text\", el.textContent);\n    }\n\n    // Add glitch-text class if not present\n    if (!el.classList.contains(\"glitch-text\")) {\n      el.classList.add(\"glitch-text\");\n    }\n  });\n};\n\n/**\r\n * Creates a neon pulse effect for buttons or borders\r\n * @param {string} selector - CSS selector for target elements\r\n * @param {string} color - Hexadecimal color code for the neon effect\r\n */\nexport const neonPulse = (selector, color = \"#00f6ff\") => {\n  anime({\n    targets: selector,\n    boxShadow: [`0 0 5px ${color}, 0 0 10px ${color}`, `0 0 2px ${color}, 0 0 5px ${color}`, `0 0 5px ${color}, 0 0 10px ${color}`],\n    duration: 1500,\n    easing: \"easeInOutSine\",\n    direction: \"alternate\",\n    loop: true\n  });\n};\n\n/**\r\n * Animate text typing effect\r\n * @param {string} selector - CSS selector for target element\r\n * @param {string} text - Text to type (defaults to element's content)\r\n * @param {number} duration - Animation duration in ms\r\n */\nexport const typeText = (selector, text = null, duration = 1000) => {\n  const el = document.querySelector(selector);\n  if (!el) return;\n  const content = text || el.textContent;\n  el.textContent = \"\";\n  el.style.opacity = 1;\n  let i = 0;\n  const interval = duration / content.length;\n  const timer = setInterval(() => {\n    if (i < content.length) {\n      el.textContent += content.charAt(i);\n      i++;\n    } else {\n      clearInterval(timer);\n    }\n  }, interval);\n};\n\n/**\r\n * Creates a scan line effect that moves across the element\r\n * @param {string} selector - CSS selector for target elements\r\n */\nexport const scanLineEffect = selector => {\n  const elements = document.querySelectorAll(selector);\n  elements.forEach(el => {\n    // Create scan line element\n    const scanLine = document.createElement(\"div\");\n    scanLine.classList.add(\"cyber-scan-line\");\n    scanLine.style.position = \"absolute\";\n    scanLine.style.top = \"0\";\n    scanLine.style.left = \"0\";\n    scanLine.style.width = \"100%\";\n    scanLine.style.height = \"4px\";\n    scanLine.style.background = \"rgba(0, 246, 255, 0.3)\";\n    scanLine.style.zIndex = \"10\";\n\n    // Ensure parent has position relative\n    if (getComputedStyle(el).position === \"static\") {\n      el.style.position = \"relative\";\n    }\n    el.style.overflow = \"hidden\";\n    el.appendChild(scanLine);\n\n    // Animate scan line\n    anime({\n      targets: scanLine,\n      translateY: [\"0%\", \"100%\"],\n      duration: 2000,\n      easing: \"linear\",\n      loop: true\n    });\n  });\n};\n\n/**\r\n * Creates a mecha-inspired panel transform effect\r\n * @param {string} selector - CSS selector for target elements\r\n */\nexport const mechaPanelEffect = selector => {\n  const elements = document.querySelectorAll(selector);\n  elements.forEach(el => {\n    // Add mecha panel class\n    if (!el.classList.contains(\"mecha-panel\")) {\n      el.classList.add(\"mecha-panel\");\n    }\n\n    // Add hover effect\n    el.addEventListener(\"mouseenter\", () => {\n      anime({\n        targets: el,\n        skew: [\"-5deg\", \"-8deg\"],\n        scale: 1.02,\n        boxShadow: [\"inset 0 0 10px rgba(255, 222, 0, 0.3)\", \"inset 0 0 20px rgba(255, 222, 0, 0.5), 0 0 15px rgba(255, 222, 0, 0.3)\"],\n        duration: 300,\n        easing: \"easeOutQuad\"\n      });\n    });\n    el.addEventListener(\"mouseleave\", () => {\n      anime({\n        targets: el,\n        skew: \"-5deg\",\n        scale: 1,\n        boxShadow: \"inset 0 0 10px rgba(255, 222, 0, 0.3)\",\n        duration: 500,\n        easing: \"easeOutElastic(1, .5)\"\n      });\n    });\n  });\n};\n\n/**\r\n * Initialize cyberpunk animations\r\n * Call this function once the DOM is loaded\r\n */\nexport const initCyberpunkAnimations = () => {\n  // Add glitch effect to titles\n  glitchAnimation(\".glitch-this\");\n\n  // Add neon pulse to buttons\n  neonPulse(\".btn-cyber\");\n  neonPulse(\".btn-cyber-pink\", \"#f700ff\");\n  neonPulse(\".btn-cyber-yellow\", \"#ffde00\");\n\n  // Apply mecha panel effect\n  mechaPanelEffect(\".mecha-panel-effect\");\n\n  // Apply scan line effect to cards\n  scanLineEffect(\".cyber-scan-effect\");\n};","map":{"version":3,"names":["anime","glitchAnimation","selector","elements","document","querySelectorAll","forEach","el","hasAttribute","setAttribute","textContent","classList","contains","add","neonPulse","color","targets","boxShadow","duration","easing","direction","loop","typeText","text","querySelector","content","style","opacity","i","interval","length","timer","setInterval","charAt","clearInterval","scanLineEffect","scanLine","createElement","position","top","left","width","height","background","zIndex","getComputedStyle","overflow","appendChild","translateY","mechaPanelEffect","addEventListener","skew","scale","initCyberpunkAnimations"],"sources":["D:/CyberPath/DACS-main/client/src/lib/animations.js"],"sourcesContent":["import anime from \"animejs\";\r\n\r\n/**\r\n * Adds a glitch effect to elements\r\n * @param {string} selector - CSS selector for target elements\r\n */\r\nexport const glitchAnimation = (selector) => {\r\n  const elements = document.querySelectorAll(selector);\r\n\r\n  elements.forEach((el) => {\r\n    // Set data-text attribute for pseudo-elements\r\n    if (!el.hasAttribute(\"data-text\")) {\r\n      el.setAttribute(\"data-text\", el.textContent);\r\n    }\r\n\r\n    // Add glitch-text class if not present\r\n    if (!el.classList.contains(\"glitch-text\")) {\r\n      el.classList.add(\"glitch-text\");\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Creates a neon pulse effect for buttons or borders\r\n * @param {string} selector - CSS selector for target elements\r\n * @param {string} color - Hexadecimal color code for the neon effect\r\n */\r\nexport const neonPulse = (selector, color = \"#00f6ff\") => {\r\n  anime({\r\n    targets: selector,\r\n    boxShadow: [\r\n      `0 0 5px ${color}, 0 0 10px ${color}`,\r\n      `0 0 2px ${color}, 0 0 5px ${color}`,\r\n      `0 0 5px ${color}, 0 0 10px ${color}`,\r\n    ],\r\n    duration: 1500,\r\n    easing: \"easeInOutSine\",\r\n    direction: \"alternate\",\r\n    loop: true,\r\n  });\r\n};\r\n\r\n/**\r\n * Animate text typing effect\r\n * @param {string} selector - CSS selector for target element\r\n * @param {string} text - Text to type (defaults to element's content)\r\n * @param {number} duration - Animation duration in ms\r\n */\r\nexport const typeText = (selector, text = null, duration = 1000) => {\r\n  const el = document.querySelector(selector);\r\n  if (!el) return;\r\n\r\n  const content = text || el.textContent;\r\n  el.textContent = \"\";\r\n  el.style.opacity = 1;\r\n\r\n  let i = 0;\r\n  const interval = duration / content.length;\r\n\r\n  const timer = setInterval(() => {\r\n    if (i < content.length) {\r\n      el.textContent += content.charAt(i);\r\n      i++;\r\n    } else {\r\n      clearInterval(timer);\r\n    }\r\n  }, interval);\r\n};\r\n\r\n/**\r\n * Creates a scan line effect that moves across the element\r\n * @param {string} selector - CSS selector for target elements\r\n */\r\nexport const scanLineEffect = (selector) => {\r\n  const elements = document.querySelectorAll(selector);\r\n\r\n  elements.forEach((el) => {\r\n    // Create scan line element\r\n    const scanLine = document.createElement(\"div\");\r\n    scanLine.classList.add(\"cyber-scan-line\");\r\n    scanLine.style.position = \"absolute\";\r\n    scanLine.style.top = \"0\";\r\n    scanLine.style.left = \"0\";\r\n    scanLine.style.width = \"100%\";\r\n    scanLine.style.height = \"4px\";\r\n    scanLine.style.background = \"rgba(0, 246, 255, 0.3)\";\r\n    scanLine.style.zIndex = \"10\";\r\n\r\n    // Ensure parent has position relative\r\n    if (getComputedStyle(el).position === \"static\") {\r\n      el.style.position = \"relative\";\r\n    }\r\n    el.style.overflow = \"hidden\";\r\n\r\n    el.appendChild(scanLine);\r\n\r\n    // Animate scan line\r\n    anime({\r\n      targets: scanLine,\r\n      translateY: [\"0%\", \"100%\"],\r\n      duration: 2000,\r\n      easing: \"linear\",\r\n      loop: true,\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Creates a mecha-inspired panel transform effect\r\n * @param {string} selector - CSS selector for target elements\r\n */\r\nexport const mechaPanelEffect = (selector) => {\r\n  const elements = document.querySelectorAll(selector);\r\n\r\n  elements.forEach((el) => {\r\n    // Add mecha panel class\r\n    if (!el.classList.contains(\"mecha-panel\")) {\r\n      el.classList.add(\"mecha-panel\");\r\n    }\r\n\r\n    // Add hover effect\r\n    el.addEventListener(\"mouseenter\", () => {\r\n      anime({\r\n        targets: el,\r\n        skew: [\"-5deg\", \"-8deg\"],\r\n        scale: 1.02,\r\n        boxShadow: [\r\n          \"inset 0 0 10px rgba(255, 222, 0, 0.3)\",\r\n          \"inset 0 0 20px rgba(255, 222, 0, 0.5), 0 0 15px rgba(255, 222, 0, 0.3)\",\r\n        ],\r\n        duration: 300,\r\n        easing: \"easeOutQuad\",\r\n      });\r\n    });\r\n\r\n    el.addEventListener(\"mouseleave\", () => {\r\n      anime({\r\n        targets: el,\r\n        skew: \"-5deg\",\r\n        scale: 1,\r\n        boxShadow: \"inset 0 0 10px rgba(255, 222, 0, 0.3)\",\r\n        duration: 500,\r\n        easing: \"easeOutElastic(1, .5)\",\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize cyberpunk animations\r\n * Call this function once the DOM is loaded\r\n */\r\nexport const initCyberpunkAnimations = () => {\r\n  // Add glitch effect to titles\r\n  glitchAnimation(\".glitch-this\");\r\n\r\n  // Add neon pulse to buttons\r\n  neonPulse(\".btn-cyber\");\r\n  neonPulse(\".btn-cyber-pink\", \"#f700ff\");\r\n  neonPulse(\".btn-cyber-yellow\", \"#ffde00\");\r\n\r\n  // Apply mecha panel effect\r\n  mechaPanelEffect(\".mecha-panel-effect\");\r\n\r\n  // Apply scan line effect to cards\r\n  scanLineEffect(\".cyber-scan-effect\");\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}