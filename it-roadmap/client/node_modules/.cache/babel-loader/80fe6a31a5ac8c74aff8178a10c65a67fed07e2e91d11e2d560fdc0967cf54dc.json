{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\CyberPath\\\\it-roadmap\\\\client\\\\src\\\\components\\\\RoadmapView.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, Panel, ReactFlowProvider, useReactFlow, MarkerType, Connection } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport { PlusCircle, Save, Trash, Plus, X, Link as LinkIcon, LinkOff, Palette } from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  courseNode: CourseNode\n};\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate\n}) {\n  _s();\n  const {\n    toast\n  } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const isInitialMount = useRef(true);\n  // Keep track of manually added nodes to prevent them from being lost\n  const addedNodesRef = useRef([]);\n\n  // Define handleCompleteToggle before it's used\n  const handleCompleteToggle = useCallback((nodeId, completed) => {\n    var _nodes$find;\n    if (readOnly) return;\n\n    // Get the current timestamp\n    const completedAt = completed ? new Date().toISOString() : null;\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            completed,\n            completedAt\n          }\n        };\n      }\n      return node;\n    }));\n    toast({\n      title: completed ? \"Course marked as completed\" : \"Course marked as incomplete\",\n      description: `You've ${completed ? \"completed\" : \"unmarked\"} ${(_nodes$find = nodes.find(n => n.id === nodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.label}`\n    });\n  }, [nodes, setNodes, toast, readOnly]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    // Skip effect if no initial data\n    if (!(initialNodes !== null && initialNodes !== void 0 && initialNodes.length) && !(initialEdges !== null && initialEdges !== void 0 && initialEdges.length)) {\n      return;\n    }\n\n    // Only run once during initial mount to avoid re-render cycles\n    if (isInitialMount.current) {\n      console.log(\"[FLOW] Initial setup with nodes:\", initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length);\n      if ((initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length) > 0) {\n        // Process nodes once with required properties for display\n        const processedNodes = initialNodes.map(node => {\n          var _node$data;\n          return {\n            ...node,\n            type: \"courseNode\",\n            position: node.position || {\n              x: Math.random() * 500,\n              y: Math.random() * 300\n            },\n            data: {\n              ...node.data,\n              showQuickToggle: true,\n              onQuickToggle: handleCompleteToggle,\n              label: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.label) || \"Untitled Node\"\n            }\n          };\n        });\n\n        // Initialize with the processed nodes\n        setNodes(processedNodes);\n        // Store initial nodes in our ref for tracking\n        addedNodesRef.current = [...processedNodes];\n      }\n\n      // Process edges only after nodes are set\n      if ((initialEdges === null || initialEdges === void 0 ? void 0 : initialEdges.length) > 0) {\n        console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\n\n        // Create a map of node IDs for quick lookup\n        const nodeMap = new Map(initialNodes.map(node => [node.id, node]));\n\n        // Validate edges against existing nodes to ensure they connect to valid nodes\n        const validEdges = initialEdges.filter(edge => {\n          // Check that both source and target nodes exist\n          const sourceExists = nodeMap.has(edge.source);\n          const targetExists = nodeMap.has(edge.target);\n          if (!sourceExists || !targetExists) {\n            console.warn(`[FLOW] Skipping invalid edge: Source exists: ${sourceExists}, Target exists: ${targetExists}`, edge);\n            return false;\n          }\n          return true;\n        });\n\n        // Process edges with additional data\n        const processedEdges = validEdges.map(edge => {\n          var _edge$data, _edge$data2, _edge$data3, _edge$data4, _edge$data5, _edge$data6;\n          return {\n            ...edge,\n            // Ensure edge has required properties\n            id: edge.id || `edge-${edge.source}-${edge.target}`,\n            type: edge.type || \"smoothstep\",\n            animated: edge.animated !== undefined ? edge.animated : true,\n            style: edge.style || {\n              stroke: \"#6d28d9\"\n            },\n            // Ensure handle positions are preserved\n            sourceHandle: edge.sourceHandle || ((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.sourceHandle) || null,\n            targetHandle: edge.targetHandle || ((_edge$data2 = edge.data) === null || _edge$data2 === void 0 ? void 0 : _edge$data2.targetHandle) || null,\n            // Store explicit connection information in data\n            data: {\n              ...(edge.data || {}),\n              sourceId: edge.source,\n              targetId: edge.target,\n              // Store handle positions in data for redundancy\n              sourceHandle: edge.sourceHandle || ((_edge$data3 = edge.data) === null || _edge$data3 === void 0 ? void 0 : _edge$data3.sourceHandle) || null,\n              targetHandle: edge.targetHandle || ((_edge$data4 = edge.data) === null || _edge$data4 === void 0 ? void 0 : _edge$data4.targetHandle) || null,\n              connectionType: ((_edge$data5 = edge.data) === null || _edge$data5 === void 0 ? void 0 : _edge$data5.connectionType) || \"arrow\"\n            },\n            // Ensure markerEnd if using arrow type\n            ...(!edge.markerEnd && ((_edge$data6 = edge.data) === null || _edge$data6 === void 0 ? void 0 : _edge$data6.connectionType) !== \"none\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\"\n              }\n            })\n          };\n        });\n        console.log(\"[FLOW] Processed edges:\", processedEdges.length);\n        setEdges(processedEdges);\n      }\n\n      // Mark as initialized to prevent future re-processing\n      isInitialMount.current = false;\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle]);\n\n  // Update parent component with internal changes - optimized for fewer updates\n  useEffect(() => {\n    // Skip during initial render or if no update function provided\n    if (isInitialMount.current || !onInternalUpdate) return;\n\n    // Use a debounce to avoid too frequent updates\n    const timer = setTimeout(() => {\n      console.log(`[FLOW] Debounced parent update: ${nodes.length} nodes`);\n      onInternalUpdate(nodes, edges);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Simplify the node preservation effect\n  useEffect(() => {\n    if (addedNodesRef.current.length > 0 && nodes.length === 0) {\n      // Only restore if we've lost ALL nodes (prevents loops)\n      console.log(\"[FLOW] Lost all nodes, restoring from ref\");\n      setNodes(addedNodesRef.current);\n    }\n  }, [nodes.length, setNodes]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack(prev => [...prev, {\n      nodes: [...nodes],\n      edges: [...edges]\n    }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n  const onConnect = useCallback(params => {\n    saveCurrentState();\n\n    // Generate a more stable ID using only source and target\n    const edgeId = `edge-${params.source}-${params.target}`;\n\n    // Add marker and apply current edge style settings\n    const newEdge = {\n      ...params,\n      id: edgeId,\n      type: \"smoothstep\",\n      animated: true,\n      style: {\n        stroke: \"#6d28d9\"\n      },\n      // Store handle positions explicitly\n      sourceHandle: params.sourceHandle,\n      targetHandle: params.targetHandle,\n      // Only add marker if connection type is arrow\n      ...(connectionType === \"arrow\" && {\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          width: 20,\n          height: 20,\n          color: \"#6d28d9\"\n        }\n      }),\n      data: {\n        connectionType,\n        // Store source and target information explicitly\n        sourceId: params.source,\n        targetId: params.target,\n        // Store handle positions in data as well for redundancy\n        sourceHandle: params.sourceHandle,\n        targetHandle: params.targetHandle\n      }\n    };\n    setEdges(eds => {\n      // Check if this connection already exists\n      const existingEdgeIndex = eds.findIndex(e => e.source === params.source && e.target === params.target && e.sourceHandle === params.sourceHandle && e.targetHandle === params.targetHandle);\n\n      // If connection exists, update it rather than adding a new one\n      if (existingEdgeIndex >= 0) {\n        const updatedEdges = [...eds];\n        updatedEdges[existingEdgeIndex] = newEdge;\n        console.log(\"[FLOW] Updated existing edge:\", newEdge);\n        return updatedEdges;\n      } else {\n        const newEdges = addEdge(newEdge, eds);\n        console.log(\"[FLOW] Edge added:\", newEdge);\n        console.log(\"[FLOW] Current edges count:\", newEdges.length);\n        return newEdges;\n      }\n    });\n    toast({\n      title: \"Connection added\",\n      description: \"A new connection has been created between nodes\"\n    });\n  }, [setEdges, saveCurrentState, toast, connectionType]);\n  const onNodeClick = useCallback((event, node) => {\n    event.stopPropagation();\n    if (editMode === \"delete\") {\n      // Delete mode: remove the node\n      saveCurrentState();\n      setNodes(nodes.filter(n => n.id !== node.id));\n      // Also remove any connected edges\n      setEdges(edges.filter(e => e.source !== node.id && e.target !== node.id));\n      toast({\n        title: \"Node deleted\",\n        description: `${node.data.label} has been removed from the roadmap`\n      });\n    } else if (editMode === \"connect\" && selectedNode) {\n      // Connect mode: create an edge between selectedNode and this node\n      if (selectedNode.id !== node.id) {\n        const newEdge = {\n          id: `edge-${Date.now()}`,\n          source: selectedNode.id,\n          target: node.id,\n          type: \"smoothstep\",\n          animated: true,\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        };\n        saveCurrentState();\n        setEdges(eds => [...eds, newEdge]);\n        setSelectedNode(null);\n        setEditMode(\"select\");\n        toast({\n          title: \"Connection created\",\n          description: `Connected ${selectedNode.data.label} to ${node.data.label}`\n        });\n      }\n    } else if (editMode === \"select\") {\n      // Regular select mode: show node details\n      setSelectedNode(node);\n    }\n  }, [editMode, selectedNode, nodes, edges, setNodes, setEdges, saveCurrentState, toast]);\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\"\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"[VIEW] Starting roadmap save process\");\n      console.log(\"[VIEW] Current nodes:\", nodes.length);\n      console.log(\"[VIEW] Current edges:\", edges.length);\n\n      // Đảm bảo không có node nào bị thiếu dữ liệu quan trọng\n      const cleanedNodes = nodes.map(node => {\n        var _node$data2;\n        if (!node.id) {\n          console.error(\"[VIEW] Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        }\n        if (!node.position) {\n          console.error(\"[VIEW] Node missing position:\", node);\n          // Default position\n          node.position = {\n            x: 0,\n            y: 0\n          };\n        }\n        if (!node.data) {\n          console.error(\"[VIEW] Node missing data:\", node);\n          // Default minimal data\n          node.data = {\n            label: \"Node \" + node.id\n          };\n        }\n\n        // Đảm bảo node có đủ thông tin cần thiết\n        return {\n          ...node,\n          type: node.type || \"courseNode\",\n          // Loại node mặc định\n          data: {\n            ...(node.data || {}),\n            id: node.id,\n            // Đảm bảo ID trong data giống với ID của node\n            label: ((_node$data2 = node.data) === null || _node$data2 === void 0 ? void 0 : _node$data2.label) || \"Untitled\" // Ít nhất phải có nhãn\n          }\n        };\n      });\n\n      // Create a map of node IDs for quick lookup\n      const nodeIdMap = new Set(cleanedNodes.map(node => node.id));\n\n      // Đảm bảo các edge có đủ thông tin cần thiết\n      const cleanedEdges = edges.map(edge => {\n        var _edge$data7, _edge$data8, _edge$data9, _edge$data0, _edge$data1, _edge$data10;\n        if (!edge.source || !edge.target) {\n          console.error(\"[VIEW] Edge missing source or target:\", edge);\n          return null; // Skip invalid edges\n        }\n\n        // Make sure source and target nodes still exist\n        const sourceExists = nodeIdMap.has(edge.source);\n        const targetExists = nodeIdMap.has(edge.target);\n        if (!sourceExists || !targetExists) {\n          console.error(`[VIEW] Edge has invalid connections. Source exists: ${sourceExists}, Target exists: ${targetExists}`);\n          return null; // Skip edges with missing endpoints\n        }\n\n        // Generate a consistent ID if missing\n        const edgeId = edge.id || `edge-${edge.source}-${edge.target}`;\n\n        // Ensure we have complete edge data\n        return {\n          ...edge,\n          id: edgeId,\n          type: edge.type || \"smoothstep\",\n          // Loại edge mặc định\n          // Preserve handle positions explicitly\n          sourceHandle: edge.sourceHandle || ((_edge$data7 = edge.data) === null || _edge$data7 === void 0 ? void 0 : _edge$data7.sourceHandle) || null,\n          targetHandle: edge.targetHandle || ((_edge$data8 = edge.data) === null || _edge$data8 === void 0 ? void 0 : _edge$data8.targetHandle) || null,\n          // Store explicit source and target information\n          data: {\n            ...(edge.data || {}),\n            sourceId: edge.source,\n            targetId: edge.target,\n            // Store handle positions in data for redundancy\n            sourceHandle: edge.sourceHandle || ((_edge$data9 = edge.data) === null || _edge$data9 === void 0 ? void 0 : _edge$data9.sourceHandle) || null,\n            targetHandle: edge.targetHandle || ((_edge$data0 = edge.data) === null || _edge$data0 === void 0 ? void 0 : _edge$data0.targetHandle) || null,\n            connectionType: ((_edge$data1 = edge.data) === null || _edge$data1 === void 0 ? void 0 : _edge$data1.connectionType) || \"arrow\"\n          },\n          // Ensure markerEnd is consistent with connection type\n          ...(!edge.markerEnd && ((_edge$data10 = edge.data) === null || _edge$data10 === void 0 ? void 0 : _edge$data10.connectionType) !== \"none\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          })\n        };\n      }).filter(Boolean); // Lọc bỏ các edge null\n\n      console.log(\"[VIEW] Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"[VIEW] Node data sample:\", cleanedNodes[0]);\n      console.log(\"[VIEW] Cleaned edges for saving:\", cleanedEdges.length);\n      if (cleanedEdges.length > 0) {\n        console.log(\"[VIEW] Edge data sample:\", cleanedEdges[0]);\n      }\n\n      // Thông báo cho người dùng\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`\n      });\n\n      // Lưu dữ liệu vào trạng thái cục bộ\n      setNodes(cleanedNodes);\n      setEdges(cleanedEdges);\n\n      // Gọi hàm callback onSave để lưu dữ liệu\n      console.log(\"[VIEW] Calling onSave with cleaned data\");\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"[VIEW] Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\"\n      });\n    }\n  }, [nodes, edges, onSave, toast, setNodes, setEdges]);\n  const handleAddCourse = useCallback(courseData => {\n    saveCurrentState();\n\n    // Generate a unique node ID with timestamp for guaranteed uniqueness\n    const newNodeId = `node-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\n\n    // Simple positioning math to ensure nodes don't overlap\n    const nodeOffsets = [{\n      x: 0,\n      y: 0\n    }, {\n      x: 250,\n      y: 0\n    }, {\n      x: 0,\n      y: 150\n    }, {\n      x: 250,\n      y: 150\n    }, {\n      x: -250,\n      y: 0\n    }, {\n      x: -250,\n      y: 150\n    }];\n\n    // Base position starts at center if possible\n    let baseX = 0,\n      baseY = 0;\n    if (reactFlowInstance) {\n      const viewport = reactFlowInstance.getViewport();\n      const screenCenter = reactFlowInstance.screenToFlowPosition({\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      });\n      baseX = screenCenter.x;\n      baseY = screenCenter.y;\n    }\n\n    // Choose offset based on node count (cycle through positions)\n    const offset = nodeOffsets[nodes.length % nodeOffsets.length];\n\n    // Final position\n    const position = {\n      x: baseX + offset.x,\n      y: baseY + offset.y\n    };\n    console.log(`[FLOW] Creating new node at position: x=${position.x}, y=${position.y}`);\n\n    // Create the node with all required data\n    const newNode = {\n      id: newNodeId,\n      type: \"courseNode\",\n      position,\n      data: {\n        ...courseData,\n        id: newNodeId,\n        completed: false,\n        completedAt: null,\n        showQuickToggle: true,\n        onQuickToggle: handleCompleteToggle\n      }\n    };\n\n    // Add node directly to state and tracking ref\n    setNodes(currentNodes => [...currentNodes, newNode]);\n    addedNodesRef.current = [...addedNodesRef.current, newNode];\n\n    // Close dialog and show confirmation\n    setIsAddCourseOpen(false);\n    toast({\n      title: \"Course added\",\n      description: `${courseData.label} has been added to the roadmap`\n    });\n\n    // Ensure newly added node is visible\n    setTimeout(() => {\n      if (reactFlowInstance) {\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: false,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        });\n      }\n    }, 100);\n  }, [setNodes, toast, reactFlowInstance, nodes.length, handleCompleteToggle, saveCurrentState]);\n\n  // Ensure manually added nodes are preserved during state updates\n  useEffect(() => {\n    if (addedNodesRef.current.length > 0 && nodes.length > 0) {\n      // Get IDs of current nodes\n      const currentIds = new Set(nodes.map(n => n.id));\n\n      // Find manually added nodes that are missing from current nodes\n      const missingNodes = addedNodesRef.current.filter(n => !currentIds.has(n.id));\n\n      // If any manually added nodes are missing, add them back\n      if (missingNodes.length > 0) {\n        console.log(`[FLOW] Restoring ${missingNodes.length} manually added nodes that were lost`);\n        setNodes(currentNodes => [...currentNodes, ...missingNodes]);\n      }\n    }\n  }, [nodes, setNodes]);\n  const handleDeleteNode = useCallback(nodeId => {\n    saveCurrentState();\n\n    // Remove the node from state\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n\n    // Remove the node from our tracking ref\n    addedNodesRef.current = addedNodesRef.current.filter(node => node.id !== nodeId);\n\n    // Remove connected edges\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n\n    // Clear selection\n    setSelectedNode(null);\n    toast({\n      title: \"Node deleted\",\n      description: \"The node has been removed from the roadmap\"\n    });\n\n    // Update view after deletion\n    setTimeout(() => {\n      if (reactFlowInstance) {\n        reactFlowInstance.fitView({\n          padding: 0.5\n        });\n      }\n    }, 100);\n  }, [setNodes, setEdges, toast, saveCurrentState, reactFlowInstance]);\n  const handleUpdateNodeStyle = useCallback((nodeId, style) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            ...style\n          }\n        };\n      }\n      return node;\n    }));\n  }, [setNodes]);\n  const onEdgeClick = useCallback((event, edge) => {\n    if (editMode === \"delete\") {\n      saveCurrentState();\n\n      // Delete the edge\n      setEdges(eds => eds.filter(e => e.id !== edge.id));\n      toast({\n        title: \"Connection removed\",\n        description: \"The connection between nodes has been removed\"\n      });\n    }\n  }, [setEdges, editMode, saveCurrentState, toast]);\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const previousState = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, currentState]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const nextState = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, currentState]);\n    setRedoStack(prev => prev.slice(0, -1));\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(node => {\n      var _node$data$category;\n      return ((_node$data$category = node.data.category) === null || _node$data$category === void 0 ? void 0 : _node$data$category.toLowerCase()) === selectedCategory.toLowerCase();\n    });\n  }, [nodes, selectedCategory]);\n  const handleStyleChange = useCallback(styles => {\n    // Apply styles to selected node or default edge options\n    if (selectedNode) {\n      handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n    }\n\n    // Update default edge options\n    // (would be implemented in a full version)\n  }, [selectedNode, handleUpdateNodeStyle]);\n  const handleConnectionTypeChange = useCallback(type => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      // Instead of suppressing errors, let's implement a proper fix\n      let resizeObserverLoopErrCount = 0;\n      const debouncedResizeObserverCallback = debounce(() => {\n        resizeObserverLoopErrCount = 0;\n      }, 200);\n      const originalError = console.error;\n      console.error = (...args) => {\n        var _args$, _args$$includes, _args$2, _args$2$message, _args$2$message$inclu;\n        if ((_args$ = args[0]) !== null && _args$ !== void 0 && (_args$$includes = _args$.includes) !== null && _args$$includes !== void 0 && _args$$includes.call(_args$, \"ResizeObserver loop\") || (_args$2 = args[0]) !== null && _args$2 !== void 0 && (_args$2$message = _args$2.message) !== null && _args$2$message !== void 0 && (_args$2$message$inclu = _args$2$message.includes) !== null && _args$2$message$inclu !== void 0 && _args$2$message$inclu.call(_args$2$message, \"ResizeObserver loop\")) {\n          // Increment counter and invoke debounced callback\n          resizeObserverLoopErrCount += 1;\n          if (resizeObserverLoopErrCount <= 1) {\n            debouncedResizeObserverCallback();\n          }\n          // Suppress the error\n          return;\n        }\n        originalError.apply(console, args);\n      };\n      return () => {\n        console.error = originalError;\n      };\n    }\n\n    // Helper function for debounce\n    function debounce(fn, delay) {\n      let timeoutId;\n      return function () {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => fn.apply(this, arguments), delay);\n      };\n    }\n  }, []);\n\n  // Optimize edge rendering and enhance edge interaction\n  useEffect(() => {\n    // Configure ReactFlow for improved edge connection\n    const reactFlowEl = document.querySelector(\".react-flow\");\n    if (reactFlowEl) {\n      // Add custom class for better edge interaction\n      reactFlowEl.classList.add(\"improved-edge-connection\");\n    }\n    return () => {\n      if (reactFlowEl) {\n        reactFlowEl.classList.remove(\"improved-edge-connection\");\n      }\n    };\n  }, []);\n\n  // Ensure nodes are visible in the viewport\n  useEffect(() => {\n    if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\n      // Wait for rendering to complete, then fit view\n      const timeoutId = setTimeout(() => {\n        console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        });\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [nodes.length, reactFlowInstance]);\n\n  // Add a debug useEffect to log whenever nodes change\n  useEffect(() => {\n    if (nodes.length > 0) {\n      console.log(\"[FLOW] Nodes changed, current count:\", nodes.length);\n    }\n  }, [nodes]);\n\n  // Cleanup on unmount to prevent memory leaks\n  useEffect(() => {\n    return () => {\n      // Clear any timeouts that might be pending\n      const viewportEl = document.querySelector(\".react-flow__viewport\");\n      if (viewportEl) {\n        viewportEl.style.transitionProperty = \"\";\n        viewportEl.style.transitionDuration = \"\";\n      }\n      console.log(\"[FLOW] Component unmounting, performing cleanup\");\n    };\n  }, []);\n\n  // Add special effect to prevent excessive console logging during development\n  useEffect(() => {\n    if (process.env.NODE_ENV === \"development\") {\n      const originalConsoleLog = console.log;\n      const flowLogPattern = /^\\[FLOW\\]/;\n\n      // Filter out excessive flow logs in development\n      console.log = (...args) => {\n        if (typeof args[0] === \"string\" && flowLogPattern.test(args[0])) {\n          // Only log important flow messages or when explicitly debugging\n          if (args[0].includes(\"error\") || args[0].includes(\"Creating\") || args[0].includes(\"deleted\")) {\n            originalConsoleLog.apply(console, args);\n          }\n        } else {\n          originalConsoleLog.apply(console, args);\n        }\n      };\n      return () => {\n        console.log = originalConsoleLog;\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    className: \"h-full w-full\",\n    children: [isEditing && showEditorPanel && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"right\",\n      className: \"w-72 mr-2\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapEditorPanel, {\n        onStyleChange: handleStyleChange,\n        onConnectionTypeChange: handleConnectionTypeChange,\n        activeEdgeStyle: connectionType,\n        editMode: editMode,\n        onEditModeChange: mode => {\n          setEditMode(mode);\n          if (mode === \"connect\") {\n            toast({\n              title: \"Connect mode\",\n              description: \"Click on a source node, then click on a target node to create a connection\"\n            });\n          } else if (mode === \"delete\") {\n            toast({\n              title: \"Delete mode\",\n              description: \"Click on a node or connection to delete it\"\n            });\n          }\n        },\n        onAddNodeClick: () => setIsAddCourseOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 897,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 9\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"top-right\",\n      className: \"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2 justify-end\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n          onClick: handleUndo,\n          disabled: undoStack.length === 0,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n          onClick: handleRedo,\n          disabled: redoStack.length === 0,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"bg-purple-600 hover:bg-purple-700 text-white\",\n          size: \"sm\",\n          onClick: handleSaveRoadmap,\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            className: \"h-4 w-4 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 15\n          }, this), \" Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 927,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: filteredNodes(),\n        edges: edges,\n        onNodesChange: isEditing ? onNodesChange : undefined,\n        onEdgesChange: isEditing ? onEdgesChange : undefined,\n        onConnect: isEditing ? onConnect : undefined,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        onPaneClick: onPaneClick,\n        nodeTypes: nodeTypes,\n        onNodeDragStop: onNodeDragStop,\n        nodesDraggable: isEditing,\n        nodesConnectable: isEditing && editMode === \"connect\",\n        elementsSelectable: !readOnly,\n        defaultEdgeOptions: {\n          type: \"smoothstep\",\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          animated: true,\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        },\n        fitView: true,\n        fitViewOptions: {\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        },\n        minZoom: 0.2,\n        maxZoom: 4,\n        snapToGrid: true,\n        snapGrid: [10, 10],\n        nodeExtent: [[-2000, -2000], [2000, 2000]],\n        proOptions: {\n          hideAttribution: true\n        },\n        disableKeyboardA11y: true,\n        autoPanOnNodeDrag: false,\n        elevateEdgesOnSelect: false,\n        onInit: instance => {\n          // Use setTimeout to ensure proper initialization\n          setTimeout(() => {\n            if (nodes.length > 0) {\n              instance.fitView({\n                padding: 0.5\n              });\n              console.log(\"[FLOW] Flow initialized with nodes:\", nodes.length);\n            }\n          }, 300);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1019,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n          nodeStrokeWidth: 3,\n          zoomable: true,\n          pannable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1020,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 12,\n          size: 1,\n          color: \"#6d28d9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1021,\n          columnNumber: 11\n        }, this)]\n      }, `flow-${id}-${nodes.length}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 955,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(CourseInfoPanel, {\n      node: selectedNode,\n      onClose: () => setSelectedNode(null),\n      onCompleteToggle: handleCompleteToggle,\n      onDelete: isEditing ? handleDeleteNode : undefined,\n      onUpdateStyle: handleUpdateNodeStyle,\n      isAdmin: isEditing,\n      readOnly: readOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1026,\n      columnNumber: 9\n    }, this), isAddCourseOpen && /*#__PURE__*/_jsxDEV(AddCourseDialog, {\n      open: isAddCourseOpen,\n      onClose: () => setIsAddCourseOpen(false),\n      onAdd: handleAddCourse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1038,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 894,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapViewInner, \"9J2GfLW/fDMIc0SGbvVXQ53UpuA=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow];\n});\n_c = RoadmapViewInner;\nexport default function RoadmapView(props) {\n  var _props$initialNodes, _props$initialEdges;\n  console.log(\"[FLOW] RoadmapView wrapper rendering with props:\", {\n    id: props.id,\n    nodesCount: (_props$initialNodes = props.initialNodes) === null || _props$initialNodes === void 0 ? void 0 : _props$initialNodes.length,\n    edgesCount: (_props$initialEdges = props.initialEdges) === null || _props$initialEdges === void 0 ? void 0 : _props$initialEdges.length\n  });\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapViewInner, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1056,\n    columnNumber: 5\n  }, this);\n}\n_c2 = RoadmapView;\nvar _c, _c2;\n$RefreshReg$(_c, \"RoadmapViewInner\");\n$RefreshReg$(_c2, \"RoadmapView\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useCallback","useEffect","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","Palette","CourseNode","CourseInfoPanel","AddCourseDialog","RoadmapEditorPanel","jsxDEV","_jsxDEV","nodeTypes","courseNode","RoadmapViewInner","id","initialNodes","initialEdges","isEditing","readOnly","onSave","onInternalUpdate","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","connectionType","setConnectionType","showEditorPanel","setShowEditorPanel","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","isInitialMount","addedNodesRef","handleCompleteToggle","nodeId","completed","_nodes$find","completedAt","Date","toISOString","nds","map","node","data","title","description","find","n","label","length","current","console","log","processedNodes","_node$data","type","position","x","Math","random","y","showQuickToggle","onQuickToggle","nodeMap","Map","validEdges","filter","edge","sourceExists","has","source","targetExists","target","warn","processedEdges","_edge$data","_edge$data2","_edge$data3","_edge$data4","_edge$data5","_edge$data6","animated","undefined","style","stroke","sourceHandle","targetHandle","sourceId","targetId","markerEnd","ArrowClosed","width","height","color","timer","setTimeout","clearTimeout","saveCurrentState","prev","onConnect","params","edgeId","newEdge","eds","existingEdgeIndex","findIndex","e","updatedEdges","newEdges","onNodeClick","event","stopPropagation","now","onPaneClick","handleSaveRoadmap","cleanedNodes","_node$data2","error","toString","substring","nodeIdMap","Set","cleanedEdges","_edge$data7","_edge$data8","_edge$data9","_edge$data0","_edge$data1","_edge$data10","Boolean","variant","handleAddCourse","courseData","newNodeId","floor","nodeOffsets","baseX","baseY","viewport","getViewport","screenCenter","screenToFlowPosition","window","innerWidth","innerHeight","offset","newNode","currentNodes","fitView","padding","includeHiddenNodes","minZoom","maxZoom","currentIds","missingNodes","handleDeleteNode","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","handleStyleChange","styles","nodeStyle","handleConnectionTypeChange","process","env","NODE_ENV","resizeObserverLoopErrCount","debouncedResizeObserverCallback","debounce","originalError","args","_args$","_args$$includes","_args$2","_args$2$message","_args$2$message$inclu","includes","call","message","apply","fn","delay","timeoutId","arguments","reactFlowEl","document","querySelector","classList","add","remove","viewportEl","transitionProperty","transitionDuration","originalConsoleLog","flowLogPattern","test","ref","className","children","onStyleChange","onConnectionTypeChange","activeEdgeStyle","onEditModeChange","mode","onAddNodeClick","fileName","lineNumber","columnNumber","size","onClick","disabled","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitViewOptions","snapToGrid","snapGrid","nodeExtent","proOptions","hideAttribution","disableKeyboardA11y","autoPanOnNodeDrag","elevateEdgesOnSelect","onInit","instance","nodeStrokeWidth","zoomable","pannable","gap","onClose","onCompleteToggle","onDelete","onUpdateStyle","isAdmin","open","onAdd","_c","RoadmapView","props","_props$initialNodes","_props$initialEdges","nodesCount","edgesCount","_c2","$RefreshReg$"],"sources":["D:/CyberPath/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Panel,\n  ReactFlowProvider,\n  useReactFlow,\n  MarkerType,\n  Connection,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport {\n  PlusCircle,\n  Save,\n  Trash,\n  Plus,\n  X,\n  Link as LinkIcon,\n  LinkOff,\n  Palette,\n} from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\n\nconst nodeTypes = {\n  courseNode: CourseNode,\n};\n\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate,\n}) {\n  const { toast } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const isInitialMount = useRef(true);\n  // Keep track of manually added nodes to prevent them from being lost\n  const addedNodesRef = useRef([]);\n\n  // Define handleCompleteToggle before it's used\n  const handleCompleteToggle = useCallback(\n    (nodeId, completed) => {\n      if (readOnly) return;\n\n      // Get the current timestamp\n      const completedAt = completed ? new Date().toISOString() : null;\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                completed,\n                completedAt,\n              },\n            };\n          }\n          return node;\n        })\n      );\n\n      toast({\n        title: completed\n          ? \"Course marked as completed\"\n          : \"Course marked as incomplete\",\n        description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\n          nodes.find((n) => n.id === nodeId)?.data.label\n        }`,\n      });\n    },\n    [nodes, setNodes, toast, readOnly]\n  );\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    // Skip effect if no initial data\n    if (!initialNodes?.length && !initialEdges?.length) {\n      return;\n    }\n\n    // Only run once during initial mount to avoid re-render cycles\n    if (isInitialMount.current) {\n      console.log(\"[FLOW] Initial setup with nodes:\", initialNodes?.length);\n\n      if (initialNodes?.length > 0) {\n        // Process nodes once with required properties for display\n        const processedNodes = initialNodes.map((node) => ({\n          ...node,\n          type: \"courseNode\",\n          position: node.position || {\n            x: Math.random() * 500,\n            y: Math.random() * 300,\n          },\n          data: {\n            ...node.data,\n            showQuickToggle: true,\n            onQuickToggle: handleCompleteToggle,\n            label: node.data?.label || \"Untitled Node\",\n          },\n        }));\n\n        // Initialize with the processed nodes\n        setNodes(processedNodes);\n        // Store initial nodes in our ref for tracking\n        addedNodesRef.current = [...processedNodes];\n      }\n\n      // Process edges only after nodes are set\n      if (initialEdges?.length > 0) {\n        console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\n\n        // Create a map of node IDs for quick lookup\n        const nodeMap = new Map(initialNodes.map((node) => [node.id, node]));\n\n        // Validate edges against existing nodes to ensure they connect to valid nodes\n        const validEdges = initialEdges.filter((edge) => {\n          // Check that both source and target nodes exist\n          const sourceExists = nodeMap.has(edge.source);\n          const targetExists = nodeMap.has(edge.target);\n\n          if (!sourceExists || !targetExists) {\n            console.warn(\n              `[FLOW] Skipping invalid edge: Source exists: ${sourceExists}, Target exists: ${targetExists}`,\n              edge\n            );\n            return false;\n          }\n          return true;\n        });\n\n        // Process edges with additional data\n        const processedEdges = validEdges.map((edge) => ({\n          ...edge,\n          // Ensure edge has required properties\n          id: edge.id || `edge-${edge.source}-${edge.target}`,\n          type: edge.type || \"smoothstep\",\n          animated: edge.animated !== undefined ? edge.animated : true,\n          style: edge.style || { stroke: \"#6d28d9\" },\n          // Ensure handle positions are preserved\n          sourceHandle: edge.sourceHandle || edge.data?.sourceHandle || null,\n          targetHandle: edge.targetHandle || edge.data?.targetHandle || null,\n          // Store explicit connection information in data\n          data: {\n            ...(edge.data || {}),\n            sourceId: edge.source,\n            targetId: edge.target,\n            // Store handle positions in data for redundancy\n            sourceHandle: edge.sourceHandle || edge.data?.sourceHandle || null,\n            targetHandle: edge.targetHandle || edge.data?.targetHandle || null,\n            connectionType: edge.data?.connectionType || \"arrow\",\n          },\n          // Ensure markerEnd if using arrow type\n          ...(!edge.markerEnd &&\n            edge.data?.connectionType !== \"none\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n        }));\n\n        console.log(\"[FLOW] Processed edges:\", processedEdges.length);\n        setEdges(processedEdges);\n      }\n\n      // Mark as initialized to prevent future re-processing\n      isInitialMount.current = false;\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle]);\n\n  // Update parent component with internal changes - optimized for fewer updates\n  useEffect(() => {\n    // Skip during initial render or if no update function provided\n    if (isInitialMount.current || !onInternalUpdate) return;\n\n    // Use a debounce to avoid too frequent updates\n    const timer = setTimeout(() => {\n      console.log(`[FLOW] Debounced parent update: ${nodes.length} nodes`);\n      onInternalUpdate(nodes, edges);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Simplify the node preservation effect\n  useEffect(() => {\n    if (addedNodesRef.current.length > 0 && nodes.length === 0) {\n      // Only restore if we've lost ALL nodes (prevents loops)\n      console.log(\"[FLOW] Lost all nodes, restoring from ref\");\n      setNodes(addedNodesRef.current);\n    }\n  }, [nodes.length, setNodes]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack((prev) => [...prev, { nodes: [...nodes], edges: [...edges] }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n\n  const onConnect = useCallback(\n    (params) => {\n      saveCurrentState();\n\n      // Generate a more stable ID using only source and target\n      const edgeId = `edge-${params.source}-${params.target}`;\n\n      // Add marker and apply current edge style settings\n      const newEdge = {\n        ...params,\n        id: edgeId,\n        type: \"smoothstep\",\n        animated: true,\n        style: { stroke: \"#6d28d9\" },\n        // Store handle positions explicitly\n        sourceHandle: params.sourceHandle,\n        targetHandle: params.targetHandle,\n        // Only add marker if connection type is arrow\n        ...(connectionType === \"arrow\" && {\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20,\n            color: \"#6d28d9\",\n          },\n        }),\n        data: {\n          connectionType,\n          // Store source and target information explicitly\n          sourceId: params.source,\n          targetId: params.target,\n          // Store handle positions in data as well for redundancy\n          sourceHandle: params.sourceHandle,\n          targetHandle: params.targetHandle,\n        },\n      };\n\n      setEdges((eds) => {\n        // Check if this connection already exists\n        const existingEdgeIndex = eds.findIndex(\n          (e) =>\n            e.source === params.source &&\n            e.target === params.target &&\n            e.sourceHandle === params.sourceHandle &&\n            e.targetHandle === params.targetHandle\n        );\n\n        // If connection exists, update it rather than adding a new one\n        if (existingEdgeIndex >= 0) {\n          const updatedEdges = [...eds];\n          updatedEdges[existingEdgeIndex] = newEdge;\n          console.log(\"[FLOW] Updated existing edge:\", newEdge);\n          return updatedEdges;\n        } else {\n          const newEdges = addEdge(newEdge, eds);\n          console.log(\"[FLOW] Edge added:\", newEdge);\n          console.log(\"[FLOW] Current edges count:\", newEdges.length);\n          return newEdges;\n        }\n      });\n\n      toast({\n        title: \"Connection added\",\n        description: \"A new connection has been created between nodes\",\n      });\n    },\n    [setEdges, saveCurrentState, toast, connectionType]\n  );\n\n  const onNodeClick = useCallback(\n    (event, node) => {\n      event.stopPropagation();\n\n      if (editMode === \"delete\") {\n        // Delete mode: remove the node\n        saveCurrentState();\n        setNodes(nodes.filter((n) => n.id !== node.id));\n        // Also remove any connected edges\n        setEdges(\n          edges.filter((e) => e.source !== node.id && e.target !== node.id)\n        );\n\n        toast({\n          title: \"Node deleted\",\n          description: `${node.data.label} has been removed from the roadmap`,\n        });\n      } else if (editMode === \"connect\" && selectedNode) {\n        // Connect mode: create an edge between selectedNode and this node\n        if (selectedNode.id !== node.id) {\n          const newEdge = {\n            id: `edge-${Date.now()}`,\n            source: selectedNode.id,\n            target: node.id,\n            type: \"smoothstep\",\n            animated: true,\n            style: { stroke: \"#6d28d9\" },\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          };\n\n          saveCurrentState();\n          setEdges((eds) => [...eds, newEdge]);\n          setSelectedNode(null);\n          setEditMode(\"select\");\n\n          toast({\n            title: \"Connection created\",\n            description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\n          });\n        }\n      } else if (editMode === \"select\") {\n        // Regular select mode: show node details\n        setSelectedNode(node);\n      }\n    },\n    [\n      editMode,\n      selectedNode,\n      nodes,\n      edges,\n      setNodes,\n      setEdges,\n      saveCurrentState,\n      toast,\n    ]\n  );\n\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\",\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"[VIEW] Starting roadmap save process\");\n      console.log(\"[VIEW] Current nodes:\", nodes.length);\n      console.log(\"[VIEW] Current edges:\", edges.length);\n\n      // Đảm bảo không có node nào bị thiếu dữ liệu quan trọng\n      const cleanedNodes = nodes.map((node) => {\n        if (!node.id) {\n          console.error(\"[VIEW] Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random()\n            .toString(36)\n            .substring(2, 9)}`;\n        }\n\n        if (!node.position) {\n          console.error(\"[VIEW] Node missing position:\", node);\n          // Default position\n          node.position = { x: 0, y: 0 };\n        }\n\n        if (!node.data) {\n          console.error(\"[VIEW] Node missing data:\", node);\n          // Default minimal data\n          node.data = { label: \"Node \" + node.id };\n        }\n\n        // Đảm bảo node có đủ thông tin cần thiết\n        return {\n          ...node,\n          type: node.type || \"courseNode\", // Loại node mặc định\n          data: {\n            ...(node.data || {}),\n            id: node.id, // Đảm bảo ID trong data giống với ID của node\n            label: node.data?.label || \"Untitled\", // Ít nhất phải có nhãn\n          },\n        };\n      });\n\n      // Create a map of node IDs for quick lookup\n      const nodeIdMap = new Set(cleanedNodes.map((node) => node.id));\n\n      // Đảm bảo các edge có đủ thông tin cần thiết\n      const cleanedEdges = edges\n        .map((edge) => {\n          if (!edge.source || !edge.target) {\n            console.error(\"[VIEW] Edge missing source or target:\", edge);\n            return null; // Skip invalid edges\n          }\n\n          // Make sure source and target nodes still exist\n          const sourceExists = nodeIdMap.has(edge.source);\n          const targetExists = nodeIdMap.has(edge.target);\n\n          if (!sourceExists || !targetExists) {\n            console.error(\n              `[VIEW] Edge has invalid connections. Source exists: ${sourceExists}, Target exists: ${targetExists}`\n            );\n            return null; // Skip edges with missing endpoints\n          }\n\n          // Generate a consistent ID if missing\n          const edgeId = edge.id || `edge-${edge.source}-${edge.target}`;\n\n          // Ensure we have complete edge data\n          return {\n            ...edge,\n            id: edgeId,\n            type: edge.type || \"smoothstep\", // Loại edge mặc định\n            // Preserve handle positions explicitly\n            sourceHandle: edge.sourceHandle || edge.data?.sourceHandle || null,\n            targetHandle: edge.targetHandle || edge.data?.targetHandle || null,\n            // Store explicit source and target information\n            data: {\n              ...(edge.data || {}),\n              sourceId: edge.source,\n              targetId: edge.target,\n              // Store handle positions in data for redundancy\n              sourceHandle:\n                edge.sourceHandle || edge.data?.sourceHandle || null,\n              targetHandle:\n                edge.targetHandle || edge.data?.targetHandle || null,\n              connectionType: edge.data?.connectionType || \"arrow\",\n            },\n            // Ensure markerEnd is consistent with connection type\n            ...(!edge.markerEnd &&\n              edge.data?.connectionType !== \"none\" && {\n                markerEnd: {\n                  type: MarkerType.ArrowClosed,\n                  width: 20,\n                  height: 20,\n                  color: \"#6d28d9\",\n                },\n              }),\n          };\n        })\n        .filter(Boolean); // Lọc bỏ các edge null\n\n      console.log(\"[VIEW] Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"[VIEW] Node data sample:\", cleanedNodes[0]);\n      console.log(\"[VIEW] Cleaned edges for saving:\", cleanedEdges.length);\n      if (cleanedEdges.length > 0) {\n        console.log(\"[VIEW] Edge data sample:\", cleanedEdges[0]);\n      }\n\n      // Thông báo cho người dùng\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`,\n      });\n\n      // Lưu dữ liệu vào trạng thái cục bộ\n      setNodes(cleanedNodes);\n      setEdges(cleanedEdges);\n\n      // Gọi hàm callback onSave để lưu dữ liệu\n      console.log(\"[VIEW] Calling onSave with cleaned data\");\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"[VIEW] Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\",\n      });\n    }\n  }, [nodes, edges, onSave, toast, setNodes, setEdges]);\n\n  const handleAddCourse = useCallback(\n    (courseData) => {\n      saveCurrentState();\n\n      // Generate a unique node ID with timestamp for guaranteed uniqueness\n      const newNodeId = `node-${Date.now()}-${Math.floor(\n        Math.random() * 1000000\n      )}`;\n\n      // Simple positioning math to ensure nodes don't overlap\n      const nodeOffsets = [\n        { x: 0, y: 0 },\n        { x: 250, y: 0 },\n        { x: 0, y: 150 },\n        { x: 250, y: 150 },\n        { x: -250, y: 0 },\n        { x: -250, y: 150 },\n      ];\n\n      // Base position starts at center if possible\n      let baseX = 0,\n        baseY = 0;\n\n      if (reactFlowInstance) {\n        const viewport = reactFlowInstance.getViewport();\n        const screenCenter = reactFlowInstance.screenToFlowPosition({\n          x: window.innerWidth / 2,\n          y: window.innerHeight / 2,\n        });\n        baseX = screenCenter.x;\n        baseY = screenCenter.y;\n      }\n\n      // Choose offset based on node count (cycle through positions)\n      const offset = nodeOffsets[nodes.length % nodeOffsets.length];\n\n      // Final position\n      const position = {\n        x: baseX + offset.x,\n        y: baseY + offset.y,\n      };\n\n      console.log(\n        `[FLOW] Creating new node at position: x=${position.x}, y=${position.y}`\n      );\n\n      // Create the node with all required data\n      const newNode = {\n        id: newNodeId,\n        type: \"courseNode\",\n        position,\n        data: {\n          ...courseData,\n          id: newNodeId,\n          completed: false,\n          completedAt: null,\n          showQuickToggle: true,\n          onQuickToggle: handleCompleteToggle,\n        },\n      };\n\n      // Add node directly to state and tracking ref\n      setNodes((currentNodes) => [...currentNodes, newNode]);\n      addedNodesRef.current = [...addedNodesRef.current, newNode];\n\n      // Close dialog and show confirmation\n      setIsAddCourseOpen(false);\n      toast({\n        title: \"Course added\",\n        description: `${courseData.label} has been added to the roadmap`,\n      });\n\n      // Ensure newly added node is visible\n      setTimeout(() => {\n        if (reactFlowInstance) {\n          reactFlowInstance.fitView({\n            padding: 0.5,\n            includeHiddenNodes: false,\n            minZoom: 0.5,\n            maxZoom: 1.5,\n          });\n        }\n      }, 100);\n    },\n    [\n      setNodes,\n      toast,\n      reactFlowInstance,\n      nodes.length,\n      handleCompleteToggle,\n      saveCurrentState,\n    ]\n  );\n\n  // Ensure manually added nodes are preserved during state updates\n  useEffect(() => {\n    if (addedNodesRef.current.length > 0 && nodes.length > 0) {\n      // Get IDs of current nodes\n      const currentIds = new Set(nodes.map((n) => n.id));\n\n      // Find manually added nodes that are missing from current nodes\n      const missingNodes = addedNodesRef.current.filter(\n        (n) => !currentIds.has(n.id)\n      );\n\n      // If any manually added nodes are missing, add them back\n      if (missingNodes.length > 0) {\n        console.log(\n          `[FLOW] Restoring ${missingNodes.length} manually added nodes that were lost`\n        );\n        setNodes((currentNodes) => [...currentNodes, ...missingNodes]);\n      }\n    }\n  }, [nodes, setNodes]);\n\n  const handleDeleteNode = useCallback(\n    (nodeId) => {\n      saveCurrentState();\n\n      // Remove the node from state\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId));\n\n      // Remove the node from our tracking ref\n      addedNodesRef.current = addedNodesRef.current.filter(\n        (node) => node.id !== nodeId\n      );\n\n      // Remove connected edges\n      setEdges((eds) =>\n        eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\n      );\n\n      // Clear selection\n      setSelectedNode(null);\n\n      toast({\n        title: \"Node deleted\",\n        description: \"The node has been removed from the roadmap\",\n      });\n\n      // Update view after deletion\n      setTimeout(() => {\n        if (reactFlowInstance) {\n          reactFlowInstance.fitView({ padding: 0.5 });\n        }\n      }, 100);\n    },\n    [setNodes, setEdges, toast, saveCurrentState, reactFlowInstance]\n  );\n\n  const handleUpdateNodeStyle = useCallback(\n    (nodeId, style) => {\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                ...style,\n              },\n            };\n          }\n          return node;\n        })\n      );\n    },\n    [setNodes]\n  );\n\n  const onEdgeClick = useCallback(\n    (event, edge) => {\n      if (editMode === \"delete\") {\n        saveCurrentState();\n\n        // Delete the edge\n        setEdges((eds) => eds.filter((e) => e.id !== edge.id));\n\n        toast({\n          title: \"Connection removed\",\n          description: \"The connection between nodes has been removed\",\n        });\n      }\n    },\n    [setEdges, editMode, saveCurrentState, toast]\n  );\n\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const previousState = undoStack[undoStack.length - 1];\n\n    setRedoStack((prev) => [...prev, currentState]);\n    setUndoStack((prev) => prev.slice(0, -1));\n\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const nextState = redoStack[redoStack.length - 1];\n\n    setUndoStack((prev) => [...prev, currentState]);\n    setRedoStack((prev) => prev.slice(0, -1));\n\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(\n      (node) =>\n        node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\n    );\n  }, [nodes, selectedCategory]);\n\n  const handleStyleChange = useCallback(\n    (styles) => {\n      // Apply styles to selected node or default edge options\n      if (selectedNode) {\n        handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n      }\n\n      // Update default edge options\n      // (would be implemented in a full version)\n    },\n    [selectedNode, handleUpdateNodeStyle]\n  );\n\n  const handleConnectionTypeChange = useCallback((type) => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      // Instead of suppressing errors, let's implement a proper fix\n      let resizeObserverLoopErrCount = 0;\n      const debouncedResizeObserverCallback = debounce(() => {\n        resizeObserverLoopErrCount = 0;\n      }, 200);\n\n      const originalError = console.error;\n      console.error = (...args) => {\n        if (\n          args[0]?.includes?.(\"ResizeObserver loop\") ||\n          args[0]?.message?.includes?.(\"ResizeObserver loop\")\n        ) {\n          // Increment counter and invoke debounced callback\n          resizeObserverLoopErrCount += 1;\n          if (resizeObserverLoopErrCount <= 1) {\n            debouncedResizeObserverCallback();\n          }\n          // Suppress the error\n          return;\n        }\n        originalError.apply(console, args);\n      };\n\n      return () => {\n        console.error = originalError;\n      };\n    }\n\n    // Helper function for debounce\n    function debounce(fn, delay) {\n      let timeoutId;\n      return function () {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => fn.apply(this, arguments), delay);\n      };\n    }\n  }, []);\n\n  // Optimize edge rendering and enhance edge interaction\n  useEffect(() => {\n    // Configure ReactFlow for improved edge connection\n    const reactFlowEl = document.querySelector(\".react-flow\");\n    if (reactFlowEl) {\n      // Add custom class for better edge interaction\n      reactFlowEl.classList.add(\"improved-edge-connection\");\n    }\n\n    return () => {\n      if (reactFlowEl) {\n        reactFlowEl.classList.remove(\"improved-edge-connection\");\n      }\n    };\n  }, []);\n\n  // Ensure nodes are visible in the viewport\n  useEffect(() => {\n    if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\n      // Wait for rendering to complete, then fit view\n      const timeoutId = setTimeout(() => {\n        console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5,\n        });\n      }, 500);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [nodes.length, reactFlowInstance]);\n\n  // Add a debug useEffect to log whenever nodes change\n  useEffect(() => {\n    if (nodes.length > 0) {\n      console.log(\"[FLOW] Nodes changed, current count:\", nodes.length);\n    }\n  }, [nodes]);\n\n  // Cleanup on unmount to prevent memory leaks\n  useEffect(() => {\n    return () => {\n      // Clear any timeouts that might be pending\n      const viewportEl = document.querySelector(\".react-flow__viewport\");\n      if (viewportEl) {\n        viewportEl.style.transitionProperty = \"\";\n        viewportEl.style.transitionDuration = \"\";\n      }\n\n      console.log(\"[FLOW] Component unmounting, performing cleanup\");\n    };\n  }, []);\n\n  // Add special effect to prevent excessive console logging during development\n  useEffect(() => {\n    if (process.env.NODE_ENV === \"development\") {\n      const originalConsoleLog = console.log;\n      const flowLogPattern = /^\\[FLOW\\]/;\n\n      // Filter out excessive flow logs in development\n      console.log = (...args) => {\n        if (typeof args[0] === \"string\" && flowLogPattern.test(args[0])) {\n          // Only log important flow messages or when explicitly debugging\n          if (\n            args[0].includes(\"error\") ||\n            args[0].includes(\"Creating\") ||\n            args[0].includes(\"deleted\")\n          ) {\n            originalConsoleLog.apply(console, args);\n          }\n        } else {\n          originalConsoleLog.apply(console, args);\n        }\n      };\n\n      return () => {\n        console.log = originalConsoleLog;\n      };\n    }\n  }, []);\n\n  return (\n    <div ref={reactFlowWrapper} className=\"h-full w-full\">\n      {isEditing && showEditorPanel && (\n        <Panel position=\"right\" className=\"w-72 mr-2\">\n          <RoadmapEditorPanel\n            onStyleChange={handleStyleChange}\n            onConnectionTypeChange={handleConnectionTypeChange}\n            activeEdgeStyle={connectionType}\n            editMode={editMode}\n            onEditModeChange={(mode) => {\n              setEditMode(mode);\n              if (mode === \"connect\") {\n                toast({\n                  title: \"Connect mode\",\n                  description:\n                    \"Click on a source node, then click on a target node to create a connection\",\n                });\n              } else if (mode === \"delete\") {\n                toast({\n                  title: \"Delete mode\",\n                  description: \"Click on a node or connection to delete it\",\n                });\n              }\n            }}\n            onAddNodeClick={() => setIsAddCourseOpen(true)}\n          />\n        </Panel>\n      )}\n\n      {isEditing && (\n        <Panel\n          position=\"top-right\"\n          className=\"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\"\n        >\n          <div className=\"flex gap-2 justify-end\">\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleUndo}\n              disabled={undoStack.length === 0}\n            >\n              Undo\n            </Button>\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleRedo}\n              disabled={redoStack.length === 0}\n            >\n              Redo\n            </Button>\n            <Button\n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n              size=\"sm\"\n              onClick={handleSaveRoadmap}\n            >\n              <Save className=\"h-4 w-4 mr-1\" /> Save\n            </Button>\n          </div>\n        </Panel>\n      )}\n\n      <div className=\"h-full\">\n        <ReactFlow\n          key={`flow-${id}-${nodes.length}`}\n          nodes={filteredNodes()}\n          edges={edges}\n          onNodesChange={isEditing ? onNodesChange : undefined}\n          onEdgesChange={isEditing ? onEdgesChange : undefined}\n          onConnect={isEditing ? onConnect : undefined}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          onPaneClick={onPaneClick}\n          nodeTypes={nodeTypes}\n          onNodeDragStop={onNodeDragStop}\n          nodesDraggable={isEditing}\n          nodesConnectable={isEditing && editMode === \"connect\"}\n          elementsSelectable={!readOnly}\n          defaultEdgeOptions={{\n            type: \"smoothstep\",\n            style: { stroke: \"#6d28d9\" },\n            animated: true,\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          }}\n          fitView\n          fitViewOptions={{\n            padding: 0.5,\n            includeHiddenNodes: true,\n            minZoom: 0.5,\n            maxZoom: 1.5,\n          }}\n          minZoom={0.2}\n          maxZoom={4}\n          snapToGrid={true}\n          snapGrid={[10, 10]}\n          nodeExtent={[\n            [-2000, -2000],\n            [2000, 2000],\n          ]}\n          proOptions={{ hideAttribution: true }}\n          disableKeyboardA11y={true}\n          autoPanOnNodeDrag={false}\n          elevateEdgesOnSelect={false}\n          onInit={(instance) => {\n            // Use setTimeout to ensure proper initialization\n            setTimeout(() => {\n              if (nodes.length > 0) {\n                instance.fitView({ padding: 0.5 });\n                console.log(\n                  \"[FLOW] Flow initialized with nodes:\",\n                  nodes.length\n                );\n              }\n            }, 300);\n          }}\n        >\n          <Controls />\n          <MiniMap nodeStrokeWidth={3} zoomable pannable />\n          <Background variant=\"dots\" gap={12} size={1} color=\"#6d28d9\" />\n        </ReactFlow>\n      </div>\n\n      {selectedNode && (\n        <CourseInfoPanel\n          node={selectedNode}\n          onClose={() => setSelectedNode(null)}\n          onCompleteToggle={handleCompleteToggle}\n          onDelete={isEditing ? handleDeleteNode : undefined}\n          onUpdateStyle={handleUpdateNodeStyle}\n          isAdmin={isEditing}\n          readOnly={readOnly}\n        />\n      )}\n\n      {isAddCourseOpen && (\n        <AddCourseDialog\n          open={isAddCourseOpen}\n          onClose={() => setIsAddCourseOpen(false)}\n          onAdd={handleAddCourse}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function RoadmapView(props) {\n  console.log(\"[FLOW] RoadmapView wrapper rendering with props:\", {\n    id: props.id,\n    nodesCount: props.initialNodes?.length,\n    edgesCount: props.initialEdges?.length,\n  });\n\n  return (\n    <ReactFlowProvider>\n      <div className=\"w-full h-full\">\n        <RoadmapViewInner {...props} />\n      </div>\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}