{"ast":null,"code":"import _objectWithoutProperties from \"D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"state\"],\n  _excluded2 = [\"fetchStatus\"];\n// src/hydration.ts\nfunction defaultTransformerFn(data) {\n  return data;\n}\nfunction dehydrateMutation(mutation) {\n  return _objectSpread(_objectSpread({\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  }, mutation.options.scope && {\n    scope: mutation.options.scope\n  }), mutation.meta && {\n    meta: mutation.meta\n  });\n}\nfunction dehydrateQuery(query, serializeData, shouldRedactErrors) {\n  var _query$promise;\n  return _objectSpread(_objectSpread({\n    state: _objectSpread(_objectSpread({}, query.state), query.state.data !== void 0 && {\n      data: serializeData(query.state.data)\n    }),\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  }, query.state.status === \"pending\" && {\n    promise: (_query$promise = query.promise) === null || _query$promise === void 0 ? void 0 : _query$promise.then(serializeData).catch(error => {\n      if (!shouldRedactErrors(error)) {\n        return Promise.reject(error);\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        console.error(\"A query that was dehydrated as pending ended up rejecting. [\".concat(query.queryHash, \"]: \").concat(error, \"; The error will be redacted in production builds\"));\n      }\n      return Promise.reject(new Error(\"redacted\"));\n    })\n  }), query.meta && {\n    meta: query.meta\n  });\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\nfunction defaultShouldRedactErrors(_) {\n  return true;\n}\nfunction dehydrate(client) {\n  var _ref, _options$shouldDehydr, _client$getDefaultOpt, _ref2, _options$shouldDehydr2, _client$getDefaultOpt2, _ref3, _options$shouldRedact, _client$getDefaultOpt3, _ref4, _options$serializeDat, _client$getDefaultOpt4;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const filterMutation = (_ref = (_options$shouldDehydr = options.shouldDehydrateMutation) !== null && _options$shouldDehydr !== void 0 ? _options$shouldDehydr : (_client$getDefaultOpt = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt === void 0 ? void 0 : _client$getDefaultOpt.shouldDehydrateMutation) !== null && _ref !== void 0 ? _ref : defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = (_ref2 = (_options$shouldDehydr2 = options.shouldDehydrateQuery) !== null && _options$shouldDehydr2 !== void 0 ? _options$shouldDehydr2 : (_client$getDefaultOpt2 = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt2 === void 0 ? void 0 : _client$getDefaultOpt2.shouldDehydrateQuery) !== null && _ref2 !== void 0 ? _ref2 : defaultShouldDehydrateQuery;\n  const shouldRedactErrors = (_ref3 = (_options$shouldRedact = options.shouldRedactErrors) !== null && _options$shouldRedact !== void 0 ? _options$shouldRedact : (_client$getDefaultOpt3 = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt3 === void 0 ? void 0 : _client$getDefaultOpt3.shouldRedactErrors) !== null && _ref3 !== void 0 ? _ref3 : defaultShouldRedactErrors;\n  const serializeData = (_ref4 = (_options$serializeDat = options.serializeData) !== null && _options$serializeDat !== void 0 ? _options$serializeDat : (_client$getDefaultOpt4 = client.getDefaultOptions().dehydrate) === null || _client$getDefaultOpt4 === void 0 ? void 0 : _client$getDefaultOpt4.serializeData) !== null && _ref4 !== void 0 ? _ref4 : defaultTransformerFn;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  var _ref5, _options$defaultOptio, _options$defaultOptio2, _client$getDefaultOpt5;\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const deserializeData = (_ref5 = (_options$defaultOptio = options === null || options === void 0 || (_options$defaultOptio2 = options.defaultOptions) === null || _options$defaultOptio2 === void 0 ? void 0 : _options$defaultOptio2.deserializeData) !== null && _options$defaultOptio !== void 0 ? _options$defaultOptio : (_client$getDefaultOpt5 = client.getDefaultOptions().hydrate) === null || _client$getDefaultOpt5 === void 0 ? void 0 : _client$getDefaultOpt5.deserializeData) !== null && _ref5 !== void 0 ? _ref5 : defaultTransformerFn;\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(_ref6 => {\n    var _client$getDefaultOpt6, _options$defaultOptio3;\n    let {\n        state\n      } = _ref6,\n      mutationOptions = _objectWithoutProperties(_ref6, _excluded);\n    mutationCache.build(client, _objectSpread(_objectSpread(_objectSpread({}, (_client$getDefaultOpt6 = client.getDefaultOptions().hydrate) === null || _client$getDefaultOpt6 === void 0 ? void 0 : _client$getDefaultOpt6.mutations), options === null || options === void 0 || (_options$defaultOptio3 = options.defaultOptions) === null || _options$defaultOptio3 === void 0 ? void 0 : _options$defaultOptio3.mutations), mutationOptions), state);\n  });\n  queries.forEach(_ref7 => {\n    let {\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise\n    } = _ref7;\n    let query = queryCache.get(queryHash);\n    const data = state.data === void 0 ? state.data : deserializeData(state.data);\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const {\n            fetchStatus: _ignored\n          } = state,\n          serializedState = _objectWithoutProperties(state, _excluded2);\n        query.setState(_objectSpread(_objectSpread({}, serializedState), {}, {\n          data\n        }));\n      }\n    } else {\n      var _client$getDefaultOpt7, _options$defaultOptio4;\n      query = queryCache.build(client, _objectSpread(_objectSpread(_objectSpread({}, (_client$getDefaultOpt7 = client.getDefaultOptions().hydrate) === null || _client$getDefaultOpt7 === void 0 ? void 0 : _client$getDefaultOpt7.queries), options === null || options === void 0 || (_options$defaultOptio4 = options.defaultOptions) === null || _options$defaultOptio4 === void 0 ? void 0 : _options$defaultOptio4.queries), {}, {\n        queryKey,\n        queryHash,\n        meta\n      }), // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      _objectSpread(_objectSpread({}, state), {}, {\n        data,\n        fetchStatus: \"idle\"\n      }));\n    }\n    if (promise) {\n      const initialPromise = Promise.resolve(promise).then(deserializeData);\n      void query.fetch(void 0, {\n        initialPromise\n      });\n    }\n  });\n}\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"names":["defaultTransformerFn","data","dehydrateMutation","mutation","_objectSpread","mutationKey","options","state","scope","meta","dehydrateQuery","query","serializeData","shouldRedactErrors","_query$promise","queryKey","queryHash","status","promise","then","catch","error","Promise","reject","process","env","NODE_ENV","console","concat","Error","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","defaultShouldRedactErrors","_","dehydrate","client","_ref","_options$shouldDehydr","_client$getDefaultOpt","_ref2","_options$shouldDehydr2","_client$getDefaultOpt2","_ref3","_options$shouldRedact","_client$getDefaultOpt3","_ref4","_options$serializeDat","_client$getDefaultOpt4","arguments","length","undefined","filterMutation","shouldDehydrateMutation","getDefaultOptions","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","_ref5","_options$defaultOptio","_options$defaultOptio2","_client$getDefaultOpt5","mutationCache","queryCache","deserializeData","defaultOptions","forEach","_ref6","_client$getDefaultOpt6","_options$defaultOptio3","mutationOptions","_objectWithoutProperties","_excluded","build","_ref7","get","dataUpdatedAt","fetchStatus","_ignored","serializedState","_excluded2","setState","_client$getDefaultOpt7","_options$defaultOptio4","initialPromise","resolve","fetch"],"sources":["D:\\demo\\DACS-jules_wip_16596734084587186652\\it-roadmap\\client\\node_modules\\@tanstack\\query-core\\src\\hydration.ts"],"sourcesContent":["import type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n  shouldRedactErrors?: (error: unknown) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n  shouldRedactErrors: (error: unknown) => boolean,\n): DehydratedQuery {\n  return {\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (!shouldRedactErrors(error)) {\n          // Reject original error if it should not be redacted\n          return Promise.reject(error)\n        }\n        // If not in production, log original error before rejecting redacted error\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nfunction defaultShouldRedactErrors(_: unknown) {\n  return true\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const shouldRedactErrors =\n    options.shouldRedactErrors ??\n    client.getDefaultOptions().dehydrate?.shouldRedactErrors ??\n    defaultShouldRedactErrors\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query)\n        ? [dehydrateQuery(query, serializeData, shouldRedactErrors)]\n        : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta, promise }) => {\n    let query = queryCache.get(queryHash)\n\n    const data =\n      state.data === undefined ? state.data : deserializeData(state.data)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...serializedState } = state\n        query.setState({\n          ...serializedState,\n          data,\n        })\n      }\n    } else {\n      // Restore query\n      query = queryCache.build(\n        client,\n        {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta,\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: 'idle',\n        },\n      )\n    }\n\n    if (promise) {\n      // Note: `Promise.resolve` required cause\n      // RSC transformed promises are not thenable\n      const initialPromise = Promise.resolve(promise).then(deserializeData)\n\n      // this doesn't actually fetch - it just creates a retryer\n      // which will re-use the passed `initialPromise`\n      void query.fetch(undefined, { initialPromise })\n    }\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}