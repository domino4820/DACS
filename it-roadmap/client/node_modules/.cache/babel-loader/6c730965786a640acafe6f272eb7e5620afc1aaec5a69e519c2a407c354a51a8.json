{"ast":null,"code":"\"use client\";import _objectSpread from\"D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useCallback,useEffect,useRef,forwardRef,useImperativeHandle}from\"react\";import ReactFlow,{MiniMap,Controls,Background,useNodesState,useEdgesState,addEdge,Panel,ReactFlowProvider,useReactFlow,MarkerType,Connection}from\"reactflow\";import\"reactflow/dist/style.css\";import{Tabs,TabsList,TabsTrigger}from\"./ui/tabs\";import{Button}from\"./ui/button\";import{useToast}from\"./ui/use-toast\";import{PlusCircle,Save,Trash,Plus,X,Link as LinkIcon,LinkOff,Palette,ArrowLeft,ArrowRight}from\"lucide-react\";import CourseNode from\"./CourseNode\";import CourseInfoPanel from\"./CourseInfoPanel\";import AddCourseDialog from\"./AddCourseDialog\";import RoadmapEditorPanel from\"./RoadmapEditorPanel\";import{useAuth}from\"../context/AuthContext\";import{processEdgeConfig,createEdgeConnection,getEdgeDebugInfo,validateEdgeDirection}from\"../utils/edgeUtils\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const nodeTypes={courseNode:CourseNode};const RoadmapViewInner=/*#__PURE__*/forwardRef((_ref,ref)=>{let{id,initialNodes=[],initialEdges=[],isEditing=false,readOnly=false,onSave,onInternalUpdate}=_ref;const{toast}=useToast();const[nodes,setNodes,onNodesChange]=useNodesState(initialNodes);const[edges,setEdges,onEdgesChange]=useEdgesState(initialEdges);const[selectedNode,setSelectedNode]=useState(null);const[selectedCategory,setSelectedCategory]=useState(\"all\");const[isAddCourseOpen,setIsAddCourseOpen]=useState(false);const[editMode,setEditMode]=useState(\"select\");// select, connect, add, delete\nconst[connectionType,setConnectionType]=useState(\"arrow\");// arrow, none\nconst[showEditorPanel,setShowEditorPanel]=useState(true);const reactFlowWrapper=useRef(null);const reactFlowInstance=useReactFlow();const[undoStack,setUndoStack]=useState([]);const[redoStack,setRedoStack]=useState([]);const isInitialMount=useRef(true);// Keep track of manually added nodes to prevent them from being lost\nconst addedNodesRef=useRef([]);const{user,devMode,login,logout,isAuthenticated,isAdmin}=useAuth();const[isSidebarOpen,setIsSidebarOpen]=useState(false);// Save current state for undo feature\nconst saveCurrentState=useCallback(()=>{setUndoStack(prev=>[...prev,{nodes:[...nodes],edges:[...edges]}]);setRedoStack([]);},[nodes,edges]);// 获取当前的默认边缘配置\nconst getDefaultEdgeOptions=useCallback(()=>{return _objectSpread(_objectSpread({type:\"smoothstep\",style:{stroke:\"hsl(var(--muted-foreground))\"},animated:false},connectionType===\"arrow\"&&{markerEnd:{type:MarkerType.ArrowClosed,width:20,height:20,color:\"hsl(var(--primary))\"}}),{},{data:{connectionType}});},[connectionType]);// Define Save changes AFTER processEdgeConfig is defined\nconst saveChanges=useCallback(()=>{if(!onSave)return;try{console.log(\"[VIEW] Preparing to save changes\");console.log(\"[VIEW] Current nodes count:\",nodes.length);console.log(\"[VIEW] Current edges count:\",edges.length);// Ensure all nodes have required properties\nconst cleanedNodes=nodes.map(node=>{var _node$position,_node$position2,_node$data,_node$data2,_node$data3,_node$data4,_node$data5,_node$data6,_node$data7,_node$data8,_node$data9,_node$data0,_node$data1;// Create a clean copy of the node without React references\nreturn{id:node.id,type:node.type||\"courseNode\",position:{x:((_node$position=node.position)===null||_node$position===void 0?void 0:_node$position.x)||0,y:((_node$position2=node.position)===null||_node$position2===void 0?void 0:_node$position2.y)||0},// Extract only the data we need from node.data\ndata:{label:((_node$data=node.data)===null||_node$data===void 0?void 0:_node$data.label)||\"\",id:node.id,code:((_node$data2=node.data)===null||_node$data2===void 0?void 0:_node$data2.code)||\"\",description:((_node$data3=node.data)===null||_node$data3===void 0?void 0:_node$data3.description)||\"\",completed:((_node$data4=node.data)===null||_node$data4===void 0?void 0:_node$data4.completed)||false,completedAt:((_node$data5=node.data)===null||_node$data5===void 0?void 0:_node$data5.completedAt)||null,documents:((_node$data6=node.data)===null||_node$data6===void 0?void 0:_node$data6.documents)||[],courseId:(_node$data7=node.data)===null||_node$data7===void 0?void 0:_node$data7.courseId,nodeColor:(_node$data8=node.data)===null||_node$data8===void 0?void 0:_node$data8.nodeColor,nodeBgColor:(_node$data9=node.data)===null||_node$data9===void 0?void 0:_node$data9.nodeBgColor,textColor:(_node$data0=node.data)===null||_node$data0===void 0?void 0:_node$data0.textColor,fontSize:(_node$data1=node.data)===null||_node$data1===void 0?void 0:_node$data1.fontSize}};});// Remove any invalid edges\nconst nodeIdMap=new Set(cleanedNodes.map(node=>node.id));// 仅保留有效的边缘\nconst validEdges=edges.filter(edge=>{if(!edge||!edge.id||!edge.source||!edge.target){console.warn(\"[VIEW] Skipping invalid edge missing id/source/target\");return false;}return true;});// Clean edges - 确保它们连接到现有节点并保留正确的方向信息\nconst cleanedEdges=validEdges.filter(edge=>{// Check if source and target nodes exist\nconst sourceExists=nodeIdMap.has(edge.source);const targetExists=nodeIdMap.has(edge.target);if(!sourceExists||!targetExists){console.warn(\"[VIEW] Removing invalid edge - Source exists: \".concat(sourceExists,\", Target exists: \").concat(targetExists),edge);return false;}return true;}).map(edge=>{// 使用工具函数确保边缘数据的一致性和箭头方向正确\nreturn processEdgeConfig(edge);});console.log(\"[VIEW] Cleaned nodes count:\",cleanedNodes.length);console.log(\"[VIEW] Cleaned edges count:\",cleanedEdges.length);// Debug: 记录第一条边缘的方向信息\nif(cleanedEdges.length>0){console.log(\"[VIEW] First edge direction check:\",getEdgeDebugInfo(cleanedEdges[0]));}// 确保数据是数组\nconst finalNodes=Array.isArray(cleanedNodes)?cleanedNodes:[];const finalEdges=Array.isArray(cleanedEdges)?cleanedEdges:[];// 调用回调保存数据\nconsole.log(\"[VIEW] Calling onSave with:\",finalNodes.length,\"nodes and\",finalEdges.length,\"edges\");onSave(finalNodes,finalEdges);}catch(error){console.error(\"[VIEW] Error preparing data for save:\",error);toast({title:\"Lỗi khi chuẩn bị dữ liệu\",description:error.message,variant:\"destructive\"});}},[nodes,edges,onSave,toast]);// Now define handleCompleteToggle after saveChanges\nconst handleCompleteToggle=useCallback((nodeId,completed)=>{var _nodes$find;if(readOnly)return;// Get the current timestamp\nconst completedAt=completed?new Date().toISOString():null;setNodes(nds=>nds.map(node=>{if(node.id===nodeId){return _objectSpread(_objectSpread({},node),{},{data:_objectSpread(_objectSpread({},node.data),{},{completed,completedAt})});}return node;}));toast({title:completed?\"Course marked as completed\":\"Course marked as incomplete\",description:\"You've \".concat(completed?\"completed\":\"unmarked\",\" \").concat((_nodes$find=nodes.find(n=>n.id===nodeId))===null||_nodes$find===void 0?void 0:_nodes$find.data.label)});},[nodes,setNodes,toast,readOnly]);const handleAddCourse=useCallback(courseData=>{saveCurrentState();console.log(\"[ADD NODE] Adding new course node:\",courseData);// Generate a unique node ID with timestamp for guaranteed uniqueness\nconst newNodeId=\"node-\".concat(Date.now(),\"-\").concat(Math.floor(Math.random()*1000000));// Simple positioning math to ensure nodes don't overlap\nconst nodeOffsets=[{x:0,y:0},{x:250,y:0},{x:0,y:150},{x:250,y:150},{x:-250,y:0},{x:-250,y:150}];// Base position starts at center if possible\nlet baseX=0,baseY=0;if(reactFlowInstance){const viewport=reactFlowInstance.getViewport();const screenCenter=reactFlowInstance.screenToFlowPosition({x:window.innerWidth/2,y:window.innerHeight/2});baseX=screenCenter.x;baseY=screenCenter.y;}// Choose offset based on node count (cycle through positions)\nconst offset=nodeOffsets[nodes.length%nodeOffsets.length];// Final position\nconst position={x:baseX+offset.x,y:baseY+offset.y};console.log(\"[ADD NODE] Creating new node at position: x=\".concat(position.x,\", y=\").concat(position.y));// Create the node with all required data\nconst newNode={id:newNodeId,type:\"courseNode\",position,data:_objectSpread(_objectSpread({},courseData),{},{id:newNodeId,completed:false,completedAt:null,showQuickToggle:true,onQuickToggle:handleCompleteToggle})};console.log(\"[ADD NODE] New node created:\",newNode);// Add node directly to state and tracking ref\nsetNodes(currentNodes=>{const updatedNodes=[...currentNodes,newNode];console.log(\"[ADD NODE] Updated nodes state, new count:\",updatedNodes.length);return updatedNodes;});addedNodesRef.current=[...addedNodesRef.current,newNode];console.log(\"[ADD NODE] Added to tracking ref, new count:\",addedNodesRef.current.length);// Close dialog and show confirmation\nsetIsAddCourseOpen(false);toast({title:\"Course added\",description:\"\".concat(courseData.label,\" has been added to the roadmap\")});// Save changes immediately if we're in edit mode to prevent loss\nif(isEditing&&onSave){console.log(\"[ADD NODE] Auto-saving changes after adding node\");setTimeout(()=>{saveChanges();},500);}// Ensure newly added node is visible\nsetTimeout(()=>{if(reactFlowInstance){reactFlowInstance.fitView({padding:0.5,includeHiddenNodes:false,minZoom:0.5,maxZoom:1.5});}},100);},[setNodes,toast,reactFlowInstance,nodes.length,handleCompleteToggle,saveCurrentState,saveChanges,isEditing,onSave]);// Set initial nodes and edges when they change\nuseEffect(()=>{// Skip effect if no initial data\nif(!(initialNodes!==null&&initialNodes!==void 0&&initialNodes.length)&&!(initialEdges!==null&&initialEdges!==void 0&&initialEdges.length)){return;}// Only run once during initial mount to avoid re-render cycles\nif(isInitialMount.current){console.log(\"[FLOW] Initial setup with nodes:\",initialNodes===null||initialNodes===void 0?void 0:initialNodes.length);if((initialNodes===null||initialNodes===void 0?void 0:initialNodes.length)>0){// Process nodes once with required properties for display\nconst processedNodes=initialNodes.map(node=>{var _node$data10;return _objectSpread(_objectSpread({},node),{},{type:\"courseNode\",position:node.position||{x:Math.random()*500,y:Math.random()*300},data:_objectSpread(_objectSpread({},node.data),{},{showQuickToggle:true,onQuickToggle:handleCompleteToggle,label:((_node$data10=node.data)===null||_node$data10===void 0?void 0:_node$data10.label)||\"Untitled Node\"})});});// Initialize with the processed nodes\nsetNodes(processedNodes);// Store initial nodes in our ref for tracking\naddedNodesRef.current=[...processedNodes];}// Process edges only after nodes are set\nif((initialEdges===null||initialEdges===void 0?void 0:initialEdges.length)>0){console.log(\"[FLOW] Setting initial edges:\",initialEdges.length);// Create a map of node IDs for quick lookup\nconst nodeMap=new Map(initialNodes.map(node=>[node.id,node]));// Validate edges against existing nodes to ensure they connect to valid nodes\nconst validEdges=initialEdges.filter(edge=>{// Check that both source and target nodes exist\nconst sourceExists=nodeMap.has(edge.source);const targetExists=nodeMap.has(edge.target);if(!sourceExists||!targetExists){console.warn(\"[FLOW] Skipping invalid edge: Source exists: \".concat(sourceExists,\", Target exists: \").concat(targetExists),edge);return false;}return true;});// Log the handle positions found in the data\nconsole.log(\"[FLOW] Edge handle data:\",validEdges.map(edge=>{var _edge$data,_edge$data2;return{id:edge.id,sourceHandle:edge.sourceHandle||((_edge$data=edge.data)===null||_edge$data===void 0?void 0:_edge$data.sourceHandle),targetHandle:edge.targetHandle||((_edge$data2=edge.data)===null||_edge$data2===void 0?void 0:_edge$data2.targetHandle)};}));// Process edges with additional data\nconst processedEdges=validEdges.map(edge=>{var _edge$data3,_edge$data4;// Extract handle information from wherever it might be stored\nconst sourceHandle=edge.sourceHandle||((_edge$data3=edge.data)===null||_edge$data3===void 0?void 0:_edge$data3.sourceHandle)||null;const targetHandle=edge.targetHandle||((_edge$data4=edge.data)===null||_edge$data4===void 0?void 0:_edge$data4.targetHandle)||null;// Generate a consistent ID based on all connection points\nconst edgeId=edge.id||\"edge-\".concat(edge.source,\"-\").concat(sourceHandle||\"default\",\"-\").concat(edge.target,\"-\").concat(targetHandle||\"default\");// 创建基本边缘属性\nconst baseEdge=_objectSpread(_objectSpread({},edge),{},{id:edgeId,type:edge.type||\"smoothstep\",animated:edge.animated!==undefined?edge.animated:true,style:edge.style||{stroke:\"hsl(var(--muted-foreground))\"},sourceHandle:sourceHandle,targetHandle:targetHandle,className:\"custom-edge source-\".concat(sourceHandle||\"default\",\" target-\").concat(targetHandle||\"default\")});// 使用外部工具函数确保边缘配置一致性\nreturn processEdgeConfig(baseEdge);});console.log(\"[FLOW] Processed edges:\",processedEdges.length);setEdges(processedEdges);}// Mark as initialized to prevent future re-processing\nisInitialMount.current=false;}},[initialNodes,initialEdges,setNodes,setEdges,handleCompleteToggle]);// Update parent component with internal changes - optimized for fewer updates\nuseEffect(()=>{// Skip during initial render or if no update function provided\nif(isInitialMount.current||!onInternalUpdate)return;// Use a debounce to avoid too frequent updates\nconst timer=setTimeout(()=>{console.log(\"[FLOW] Debounced parent update: \".concat(nodes.length,\" nodes\"));onInternalUpdate(nodes,edges);},500);return()=>clearTimeout(timer);},[nodes,edges,onInternalUpdate]);// Simplify the node preservation effect\nuseEffect(()=>{if(addedNodesRef.current.length>0&&nodes.length===0){// Only restore if we've lost ALL nodes (prevents loops)\nconsole.log(\"[FLOW] Lost all nodes, restoring from ref\");setNodes(addedNodesRef.current);}},[nodes.length,setNodes]);const onNodeClick=useCallback((event,node)=>{event.stopPropagation();if(editMode===\"delete\"){// Delete mode: remove the node\nsaveCurrentState();setNodes(nodes.filter(n=>n.id!==node.id));// Also remove any connected edges\nsetEdges(edges.filter(e=>e.source!==node.id&&e.target!==node.id));toast({title:\"Node deleted\",description:\"\".concat(node.data.label,\" has been removed from the roadmap\")});}else if(editMode===\"connect\"&&selectedNode){// Connect mode: create an edge between selectedNode and this node\nif(selectedNode.id!==node.id){const newEdge=_objectSpread(_objectSpread({id:\"edge-\".concat(Date.now()),source:selectedNode.id,target:node.id,type:\"smoothstep\",animated:true,style:{stroke:\"hsl(var(--muted-foreground))\"}},connectionType===\"arrow\"&&{markerEnd:{type:MarkerType.ArrowClosed,width:20,height:20,color:\"hsl(var(--primary))\"}}),{},{data:{connectionType}});saveCurrentState();setEdges(eds=>[...eds,newEdge]);setSelectedNode(null);setEditMode(\"select\");toast({title:\"Connection created\",description:\"Connected \".concat(selectedNode.data.label,\" to \").concat(node.data.label)});}}else if(editMode===\"select\"){// Regular select mode: show node details\nsetSelectedNode(node);}},[editMode,selectedNode,nodes,edges,setNodes,setEdges,saveCurrentState,toast]);const onPaneClick=useCallback(()=>{// In regular mode, clicking the pane should deselect the node\nsetSelectedNode(null);// If in connect mode but no node selected, return to select mode\nif(editMode===\"connect\"&&selectedNode){setEditMode(\"select\");setSelectedNode(null);toast({title:\"Connection cancelled\",description:\"Node connection has been cancelled\"});}},[editMode,selectedNode,toast]);// Update node positions when they are dragged\nconst onNodeDragStop=useCallback(()=>{if(isEditing){saveCurrentState();}},[isEditing,saveCurrentState]);// Handle category filtering\nconst filteredNodes=useCallback(()=>{if(selectedCategory===\"all\"){return nodes;}return nodes.filter(node=>{var _node$data$category;return((_node$data$category=node.data.category)===null||_node$data$category===void 0?void 0:_node$data$category.toLowerCase())===selectedCategory.toLowerCase();});},[nodes,selectedCategory]);const handleStyleChange=useCallback(styles=>{// Apply styles to selected node or default edge options\nif(selectedNode){handleCompleteToggle(selectedNode.id,styles.nodeStyle.completed);}// Update default edge options\n// (would be implemented in a full version)\n},[selectedNode,handleCompleteToggle]);const handleConnectionTypeChange=useCallback(type=>{setConnectionType(type);},[]);// Ngăn chặn cảnh báo ResizeObserver\nuseEffect(()=>{// Chỉ áp dụng trong môi trường phát triển\nif(process.env.NODE_ENV!==\"production\"){// Instead of suppressing errors, let's implement a proper fix\nlet resizeObserverLoopErrCount=0;const debouncedResizeObserverCallback=debounce(()=>{resizeObserverLoopErrCount=0;},200);const originalError=console.error;console.error=function(){var _args$,_args$$includes,_args$2,_args$2$message,_args$2$message$inclu;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if((_args$=args[0])!==null&&_args$!==void 0&&(_args$$includes=_args$.includes)!==null&&_args$$includes!==void 0&&_args$$includes.call(_args$,\"ResizeObserver loop\")||(_args$2=args[0])!==null&&_args$2!==void 0&&(_args$2$message=_args$2.message)!==null&&_args$2$message!==void 0&&(_args$2$message$inclu=_args$2$message.includes)!==null&&_args$2$message$inclu!==void 0&&_args$2$message$inclu.call(_args$2$message,\"ResizeObserver loop\")){// Increment counter and invoke debounced callback\nresizeObserverLoopErrCount+=1;if(resizeObserverLoopErrCount<=1){debouncedResizeObserverCallback();}// Suppress the error\nreturn;}originalError.apply(console,args);};return()=>{console.error=originalError;};}// Helper function for debounce\nfunction debounce(fn,delay){let timeoutId;return function(){clearTimeout(timeoutId);timeoutId=setTimeout(()=>fn.apply(this,arguments),delay);};}},[]);// Optimize edge rendering and enhance edge interaction\nuseEffect(()=>{// Configure ReactFlow for improved edge connection\nconst reactFlowEl=document.querySelector(\".react-flow\");if(reactFlowEl){// Add custom class for better edge interaction\nreactFlowEl.classList.add(\"improved-edge-connection\");}return()=>{if(reactFlowEl){reactFlowEl.classList.remove(\"improved-edge-connection\");}};},[]);// Ensure nodes are visible in the viewport\nuseEffect(()=>{if(!isInitialMount.current&&nodes.length>0&&reactFlowInstance){// Wait for rendering to complete, then fit view\nconst timeoutId=setTimeout(()=>{console.log(\"[FLOW] Fitting view to ensure nodes are visible\");reactFlowInstance.fitView({padding:0.5,includeHiddenNodes:true,minZoom:0.5,maxZoom:1.5});},500);return()=>clearTimeout(timeoutId);}},[nodes.length,reactFlowInstance]);// Add a debug useEffect to log whenever nodes change\nuseEffect(()=>{if(nodes.length>0){console.log(\"[FLOW] Nodes changed, current count:\",nodes.length);}},[nodes]);// Cleanup on unmount to prevent memory leaks\nuseEffect(()=>{return()=>{// Clear any timeouts that might be pending\nconst viewportEl=document.querySelector(\".react-flow__viewport\");if(viewportEl){viewportEl.style.transitionProperty=\"\";viewportEl.style.transitionDuration=\"\";}console.log(\"[FLOW] Component unmounting, performing cleanup\");};},[]);// Add special effect to prevent excessive console logging during development\nuseEffect(()=>{if(process.env.NODE_ENV===\"development\"){const originalConsoleLog=console.log;const flowLogPattern=/^\\[FLOW\\]/;// Filter out excessive flow logs in development\nconsole.log=function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}if(typeof args[0]===\"string\"&&flowLogPattern.test(args[0])){// Only log important flow messages or when explicitly debugging\nif(args[0].includes(\"error\")||args[0].includes(\"Creating\")||args[0].includes(\"deleted\")){originalConsoleLog.apply(console,args);}}else{originalConsoleLog.apply(console,args);}};return()=>{console.log=originalConsoleLog;};}},[]);// Expose methods to parent component through ref\nuseImperativeHandle(ref,()=>({saveChanges}),[saveChanges]);const onConnect=useCallback(params=>{if(readOnly)return false;console.log(\"[CONNECT] Creating new connection:\",params);// Save existing state for potential undo\nsaveCurrentState();// 使用工具函数创建新的边缘连接\nconst newEdge=createEdgeConnection(params,connectionType);if(!newEdge){console.error(\"[CONNECT] Failed to create edge\");return false;}console.log(\"[CONNECT] New edge created:\",getEdgeDebugInfo(newEdge));// Add edge to state\nsetEdges(eds=>{const updatedEdges=addEdge(newEdge,eds);console.log(\"[CONNECT] Updated edges, new count:\",updatedEdges.length);return updatedEdges;});// Show confirmation\ntoast({title:\"Connection created\",description:\"A new connection has been added to the roadmap\"});// Save changes immediately if we're in edit mode to prevent loss\nif(isEditing&&onSave){console.log(\"[CONNECT] Auto-saving changes after adding edge\");setTimeout(()=>{saveChanges();},500);}return true;},[connectionType,readOnly,setEdges,saveCurrentState,toast,isEditing,onSave,saveChanges]);const handleDeleteNode=useCallback(nodeId=>{saveCurrentState();// Remove the node from state\nsetNodes(nds=>nds.filter(node=>node.id!==nodeId));// Remove the node from our tracking ref\naddedNodesRef.current=addedNodesRef.current.filter(node=>node.id!==nodeId);// Remove connected edges\nsetEdges(eds=>eds.filter(edge=>edge.source!==nodeId&&edge.target!==nodeId));// Clear selection\nsetSelectedNode(null);toast({title:\"Node deleted\",description:\"The node has been removed from the roadmap\"});// Update view after deletion\nsetTimeout(()=>{if(reactFlowInstance){reactFlowInstance.fitView({padding:0.5});}},100);},[setNodes,setEdges,toast,saveCurrentState,reactFlowInstance,setSelectedNode]);const handleUpdateNodeStyle=useCallback((nodeId,style)=>{setNodes(nds=>nds.map(node=>{if(node.id===nodeId){return _objectSpread(_objectSpread({},node),{},{data:_objectSpread(_objectSpread({},node.data),style)});}return node;}));},[setNodes]);const onEdgeClick=useCallback((event,edge)=>{if(editMode===\"delete\"){saveCurrentState();// Delete the edge\nsetEdges(eds=>eds.filter(e=>e.id!==edge.id));toast({title:\"Connection removed\",description:\"The connection between nodes has been removed\"});}},[setEdges,editMode,saveCurrentState,toast]);const handleUndo=useCallback(()=>{if(undoStack.length===0)return;const currentState={nodes:[...nodes],edges:[...edges]};const previousState=undoStack[undoStack.length-1];setRedoStack(prev=>[...prev,currentState]);setUndoStack(prev=>prev.slice(0,-1));setNodes(previousState.nodes);setEdges(previousState.edges);toast({title:\"Undo\",description:\"Previous action undone\"});},[undoStack,redoStack,nodes,edges,setNodes,setEdges,toast]);const handleRedo=useCallback(()=>{if(redoStack.length===0)return;const currentState={nodes:[...nodes],edges:[...edges]};const nextState=redoStack[redoStack.length-1];setUndoStack(prev=>[...prev,currentState]);setRedoStack(prev=>prev.slice(0,-1));setNodes(nextState.nodes);setEdges(nextState.edges);toast({title:\"Redo\",description:\"Action redone\"});},[undoStack,redoStack,nodes,edges,setNodes,setEdges,toast]);// Debug for admin permissions\nconsole.log(\"MainNav rendering with user:\",user);console.log(\"User is admin?\",isAdmin);return/*#__PURE__*/_jsxs(\"div\",{ref:reactFlowWrapper,className:\"h-full w-full\",children:[isEditing&&showEditorPanel&&/*#__PURE__*/_jsx(Panel,{position:\"right\",className:\"w-72 mr-2\",children:/*#__PURE__*/_jsx(RoadmapEditorPanel,{onStyleChange:handleStyleChange,onConnectionTypeChange:handleConnectionTypeChange,activeEdgeStyle:connectionType,editMode:editMode,onEditModeChange:mode=>{setEditMode(mode);if(mode===\"connect\"){toast({title:\"Connect mode\",description:\"Click on a source node, then click on a target node to create a connection\"});}else if(mode===\"delete\"){toast({title:\"Delete mode\",description:\"Click on a node or connection to delete it\"});}},onAddNodeClick:()=>setIsAddCourseOpen(true)})}),isEditing&&/*#__PURE__*/_jsx(Panel,{position:\"top-right\",className:\"bg-card p-3 rounded-sm border border-[hsl(var(--border))] shadow-md mb-4\"// Updated Panel classes, kept mr-[300px] for now\n,children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-2 justify-end\",children:[/*#__PURE__*/_jsx(Button,{size:\"sm\",variant:\"outline\"// Changed to variant\n,onClick:handleUndo,disabled:undoStack.length===0,children:/*#__PURE__*/_jsx(ArrowLeft,{className:\"h-4 w-4\"})}),/*#__PURE__*/_jsx(Button,{size:\"sm\",variant:\"outline\"// Changed to variant\n,onClick:handleRedo,disabled:redoStack.length===0,children:/*#__PURE__*/_jsx(ArrowRight,{className:\"h-4 w-4\"})}),/*#__PURE__*/_jsxs(Button,{variant:\"default\"// Changed to variant\n,size:\"sm\",onClick:saveChanges,children:[/*#__PURE__*/_jsx(Save,{className:\"h-4 w-4 mr-1\"}),\" Save\"]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"h-full\",children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:filteredNodes(),edges:edges,onNodesChange:isEditing?onNodesChange:undefined,onEdgesChange:isEditing?onEdgesChange:undefined,onConnect:isEditing?onConnect:undefined,onNodeClick:onNodeClick,onEdgeClick:onEdgeClick,onPaneClick:onPaneClick,nodeTypes:nodeTypes,onNodeDragStop:onNodeDragStop,nodesDraggable:isEditing,nodesConnectable:isEditing&&editMode===\"connect\",elementsSelectable:!readOnly,defaultEdgeOptions:getDefaultEdgeOptions(),fitView:true,fitViewOptions:{padding:0.5,includeHiddenNodes:true,minZoom:0.5,maxZoom:1.5},minZoom:0.2,maxZoom:4,snapToGrid:true,snapGrid:[10,10],nodeExtent:[[-2000,-2000],[2000,2000]],proOptions:{hideAttribution:true},disableKeyboardA11y:true,autoPanOnNodeDrag:false,elevateEdgesOnSelect:false,onInit:instance=>{// Use setTimeout to ensure proper initialization\nsetTimeout(()=>{if(nodes.length>0){instance.fitView({padding:0.5});console.log(\"[FLOW] Flow initialized with nodes:\",nodes.length);}},300);}// Add custom edge rendering to set data attributes based on handle positions\n,edgeUpdaterRadius:10,edgesUpdatable:true,edgesFocusable:true,onEdgeUpdate:(oldEdge,newConnection)=>{setEdges(els=>els.map(edge=>{if(edge.id===oldEdge.id){// Generate new ID based on new connection points\nconst newId=\"edge-\".concat(newConnection.source,\"-\").concat(newConnection.sourceHandle||\"default\",\"-\").concat(newConnection.target,\"-\").concat(newConnection.targetHandle||\"default\");return _objectSpread(_objectSpread({},edge),{},{id:newId,source:newConnection.source,target:newConnection.target,sourceHandle:newConnection.sourceHandle,targetHandle:newConnection.targetHandle,data:_objectSpread(_objectSpread({},edge.data),{},{sourceId:newConnection.source,targetId:newConnection.target,sourceHandle:newConnection.sourceHandle,targetHandle:newConnection.targetHandle,sourceHandleType:newConnection.sourceHandle||\"default\",targetHandleType:newConnection.targetHandle||\"default\"})});}return edge;}));return true;},children:[/*#__PURE__*/_jsx(Controls,{}),/*#__PURE__*/_jsx(MiniMap,{nodeStrokeWidth:3,zoomable:true,pannable:true}),/*#__PURE__*/_jsx(Background,{variant:\"dots\",gap:12,size:1,color:\"hsl(var(--border))\"}),\" \",edges.map(edge=>/*#__PURE__*/_jsx(\"div\",{style:{display:\"none\"},children:/*#__PURE__*/_jsx(\"div\",{\"data-edgeid\":edge.id,\"data-sourcehandle\":edge.sourceHandle||\"default\",\"data-targethandle\":edge.targetHandle||\"default\"})},\"handle-\".concat(edge.id)))]},\"flow-\".concat(id,\"-\").concat(nodes.length))}),selectedNode&&/*#__PURE__*/_jsx(CourseInfoPanel,{node:selectedNode,onClose:()=>setSelectedNode(null),onCompleteToggle:handleCompleteToggle,onDelete:isEditing?handleDeleteNode:undefined,onUpdateStyle:handleUpdateNodeStyle,isAdmin:isEditing,readOnly:readOnly}),isAddCourseOpen&&/*#__PURE__*/_jsx(AddCourseDialog,{open:isAddCourseOpen,onClose:()=>setIsAddCourseOpen(false),onAdd:handleAddCourse})]});});const RoadmapView=/*#__PURE__*/forwardRef((props,ref)=>{var _props$initialNodes,_props$initialEdges;console.log(\"[FLOW] RoadmapView wrapper rendering with props:\",{id:props.id,nodesCount:(_props$initialNodes=props.initialNodes)===null||_props$initialNodes===void 0?void 0:_props$initialNodes.length,edgesCount:(_props$initialEdges=props.initialEdges)===null||_props$initialEdges===void 0?void 0:_props$initialEdges.length});return/*#__PURE__*/_jsx(ReactFlowProvider,{children:/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full\",children:/*#__PURE__*/_jsx(RoadmapViewInner,_objectSpread({ref:ref},props))})});});export default RoadmapView;","map":{"version":3,"names":["_objectSpread","useState","useCallback","useEffect","useRef","forwardRef","useImperativeHandle","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","Palette","ArrowLeft","ArrowRight","CourseNode","CourseInfoPanel","AddCourseDialog","RoadmapEditorPanel","useAuth","processEdgeConfig","createEdgeConnection","getEdgeDebugInfo","validateEdgeDirection","jsx","_jsx","jsxs","_jsxs","nodeTypes","courseNode","RoadmapViewInner","_ref","ref","id","initialNodes","initialEdges","isEditing","readOnly","onSave","onInternalUpdate","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","connectionType","setConnectionType","showEditorPanel","setShowEditorPanel","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","isInitialMount","addedNodesRef","user","devMode","login","logout","isAuthenticated","isAdmin","isSidebarOpen","setIsSidebarOpen","saveCurrentState","prev","getDefaultEdgeOptions","type","style","stroke","animated","markerEnd","ArrowClosed","width","height","color","data","saveChanges","console","log","length","cleanedNodes","map","node","_node$position","_node$position2","_node$data","_node$data2","_node$data3","_node$data4","_node$data5","_node$data6","_node$data7","_node$data8","_node$data9","_node$data0","_node$data1","position","x","y","label","code","description","completed","completedAt","documents","courseId","nodeColor","nodeBgColor","textColor","fontSize","nodeIdMap","Set","validEdges","filter","edge","source","target","warn","cleanedEdges","sourceExists","has","targetExists","concat","finalNodes","Array","isArray","finalEdges","error","title","message","variant","handleCompleteToggle","nodeId","_nodes$find","Date","toISOString","nds","find","n","handleAddCourse","courseData","newNodeId","now","Math","floor","random","nodeOffsets","baseX","baseY","viewport","getViewport","screenCenter","screenToFlowPosition","window","innerWidth","innerHeight","offset","newNode","showQuickToggle","onQuickToggle","currentNodes","updatedNodes","current","setTimeout","fitView","padding","includeHiddenNodes","minZoom","maxZoom","processedNodes","_node$data10","nodeMap","Map","_edge$data","_edge$data2","sourceHandle","targetHandle","processedEdges","_edge$data3","_edge$data4","edgeId","baseEdge","undefined","className","timer","clearTimeout","onNodeClick","event","stopPropagation","e","newEdge","eds","onPaneClick","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","handleStyleChange","styles","nodeStyle","handleConnectionTypeChange","process","env","NODE_ENV","resizeObserverLoopErrCount","debouncedResizeObserverCallback","debounce","originalError","_args$","_args$$includes","_args$2","_args$2$message","_args$2$message$inclu","_len","arguments","args","_key","includes","call","apply","fn","delay","timeoutId","reactFlowEl","document","querySelector","classList","add","remove","viewportEl","transitionProperty","transitionDuration","originalConsoleLog","flowLogPattern","_len2","_key2","test","onConnect","params","updatedEdges","handleDeleteNode","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","children","onStyleChange","onConnectionTypeChange","activeEdgeStyle","onEditModeChange","mode","onAddNodeClick","size","onClick","disabled","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitViewOptions","snapToGrid","snapGrid","nodeExtent","proOptions","hideAttribution","disableKeyboardA11y","autoPanOnNodeDrag","elevateEdgesOnSelect","onInit","instance","edgeUpdaterRadius","edgesUpdatable","edgesFocusable","onEdgeUpdate","oldEdge","newConnection","els","newId","sourceId","targetId","sourceHandleType","targetHandleType","nodeStrokeWidth","zoomable","pannable","gap","display","onClose","onCompleteToggle","onDelete","onUpdateStyle","open","onAdd","RoadmapView","props","_props$initialNodes","_props$initialEdges","nodesCount","edgesCount"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport ReactFlow, {\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n  Panel,\r\n  ReactFlowProvider,\r\n  useReactFlow,\r\n  MarkerType,\r\n  Connection,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\r\nimport { Button } from \"./ui/button\";\r\nimport { useToast } from \"./ui/use-toast\";\r\nimport {\r\n  PlusCircle,\r\n  Save,\r\n  Trash,\r\n  Plus,\r\n  X,\r\n  Link as LinkIcon,\r\n  LinkOff,\r\n  Palette,\r\n  ArrowLeft,\r\n  ArrowRight,\r\n} from \"lucide-react\";\r\nimport CourseNode from \"./CourseNode\";\r\nimport CourseInfoPanel from \"./CourseInfoPanel\";\r\nimport AddCourseDialog from \"./AddCourseDialog\";\r\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport {\r\n  processEdgeConfig,\r\n  createEdgeConnection,\r\n  getEdgeDebugInfo,\r\n  validateEdgeDirection,\r\n} from \"../utils/edgeUtils\";\r\n\r\nconst nodeTypes = {\r\n  courseNode: CourseNode,\r\n};\r\n\r\nconst RoadmapViewInner = forwardRef(\r\n  (\r\n    {\r\n      id,\r\n      initialNodes = [],\r\n      initialEdges = [],\r\n      isEditing = false,\r\n      readOnly = false,\r\n      onSave,\r\n      onInternalUpdate,\r\n    },\r\n    ref\r\n  ) => {\r\n    const { toast } = useToast();\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n    const [selectedCategory, setSelectedCategory] = useState(\"all\");\r\n    const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\r\n    const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\r\n    const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\r\n    const [showEditorPanel, setShowEditorPanel] = useState(true);\r\n    const reactFlowWrapper = useRef(null);\r\n    const reactFlowInstance = useReactFlow();\r\n    const [undoStack, setUndoStack] = useState([]);\r\n    const [redoStack, setRedoStack] = useState([]);\r\n    const isInitialMount = useRef(true);\r\n    // Keep track of manually added nodes to prevent them from being lost\r\n    const addedNodesRef = useRef([]);\r\n    const { user, devMode, login, logout, isAuthenticated, isAdmin } =\r\n      useAuth();\r\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n    // Save current state for undo feature\r\n    const saveCurrentState = useCallback(() => {\r\n      setUndoStack((prev) => [\r\n        ...prev,\r\n        { nodes: [...nodes], edges: [...edges] },\r\n      ]);\r\n      setRedoStack([]);\r\n    }, [nodes, edges]);\r\n\r\n    // 获取当前的默认边缘配置\r\n    const getDefaultEdgeOptions = useCallback(() => {\r\n      return {\r\n        type: \"smoothstep\",\r\n        style: { stroke: \"hsl(var(--muted-foreground))\" },\r\n        animated: false,\r\n        ...(connectionType === \"arrow\" && {\r\n          markerEnd: {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: \"hsl(var(--primary))\",\r\n          },\r\n        }),\r\n        data: {\r\n          connectionType,\r\n        },\r\n      };\r\n    }, [connectionType]);\r\n\r\n    // Define Save changes AFTER processEdgeConfig is defined\r\n    const saveChanges = useCallback(() => {\r\n      if (!onSave) return;\r\n\r\n      try {\r\n        console.log(\"[VIEW] Preparing to save changes\");\r\n        console.log(\"[VIEW] Current nodes count:\", nodes.length);\r\n        console.log(\"[VIEW] Current edges count:\", edges.length);\r\n\r\n        // Ensure all nodes have required properties\r\n        const cleanedNodes = nodes.map((node) => {\r\n          // Create a clean copy of the node without React references\r\n          return {\r\n            id: node.id,\r\n            type: node.type || \"courseNode\",\r\n            position: {\r\n              x: node.position?.x || 0,\r\n              y: node.position?.y || 0,\r\n            },\r\n            // Extract only the data we need from node.data\r\n            data: {\r\n              label: node.data?.label || \"\",\r\n              id: node.id,\r\n              code: node.data?.code || \"\",\r\n              description: node.data?.description || \"\",\r\n              completed: node.data?.completed || false,\r\n              completedAt: node.data?.completedAt || null,\r\n              documents: node.data?.documents || [],\r\n              courseId: node.data?.courseId,\r\n              nodeColor: node.data?.nodeColor,\r\n              nodeBgColor: node.data?.nodeBgColor,\r\n              textColor: node.data?.textColor,\r\n              fontSize: node.data?.fontSize,\r\n            },\r\n          };\r\n        });\r\n\r\n        // Remove any invalid edges\r\n        const nodeIdMap = new Set(cleanedNodes.map((node) => node.id));\r\n\r\n        // 仅保留有效的边缘\r\n        const validEdges = edges.filter((edge) => {\r\n          if (!edge || !edge.id || !edge.source || !edge.target) {\r\n            console.warn(\r\n              \"[VIEW] Skipping invalid edge missing id/source/target\"\r\n            );\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n\r\n        // Clean edges - 确保它们连接到现有节点并保留正确的方向信息\r\n        const cleanedEdges = validEdges\r\n          .filter((edge) => {\r\n            // Check if source and target nodes exist\r\n            const sourceExists = nodeIdMap.has(edge.source);\r\n            const targetExists = nodeIdMap.has(edge.target);\r\n\r\n            if (!sourceExists || !targetExists) {\r\n              console.warn(\r\n                `[VIEW] Removing invalid edge - Source exists: ${sourceExists}, Target exists: ${targetExists}`,\r\n                edge\r\n              );\r\n              return false;\r\n            }\r\n            return true;\r\n          })\r\n          .map((edge) => {\r\n            // 使用工具函数确保边缘数据的一致性和箭头方向正确\r\n            return processEdgeConfig(edge);\r\n          });\r\n\r\n        console.log(\"[VIEW] Cleaned nodes count:\", cleanedNodes.length);\r\n        console.log(\"[VIEW] Cleaned edges count:\", cleanedEdges.length);\r\n\r\n        // Debug: 记录第一条边缘的方向信息\r\n        if (cleanedEdges.length > 0) {\r\n          console.log(\r\n            \"[VIEW] First edge direction check:\",\r\n            getEdgeDebugInfo(cleanedEdges[0])\r\n          );\r\n        }\r\n\r\n        // 确保数据是数组\r\n        const finalNodes = Array.isArray(cleanedNodes) ? cleanedNodes : [];\r\n        const finalEdges = Array.isArray(cleanedEdges) ? cleanedEdges : [];\r\n\r\n        // 调用回调保存数据\r\n        console.log(\r\n          \"[VIEW] Calling onSave with:\",\r\n          finalNodes.length,\r\n          \"nodes and\",\r\n          finalEdges.length,\r\n          \"edges\"\r\n        );\r\n        onSave(finalNodes, finalEdges);\r\n      } catch (error) {\r\n        console.error(\"[VIEW] Error preparing data for save:\", error);\r\n        toast({\r\n          title: \"Lỗi khi chuẩn bị dữ liệu\",\r\n          description: error.message,\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n    }, [nodes, edges, onSave, toast]);\r\n\r\n    // Now define handleCompleteToggle after saveChanges\r\n    const handleCompleteToggle = useCallback(\r\n      (nodeId, completed) => {\r\n        if (readOnly) return;\r\n\r\n        // Get the current timestamp\r\n        const completedAt = completed ? new Date().toISOString() : null;\r\n\r\n        setNodes((nds) =>\r\n          nds.map((node) => {\r\n            if (node.id === nodeId) {\r\n              return {\r\n                ...node,\r\n                data: {\r\n                  ...node.data,\r\n                  completed,\r\n                  completedAt,\r\n                },\r\n              };\r\n            }\r\n            return node;\r\n          })\r\n        );\r\n\r\n        toast({\r\n          title: completed\r\n            ? \"Course marked as completed\"\r\n            : \"Course marked as incomplete\",\r\n          description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\r\n            nodes.find((n) => n.id === nodeId)?.data.label\r\n          }`,\r\n        });\r\n      },\r\n      [nodes, setNodes, toast, readOnly]\r\n    );\r\n\r\n    const handleAddCourse = useCallback(\r\n      (courseData) => {\r\n        saveCurrentState();\r\n\r\n        console.log(\"[ADD NODE] Adding new course node:\", courseData);\r\n\r\n        // Generate a unique node ID with timestamp for guaranteed uniqueness\r\n        const newNodeId = `node-${Date.now()}-${Math.floor(\r\n          Math.random() * 1000000\r\n        )}`;\r\n\r\n        // Simple positioning math to ensure nodes don't overlap\r\n        const nodeOffsets = [\r\n          { x: 0, y: 0 },\r\n          { x: 250, y: 0 },\r\n          { x: 0, y: 150 },\r\n          { x: 250, y: 150 },\r\n          { x: -250, y: 0 },\r\n          { x: -250, y: 150 },\r\n        ];\r\n\r\n        // Base position starts at center if possible\r\n        let baseX = 0,\r\n          baseY = 0;\r\n\r\n        if (reactFlowInstance) {\r\n          const viewport = reactFlowInstance.getViewport();\r\n          const screenCenter = reactFlowInstance.screenToFlowPosition({\r\n            x: window.innerWidth / 2,\r\n            y: window.innerHeight / 2,\r\n          });\r\n          baseX = screenCenter.x;\r\n          baseY = screenCenter.y;\r\n        }\r\n\r\n        // Choose offset based on node count (cycle through positions)\r\n        const offset = nodeOffsets[nodes.length % nodeOffsets.length];\r\n\r\n        // Final position\r\n        const position = {\r\n          x: baseX + offset.x,\r\n          y: baseY + offset.y,\r\n        };\r\n\r\n        console.log(\r\n          `[ADD NODE] Creating new node at position: x=${position.x}, y=${position.y}`\r\n        );\r\n\r\n        // Create the node with all required data\r\n        const newNode = {\r\n          id: newNodeId,\r\n          type: \"courseNode\",\r\n          position,\r\n          data: {\r\n            ...courseData,\r\n            id: newNodeId,\r\n            completed: false,\r\n            completedAt: null,\r\n            showQuickToggle: true,\r\n            onQuickToggle: handleCompleteToggle,\r\n          },\r\n        };\r\n\r\n        console.log(\"[ADD NODE] New node created:\", newNode);\r\n\r\n        // Add node directly to state and tracking ref\r\n        setNodes((currentNodes) => {\r\n          const updatedNodes = [...currentNodes, newNode];\r\n          console.log(\r\n            \"[ADD NODE] Updated nodes state, new count:\",\r\n            updatedNodes.length\r\n          );\r\n          return updatedNodes;\r\n        });\r\n\r\n        addedNodesRef.current = [...addedNodesRef.current, newNode];\r\n        console.log(\r\n          \"[ADD NODE] Added to tracking ref, new count:\",\r\n          addedNodesRef.current.length\r\n        );\r\n\r\n        // Close dialog and show confirmation\r\n        setIsAddCourseOpen(false);\r\n        toast({\r\n          title: \"Course added\",\r\n          description: `${courseData.label} has been added to the roadmap`,\r\n        });\r\n\r\n        // Save changes immediately if we're in edit mode to prevent loss\r\n        if (isEditing && onSave) {\r\n          console.log(\"[ADD NODE] Auto-saving changes after adding node\");\r\n          setTimeout(() => {\r\n            saveChanges();\r\n          }, 500);\r\n        }\r\n\r\n        // Ensure newly added node is visible\r\n        setTimeout(() => {\r\n          if (reactFlowInstance) {\r\n            reactFlowInstance.fitView({\r\n              padding: 0.5,\r\n              includeHiddenNodes: false,\r\n              minZoom: 0.5,\r\n              maxZoom: 1.5,\r\n            });\r\n          }\r\n        }, 100);\r\n      },\r\n      [\r\n        setNodes,\r\n        toast,\r\n        reactFlowInstance,\r\n        nodes.length,\r\n        handleCompleteToggle,\r\n        saveCurrentState,\r\n        saveChanges,\r\n        isEditing,\r\n        onSave,\r\n      ]\r\n    );\r\n\r\n    // Set initial nodes and edges when they change\r\n    useEffect(() => {\r\n      // Skip effect if no initial data\r\n      if (!initialNodes?.length && !initialEdges?.length) {\r\n        return;\r\n      }\r\n\r\n      // Only run once during initial mount to avoid re-render cycles\r\n      if (isInitialMount.current) {\r\n        console.log(\"[FLOW] Initial setup with nodes:\", initialNodes?.length);\r\n\r\n        if (initialNodes?.length > 0) {\r\n          // Process nodes once with required properties for display\r\n          const processedNodes = initialNodes.map((node) => ({\r\n            ...node,\r\n            type: \"courseNode\",\r\n            position: node.position || {\r\n              x: Math.random() * 500,\r\n              y: Math.random() * 300,\r\n            },\r\n            data: {\r\n              ...node.data,\r\n              showQuickToggle: true,\r\n              onQuickToggle: handleCompleteToggle,\r\n              label: node.data?.label || \"Untitled Node\",\r\n            },\r\n          }));\r\n\r\n          // Initialize with the processed nodes\r\n          setNodes(processedNodes);\r\n          // Store initial nodes in our ref for tracking\r\n          addedNodesRef.current = [...processedNodes];\r\n        }\r\n\r\n        // Process edges only after nodes are set\r\n        if (initialEdges?.length > 0) {\r\n          console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\r\n\r\n          // Create a map of node IDs for quick lookup\r\n          const nodeMap = new Map(initialNodes.map((node) => [node.id, node]));\r\n\r\n          // Validate edges against existing nodes to ensure they connect to valid nodes\r\n          const validEdges = initialEdges.filter((edge) => {\r\n            // Check that both source and target nodes exist\r\n            const sourceExists = nodeMap.has(edge.source);\r\n            const targetExists = nodeMap.has(edge.target);\r\n\r\n            if (!sourceExists || !targetExists) {\r\n              console.warn(\r\n                `[FLOW] Skipping invalid edge: Source exists: ${sourceExists}, Target exists: ${targetExists}`,\r\n                edge\r\n              );\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n\r\n          // Log the handle positions found in the data\r\n          console.log(\r\n            \"[FLOW] Edge handle data:\",\r\n            validEdges.map((edge) => ({\r\n              id: edge.id,\r\n              sourceHandle: edge.sourceHandle || edge.data?.sourceHandle,\r\n              targetHandle: edge.targetHandle || edge.data?.targetHandle,\r\n            }))\r\n          );\r\n\r\n          // Process edges with additional data\r\n          const processedEdges = validEdges.map((edge) => {\r\n            // Extract handle information from wherever it might be stored\r\n            const sourceHandle =\r\n              edge.sourceHandle || edge.data?.sourceHandle || null;\r\n            const targetHandle =\r\n              edge.targetHandle || edge.data?.targetHandle || null;\r\n\r\n            // Generate a consistent ID based on all connection points\r\n            const edgeId =\r\n              edge.id ||\r\n              `edge-${edge.source}-${sourceHandle || \"default\"}-${\r\n                edge.target\r\n              }-${targetHandle || \"default\"}`;\r\n\r\n            // 创建基本边缘属性\r\n            const baseEdge = {\r\n              ...edge,\r\n              id: edgeId,\r\n              type: edge.type || \"smoothstep\",\r\n              animated: edge.animated !== undefined ? edge.animated : true,\r\n              style: edge.style || { stroke: \"hsl(var(--muted-foreground))\" },\r\n              sourceHandle: sourceHandle,\r\n              targetHandle: targetHandle,\r\n              className: `custom-edge source-${\r\n                sourceHandle || \"default\"\r\n              } target-${targetHandle || \"default\"}`,\r\n            };\r\n\r\n            // 使用外部工具函数确保边缘配置一致性\r\n            return processEdgeConfig(baseEdge);\r\n          });\r\n\r\n          console.log(\"[FLOW] Processed edges:\", processedEdges.length);\r\n          setEdges(processedEdges);\r\n        }\r\n\r\n        // Mark as initialized to prevent future re-processing\r\n        isInitialMount.current = false;\r\n      }\r\n    }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle]);\r\n\r\n    // Update parent component with internal changes - optimized for fewer updates\r\n    useEffect(() => {\r\n      // Skip during initial render or if no update function provided\r\n      if (isInitialMount.current || !onInternalUpdate) return;\r\n\r\n      // Use a debounce to avoid too frequent updates\r\n      const timer = setTimeout(() => {\r\n        console.log(`[FLOW] Debounced parent update: ${nodes.length} nodes`);\r\n        onInternalUpdate(nodes, edges);\r\n      }, 500);\r\n\r\n      return () => clearTimeout(timer);\r\n    }, [nodes, edges, onInternalUpdate]);\r\n\r\n    // Simplify the node preservation effect\r\n    useEffect(() => {\r\n      if (addedNodesRef.current.length > 0 && nodes.length === 0) {\r\n        // Only restore if we've lost ALL nodes (prevents loops)\r\n        console.log(\"[FLOW] Lost all nodes, restoring from ref\");\r\n        setNodes(addedNodesRef.current);\r\n      }\r\n    }, [nodes.length, setNodes]);\r\n\r\n    const onNodeClick = useCallback(\r\n      (event, node) => {\r\n        event.stopPropagation();\r\n\r\n        if (editMode === \"delete\") {\r\n          // Delete mode: remove the node\r\n          saveCurrentState();\r\n          setNodes(nodes.filter((n) => n.id !== node.id));\r\n          // Also remove any connected edges\r\n          setEdges(\r\n            edges.filter((e) => e.source !== node.id && e.target !== node.id)\r\n          );\r\n\r\n          toast({\r\n            title: \"Node deleted\",\r\n            description: `${node.data.label} has been removed from the roadmap`,\r\n          });\r\n        } else if (editMode === \"connect\" && selectedNode) {\r\n          // Connect mode: create an edge between selectedNode and this node\r\n          if (selectedNode.id !== node.id) {\r\n            const newEdge = {\r\n              id: `edge-${Date.now()}`,\r\n              source: selectedNode.id,\r\n              target: node.id,\r\n              type: \"smoothstep\",\r\n              animated: true,\r\n              style: { stroke: \"hsl(var(--muted-foreground))\" },\r\n              ...(connectionType === \"arrow\" && {\r\n                markerEnd: {\r\n                  type: MarkerType.ArrowClosed,\r\n                  width: 20,\r\n                  height: 20,\r\n                  color: \"hsl(var(--primary))\",\r\n                },\r\n              }),\r\n              data: {\r\n                connectionType,\r\n              },\r\n            };\r\n\r\n            saveCurrentState();\r\n            setEdges((eds) => [...eds, newEdge]);\r\n            setSelectedNode(null);\r\n            setEditMode(\"select\");\r\n\r\n            toast({\r\n              title: \"Connection created\",\r\n              description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\r\n            });\r\n          }\r\n        } else if (editMode === \"select\") {\r\n          // Regular select mode: show node details\r\n          setSelectedNode(node);\r\n        }\r\n      },\r\n      [\r\n        editMode,\r\n        selectedNode,\r\n        nodes,\r\n        edges,\r\n        setNodes,\r\n        setEdges,\r\n        saveCurrentState,\r\n        toast,\r\n      ]\r\n    );\r\n\r\n    const onPaneClick = useCallback(() => {\r\n      // In regular mode, clicking the pane should deselect the node\r\n      setSelectedNode(null);\r\n\r\n      // If in connect mode but no node selected, return to select mode\r\n      if (editMode === \"connect\" && selectedNode) {\r\n        setEditMode(\"select\");\r\n        setSelectedNode(null);\r\n        toast({\r\n          title: \"Connection cancelled\",\r\n          description: \"Node connection has been cancelled\",\r\n        });\r\n      }\r\n    }, [editMode, selectedNode, toast]);\r\n\r\n    // Update node positions when they are dragged\r\n    const onNodeDragStop = useCallback(() => {\r\n      if (isEditing) {\r\n        saveCurrentState();\r\n      }\r\n    }, [isEditing, saveCurrentState]);\r\n\r\n    // Handle category filtering\r\n    const filteredNodes = useCallback(() => {\r\n      if (selectedCategory === \"all\") {\r\n        return nodes;\r\n      }\r\n      return nodes.filter(\r\n        (node) =>\r\n          node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\r\n      );\r\n    }, [nodes, selectedCategory]);\r\n\r\n    const handleStyleChange = useCallback(\r\n      (styles) => {\r\n        // Apply styles to selected node or default edge options\r\n        if (selectedNode) {\r\n          handleCompleteToggle(selectedNode.id, styles.nodeStyle.completed);\r\n        }\r\n\r\n        // Update default edge options\r\n        // (would be implemented in a full version)\r\n      },\r\n      [selectedNode, handleCompleteToggle]\r\n    );\r\n\r\n    const handleConnectionTypeChange = useCallback((type) => {\r\n      setConnectionType(type);\r\n    }, []);\r\n\r\n    // Ngăn chặn cảnh báo ResizeObserver\r\n    useEffect(() => {\r\n      // Chỉ áp dụng trong môi trường phát triển\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        // Instead of suppressing errors, let's implement a proper fix\r\n        let resizeObserverLoopErrCount = 0;\r\n        const debouncedResizeObserverCallback = debounce(() => {\r\n          resizeObserverLoopErrCount = 0;\r\n        }, 200);\r\n\r\n        const originalError = console.error;\r\n        console.error = (...args) => {\r\n          if (\r\n            args[0]?.includes?.(\"ResizeObserver loop\") ||\r\n            args[0]?.message?.includes?.(\"ResizeObserver loop\")\r\n          ) {\r\n            // Increment counter and invoke debounced callback\r\n            resizeObserverLoopErrCount += 1;\r\n            if (resizeObserverLoopErrCount <= 1) {\r\n              debouncedResizeObserverCallback();\r\n            }\r\n            // Suppress the error\r\n            return;\r\n          }\r\n          originalError.apply(console, args);\r\n        };\r\n\r\n        return () => {\r\n          console.error = originalError;\r\n        };\r\n      }\r\n\r\n      // Helper function for debounce\r\n      function debounce(fn, delay) {\r\n        let timeoutId;\r\n        return function () {\r\n          clearTimeout(timeoutId);\r\n          timeoutId = setTimeout(() => fn.apply(this, arguments), delay);\r\n        };\r\n      }\r\n    }, []);\r\n\r\n    // Optimize edge rendering and enhance edge interaction\r\n    useEffect(() => {\r\n      // Configure ReactFlow for improved edge connection\r\n      const reactFlowEl = document.querySelector(\".react-flow\");\r\n      if (reactFlowEl) {\r\n        // Add custom class for better edge interaction\r\n        reactFlowEl.classList.add(\"improved-edge-connection\");\r\n      }\r\n\r\n      return () => {\r\n        if (reactFlowEl) {\r\n          reactFlowEl.classList.remove(\"improved-edge-connection\");\r\n        }\r\n      };\r\n    }, []);\r\n\r\n    // Ensure nodes are visible in the viewport\r\n    useEffect(() => {\r\n      if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\r\n        // Wait for rendering to complete, then fit view\r\n        const timeoutId = setTimeout(() => {\r\n          console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\r\n          reactFlowInstance.fitView({\r\n            padding: 0.5,\r\n            includeHiddenNodes: true,\r\n            minZoom: 0.5,\r\n            maxZoom: 1.5,\r\n          });\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeoutId);\r\n      }\r\n    }, [nodes.length, reactFlowInstance]);\r\n\r\n    // Add a debug useEffect to log whenever nodes change\r\n    useEffect(() => {\r\n      if (nodes.length > 0) {\r\n        console.log(\"[FLOW] Nodes changed, current count:\", nodes.length);\r\n      }\r\n    }, [nodes]);\r\n\r\n    // Cleanup on unmount to prevent memory leaks\r\n    useEffect(() => {\r\n      return () => {\r\n        // Clear any timeouts that might be pending\r\n        const viewportEl = document.querySelector(\".react-flow__viewport\");\r\n        if (viewportEl) {\r\n          viewportEl.style.transitionProperty = \"\";\r\n          viewportEl.style.transitionDuration = \"\";\r\n        }\r\n\r\n        console.log(\"[FLOW] Component unmounting, performing cleanup\");\r\n      };\r\n    }, []);\r\n\r\n    // Add special effect to prevent excessive console logging during development\r\n    useEffect(() => {\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        const originalConsoleLog = console.log;\r\n        const flowLogPattern = /^\\[FLOW\\]/;\r\n\r\n        // Filter out excessive flow logs in development\r\n        console.log = (...args) => {\r\n          if (typeof args[0] === \"string\" && flowLogPattern.test(args[0])) {\r\n            // Only log important flow messages or when explicitly debugging\r\n            if (\r\n              args[0].includes(\"error\") ||\r\n              args[0].includes(\"Creating\") ||\r\n              args[0].includes(\"deleted\")\r\n            ) {\r\n              originalConsoleLog.apply(console, args);\r\n            }\r\n          } else {\r\n            originalConsoleLog.apply(console, args);\r\n          }\r\n        };\r\n\r\n        return () => {\r\n          console.log = originalConsoleLog;\r\n        };\r\n      }\r\n    }, []);\r\n\r\n    // Expose methods to parent component through ref\r\n    useImperativeHandle(\r\n      ref,\r\n      () => ({\r\n        saveChanges,\r\n      }),\r\n      [saveChanges]\r\n    );\r\n\r\n    const onConnect = useCallback(\r\n      (params) => {\r\n        if (readOnly) return false;\r\n\r\n        console.log(\"[CONNECT] Creating new connection:\", params);\r\n\r\n        // Save existing state for potential undo\r\n        saveCurrentState();\r\n\r\n        // 使用工具函数创建新的边缘连接\r\n        const newEdge = createEdgeConnection(params, connectionType);\r\n\r\n        if (!newEdge) {\r\n          console.error(\"[CONNECT] Failed to create edge\");\r\n          return false;\r\n        }\r\n\r\n        console.log(\"[CONNECT] New edge created:\", getEdgeDebugInfo(newEdge));\r\n\r\n        // Add edge to state\r\n        setEdges((eds) => {\r\n          const updatedEdges = addEdge(newEdge, eds);\r\n          console.log(\r\n            \"[CONNECT] Updated edges, new count:\",\r\n            updatedEdges.length\r\n          );\r\n          return updatedEdges;\r\n        });\r\n\r\n        // Show confirmation\r\n        toast({\r\n          title: \"Connection created\",\r\n          description: \"A new connection has been added to the roadmap\",\r\n        });\r\n\r\n        // Save changes immediately if we're in edit mode to prevent loss\r\n        if (isEditing && onSave) {\r\n          console.log(\"[CONNECT] Auto-saving changes after adding edge\");\r\n          setTimeout(() => {\r\n            saveChanges();\r\n          }, 500);\r\n        }\r\n\r\n        return true;\r\n      },\r\n      [\r\n        connectionType,\r\n        readOnly,\r\n        setEdges,\r\n        saveCurrentState,\r\n        toast,\r\n        isEditing,\r\n        onSave,\r\n        saveChanges,\r\n      ]\r\n    );\r\n\r\n    const handleDeleteNode = useCallback(\r\n      (nodeId) => {\r\n        saveCurrentState();\r\n\r\n        // Remove the node from state\r\n        setNodes((nds) => nds.filter((node) => node.id !== nodeId));\r\n\r\n        // Remove the node from our tracking ref\r\n        addedNodesRef.current = addedNodesRef.current.filter(\r\n          (node) => node.id !== nodeId\r\n        );\r\n\r\n        // Remove connected edges\r\n        setEdges((eds) =>\r\n          eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\r\n        );\r\n\r\n        // Clear selection\r\n        setSelectedNode(null);\r\n\r\n        toast({\r\n          title: \"Node deleted\",\r\n          description: \"The node has been removed from the roadmap\",\r\n        });\r\n\r\n        // Update view after deletion\r\n        setTimeout(() => {\r\n          if (reactFlowInstance) {\r\n            reactFlowInstance.fitView({ padding: 0.5 });\r\n          }\r\n        }, 100);\r\n      },\r\n      [\r\n        setNodes,\r\n        setEdges,\r\n        toast,\r\n        saveCurrentState,\r\n        reactFlowInstance,\r\n        setSelectedNode,\r\n      ]\r\n    );\r\n\r\n    const handleUpdateNodeStyle = useCallback(\r\n      (nodeId, style) => {\r\n        setNodes((nds) =>\r\n          nds.map((node) => {\r\n            if (node.id === nodeId) {\r\n              return {\r\n                ...node,\r\n                data: {\r\n                  ...node.data,\r\n                  ...style,\r\n                },\r\n              };\r\n            }\r\n            return node;\r\n          })\r\n        );\r\n      },\r\n      [setNodes]\r\n    );\r\n\r\n    const onEdgeClick = useCallback(\r\n      (event, edge) => {\r\n        if (editMode === \"delete\") {\r\n          saveCurrentState();\r\n\r\n          // Delete the edge\r\n          setEdges((eds) => eds.filter((e) => e.id !== edge.id));\r\n\r\n          toast({\r\n            title: \"Connection removed\",\r\n            description: \"The connection between nodes has been removed\",\r\n          });\r\n        }\r\n      },\r\n      [setEdges, editMode, saveCurrentState, toast]\r\n    );\r\n\r\n    const handleUndo = useCallback(() => {\r\n      if (undoStack.length === 0) return;\r\n\r\n      const currentState = { nodes: [...nodes], edges: [...edges] };\r\n      const previousState = undoStack[undoStack.length - 1];\r\n\r\n      setRedoStack((prev) => [...prev, currentState]);\r\n      setUndoStack((prev) => prev.slice(0, -1));\r\n\r\n      setNodes(previousState.nodes);\r\n      setEdges(previousState.edges);\r\n\r\n      toast({\r\n        title: \"Undo\",\r\n        description: \"Previous action undone\",\r\n      });\r\n    }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\r\n\r\n    const handleRedo = useCallback(() => {\r\n      if (redoStack.length === 0) return;\r\n\r\n      const currentState = { nodes: [...nodes], edges: [...edges] };\r\n      const nextState = redoStack[redoStack.length - 1];\r\n\r\n      setUndoStack((prev) => [...prev, currentState]);\r\n      setRedoStack((prev) => prev.slice(0, -1));\r\n\r\n      setNodes(nextState.nodes);\r\n      setEdges(nextState.edges);\r\n\r\n      toast({\r\n        title: \"Redo\",\r\n        description: \"Action redone\",\r\n      });\r\n    }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\r\n\r\n    // Debug for admin permissions\r\n    console.log(\"MainNav rendering with user:\", user);\r\n    console.log(\"User is admin?\", isAdmin);\r\n\r\n    return (\r\n      <div ref={reactFlowWrapper} className=\"h-full w-full\">\r\n        {isEditing && showEditorPanel && (\r\n          <Panel position=\"right\" className=\"w-72 mr-2\">\r\n            <RoadmapEditorPanel\r\n              onStyleChange={handleStyleChange}\r\n              onConnectionTypeChange={handleConnectionTypeChange}\r\n              activeEdgeStyle={connectionType}\r\n              editMode={editMode}\r\n              onEditModeChange={(mode) => {\r\n                setEditMode(mode);\r\n                if (mode === \"connect\") {\r\n                  toast({\r\n                    title: \"Connect mode\",\r\n                    description:\r\n                      \"Click on a source node, then click on a target node to create a connection\",\r\n                  });\r\n                } else if (mode === \"delete\") {\r\n                  toast({\r\n                    title: \"Delete mode\",\r\n                    description: \"Click on a node or connection to delete it\",\r\n                  });\r\n                }\r\n              }}\r\n              onAddNodeClick={() => setIsAddCourseOpen(true)}\r\n            />\r\n          </Panel>\r\n        )}\r\n\r\n        {isEditing && (\r\n          <Panel\r\n            position=\"top-right\"\r\n            className=\"bg-card p-3 rounded-sm border border-[hsl(var(--border))] shadow-md mb-4\" // Updated Panel classes, kept mr-[300px] for now\r\n          >\r\n            <div className=\"flex gap-2 justify-end\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\" // Changed to variant\r\n                onClick={handleUndo}\r\n                disabled={undoStack.length === 0}\r\n              >\r\n                <ArrowLeft className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\" // Changed to variant\r\n                onClick={handleRedo}\r\n                disabled={redoStack.length === 0}\r\n              >\r\n                <ArrowRight className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"default\" // Changed to variant\r\n                size=\"sm\"\r\n                onClick={saveChanges}\r\n              >\r\n                <Save className=\"h-4 w-4 mr-1\" /> Save\r\n              </Button>\r\n            </div>\r\n          </Panel>\r\n        )}\r\n\r\n        <div className=\"h-full\">\r\n          <ReactFlow\r\n            key={`flow-${id}-${nodes.length}`}\r\n            nodes={filteredNodes()}\r\n            edges={edges}\r\n            onNodesChange={isEditing ? onNodesChange : undefined}\r\n            onEdgesChange={isEditing ? onEdgesChange : undefined}\r\n            onConnect={isEditing ? onConnect : undefined}\r\n            onNodeClick={onNodeClick}\r\n            onEdgeClick={onEdgeClick}\r\n            onPaneClick={onPaneClick}\r\n            nodeTypes={nodeTypes}\r\n            onNodeDragStop={onNodeDragStop}\r\n            nodesDraggable={isEditing}\r\n            nodesConnectable={isEditing && editMode === \"connect\"}\r\n            elementsSelectable={!readOnly}\r\n            defaultEdgeOptions={getDefaultEdgeOptions()}\r\n            fitView\r\n            fitViewOptions={{\r\n              padding: 0.5,\r\n              includeHiddenNodes: true,\r\n              minZoom: 0.5,\r\n              maxZoom: 1.5,\r\n            }}\r\n            minZoom={0.2}\r\n            maxZoom={4}\r\n            snapToGrid={true}\r\n            snapGrid={[10, 10]}\r\n            nodeExtent={[\r\n              [-2000, -2000],\r\n              [2000, 2000],\r\n            ]}\r\n            proOptions={{ hideAttribution: true }}\r\n            disableKeyboardA11y={true}\r\n            autoPanOnNodeDrag={false}\r\n            elevateEdgesOnSelect={false}\r\n            onInit={(instance) => {\r\n              // Use setTimeout to ensure proper initialization\r\n              setTimeout(() => {\r\n                if (nodes.length > 0) {\r\n                  instance.fitView({ padding: 0.5 });\r\n                  console.log(\r\n                    \"[FLOW] Flow initialized with nodes:\",\r\n                    nodes.length\r\n                  );\r\n                }\r\n              }, 300);\r\n            }}\r\n            // Add custom edge rendering to set data attributes based on handle positions\r\n            edgeUpdaterRadius={10}\r\n            edgesUpdatable={true}\r\n            edgesFocusable={true}\r\n            onEdgeUpdate={(oldEdge, newConnection) => {\r\n              setEdges((els) =>\r\n                els.map((edge) => {\r\n                  if (edge.id === oldEdge.id) {\r\n                    // Generate new ID based on new connection points\r\n                    const newId = `edge-${newConnection.source}-${\r\n                      newConnection.sourceHandle || \"default\"\r\n                    }-${newConnection.target}-${\r\n                      newConnection.targetHandle || \"default\"\r\n                    }`;\r\n                    return {\r\n                      ...edge,\r\n                      id: newId,\r\n                      source: newConnection.source,\r\n                      target: newConnection.target,\r\n                      sourceHandle: newConnection.sourceHandle,\r\n                      targetHandle: newConnection.targetHandle,\r\n                      data: {\r\n                        ...edge.data,\r\n                        sourceId: newConnection.source,\r\n                        targetId: newConnection.target,\r\n                        sourceHandle: newConnection.sourceHandle,\r\n                        targetHandle: newConnection.targetHandle,\r\n                        sourceHandleType:\r\n                          newConnection.sourceHandle || \"default\",\r\n                        targetHandleType:\r\n                          newConnection.targetHandle || \"default\",\r\n                      },\r\n                    };\r\n                  }\r\n                  return edge;\r\n                })\r\n              );\r\n              return true;\r\n            }}\r\n          >\r\n            <Controls />\r\n            <MiniMap nodeStrokeWidth={3} zoomable pannable />\r\n            <Background\r\n              variant=\"dots\"\r\n              gap={12}\r\n              size={1}\r\n              color=\"hsl(var(--border))\"\r\n            />{\" \"}\r\n            {/* Updated Background color */}\r\n            {/* Add custom edge styles for colored connections */}\r\n            {edges.map((edge) => (\r\n              <div key={`handle-${edge.id}`} style={{ display: \"none\" }}>\r\n                <div\r\n                  data-edgeid={edge.id}\r\n                  data-sourcehandle={edge.sourceHandle || \"default\"}\r\n                  data-targethandle={edge.targetHandle || \"default\"}\r\n                />\r\n              </div>\r\n            ))}\r\n          </ReactFlow>\r\n        </div>\r\n\r\n        {selectedNode && (\r\n          <CourseInfoPanel\r\n            node={selectedNode}\r\n            onClose={() => setSelectedNode(null)}\r\n            onCompleteToggle={handleCompleteToggle}\r\n            onDelete={isEditing ? handleDeleteNode : undefined}\r\n            onUpdateStyle={handleUpdateNodeStyle}\r\n            isAdmin={isEditing}\r\n            readOnly={readOnly}\r\n          />\r\n        )}\r\n\r\n        {isAddCourseOpen && (\r\n          <AddCourseDialog\r\n            open={isAddCourseOpen}\r\n            onClose={() => setIsAddCourseOpen(false)}\r\n            onAdd={handleAddCourse}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst RoadmapView = forwardRef((props, ref) => {\r\n  console.log(\"[FLOW] RoadmapView wrapper rendering with props:\", {\r\n    id: props.id,\r\n    nodesCount: props.initialNodes?.length,\r\n    edgesCount: props.initialEdges?.length,\r\n  });\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n      <div className=\"w-full h-full\">\r\n        <RoadmapViewInner ref={ref} {...props} />\r\n      </div>\r\n    </ReactFlowProvider>\r\n  );\r\n});\r\n\r\nexport default RoadmapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}