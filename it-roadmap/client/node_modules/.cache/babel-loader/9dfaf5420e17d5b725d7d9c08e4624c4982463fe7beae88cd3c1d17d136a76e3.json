{"ast":null,"code":"import api from \"./api\";\n\n// Get all roadmaps\nexport const getRoadmaps = async () => {\n  const response = await api.get(\"/roadmaps\");\n  return response.data;\n};\n\n// Get roadmap by ID\nexport const getRoadmapById = async id => {\n  const response = await api.get(`/roadmaps/${id}`);\n  // Format data to ensure consistent properties\n  const roadmapData = response.data;\n\n  // Make sure categoryName is available\n  if (roadmapData.category && !roadmapData.categoryName) {\n    roadmapData.categoryName = roadmapData.category.name;\n  }\n\n  // Make sure author info is available for backward compatibility\n  if (roadmapData.user && !roadmapData.author) {\n    roadmapData.author = roadmapData.user.username;\n  }\n  return roadmapData;\n};\n\n// Create new roadmap\nexport const createRoadmap = async roadmapData => {\n  const response = await api.post(\"/roadmaps\", roadmapData);\n  return response.data;\n};\n\n// Update roadmap\nexport const updateRoadmap = async (id, roadmapData) => {\n  const response = await api.put(`/roadmaps/${id}`, roadmapData);\n  return response.data;\n};\n\n// Delete roadmap\nexport const deleteRoadmap = async id => {\n  const response = await api.delete(`/roadmaps/${id}`);\n  return response.data;\n};\n\n// Get roadmap nodes - including course connections\nexport const getRoadmapNodes = async id => {\n  try {\n    var _response$data, _response$data2;\n    console.log(`Fetching nodes for roadmap ${id}`);\n    const response = await api.get(`/roadmaps/${id}/nodes`);\n    console.log(`[FETCH NODES] Raw server response:`, {\n      status: response.status,\n      dataLength: ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length) || 0,\n      firstNode: ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2[0]) || \"none\"\n    });\n\n    // Transform server-side node format to client-side format\n    const transformedNodes = response.data.map(node => {\n      try {\n        // Parse the JSON data field\n        const nodeData = node.data ? JSON.parse(node.data) : {};\n\n        // Check if this node is linked to a course\n        let courseDetails = {};\n        if (node.courseId) {\n          // In a real implementation, you might fetch course details here\n          // or have them included in the node response\n          courseDetails = {\n            courseId: node.courseId\n            // Other course properties would be added here\n          };\n        }\n        return {\n          id: node.nodeIdentifier,\n          type: \"courseNode\",\n          // Default type for all nodes\n          position: {\n            x: node.positionX,\n            y: node.positionY\n          },\n          data: {\n            id: node.nodeIdentifier,\n            label: nodeData.label || \"\",\n            code: nodeData.code || \"\",\n            description: nodeData.description || \"\",\n            category: nodeData.category || \"\",\n            categoryId: nodeData.categoryId || null,\n            difficulty: nodeData.difficulty || \"beginner\",\n            credits: nodeData.credits || 0,\n            completed: nodeData.completed || false,\n            nodeColor: nodeData.nodeColor,\n            nodeBgColor: nodeData.nodeBgColor,\n            textColor: nodeData.textColor,\n            fontSize: nodeData.fontSize,\n            prerequisites: nodeData.prerequisites || \"\",\n            documentation: nodeData.documentation || \"\",\n            ...courseDetails\n          }\n        };\n      } catch (error) {\n        console.error(\"Error parsing node data:\", error, node);\n        return null;\n      }\n    }).filter(node => node !== null);\n    console.log(`Transformed ${transformedNodes.length} nodes`);\n    if (transformedNodes.length > 0) {\n      var _transformedNodes$0$d;\n      console.log(`[FETCH NODES] First transformed node:`, {\n        id: transformedNodes[0].id,\n        type: transformedNodes[0].type,\n        position: transformedNodes[0].position,\n        label: (_transformedNodes$0$d = transformedNodes[0].data) === null || _transformedNodes$0$d === void 0 ? void 0 : _transformedNodes$0$d.label\n      });\n    }\n    return transformedNodes;\n  } catch (error) {\n    console.error(\"Error fetching roadmap nodes:\", error);\n    throw error;\n  }\n};\n\n// Update roadmap nodes\nexport const updateRoadmapNodes = async (id, nodes) => {\n  try {\n    var _nodes;\n    console.log(`[API] Updating ${((_nodes = nodes) === null || _nodes === void 0 ? void 0 : _nodes.length) || 0} nodes for roadmap ${id}`);\n    console.log(`[API] Nodes data type:`, typeof nodes, Array.isArray(nodes));\n\n    // Đảm bảo nodes là mảng hợp lệ\n    if (!nodes) {\n      console.error(\"[API] Nodes is null or undefined\");\n      nodes = [];\n    }\n    if (!Array.isArray(nodes)) {\n      console.error(\"[API] Invalid nodes data - not an array:\", typeof nodes);\n      // Cố gắng chuyển đổi thành mảng nếu có thể\n      try {\n        if (typeof nodes === \"object\" && nodes !== null) {\n          nodes = Object.values(nodes);\n          console.log(\"[API] Converted object to array, length:\", nodes.length);\n        } else {\n          nodes = [];\n        }\n      } catch (conversionError) {\n        console.error(\"[API] Conversion error:\", conversionError);\n        nodes = [];\n      }\n    }\n    if (nodes.length === 0) {\n      console.warn(\"[API] Warning: Empty nodes array provided\");\n    }\n\n    // Transform to server format\n    const serverNodes = nodes.map(node => {\n      var _node$position, _node$position2, _node$data, _serverNode$data, _serverNode$data2;\n      // Ensure all required node properties exist\n      if (!(node !== null && node !== void 0 && node.id)) {\n        console.error(\"[UPDATE] Node missing id:\", node);\n        // Skip this node\n        return null;\n      }\n      if (!node.position) {\n        console.warn(`[UPDATE] Node ${node.id} missing position, using default`);\n        node.position = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      // Ensure node data is well-formed JSON\n      let nodeDataString;\n      try {\n        if (typeof node.data === \"object\" && node.data !== null) {\n          nodeDataString = JSON.stringify(node.data);\n        } else if (typeof node.data === \"string\") {\n          // Validate that it's already valid JSON\n          try {\n            JSON.parse(node.data); // Just testing if this works\n            nodeDataString = node.data;\n          } catch (e) {\n            console.error(`[UPDATE] Invalid JSON data for node ${node.id}:`, e);\n            nodeDataString = JSON.stringify({\n              label: node.data || \"Unknown\"\n            });\n          }\n        } else {\n          nodeDataString = JSON.stringify({\n            label: \"Unknown\"\n          });\n        }\n      } catch (jsonError) {\n        console.error(`[UPDATE] Error stringifying data for node ${node.id}:`, jsonError);\n        nodeDataString = JSON.stringify({\n          label: \"Unknown\"\n        });\n      }\n\n      // Create properly formatted server node\n      const serverNode = {\n        nodeIdentifier: node.id,\n        positionX: ((_node$position = node.position) === null || _node$position === void 0 ? void 0 : _node$position.x) || 0,\n        positionY: ((_node$position2 = node.position) === null || _node$position2 === void 0 ? void 0 : _node$position2.y) || 0,\n        data: nodeDataString,\n        courseId: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.courseId) || null\n      };\n      console.log(`[UPDATE] Transformed node ${node.id} for server:`, {\n        nodeIdentifier: serverNode.nodeIdentifier,\n        positionX: serverNode.positionX,\n        positionY: serverNode.positionY,\n        dataLength: (_serverNode$data = serverNode.data) === null || _serverNode$data === void 0 ? void 0 : _serverNode$data.length,\n        dataPreview: (_serverNode$data2 = serverNode.data) === null || _serverNode$data2 === void 0 ? void 0 : _serverNode$data2.substring(0, 50),\n        courseId: serverNode.courseId\n      });\n      return serverNode;\n    }).filter(node => node !== null); // Lọc bỏ các node null\n\n    console.log(`[API] Sending ${serverNodes.length} nodes to server`);\n    const response = await api.put(`/roadmaps/${id}/nodes`, {\n      nodes: serverNodes\n    });\n    console.log(`[API] Server response for nodes update:`, response.status, response.statusText);\n    console.log(`[API] Response data:`, response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`[API ERROR] Failed to update nodes:`, error);\n    if (error.response) {\n      console.error(`[API ERROR] Response status:`, error.response.status);\n      console.error(`[API ERROR] Response data:`, error.response.data);\n    }\n    throw error;\n  }\n};\n\n// Get roadmap edges\nexport const getRoadmapEdges = async id => {\n  try {\n    var _response$data3, _response$data4;\n    console.log(`Fetching edges for roadmap ${id}`);\n    const response = await api.get(`/roadmaps/${id}/edges`);\n    console.log(`[FETCH EDGES] Raw server response:`, {\n      status: response.status,\n      dataLength: ((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.length) || 0,\n      firstEdge: ((_response$data4 = response.data) === null || _response$data4 === void 0 ? void 0 : _response$data4[0]) || \"none\"\n    });\n\n    // Transform server-side edge format to client-side format\n    const transformedEdges = response.data.map(edge => {\n      try {\n        // Parse the JSON style field\n        const edgeStyle = edge.style ? JSON.parse(edge.style) : {};\n        console.log(`[FETCH EDGES] Processing edge: ID=${edge.edgeIdentifier}, Source=${edge.source}, Target=${edge.target}`);\n        return {\n          id: edge.edgeIdentifier,\n          source: edge.source,\n          target: edge.target,\n          type: edge.type || \"smoothstep\",\n          animated: edge.animated || false,\n          // 保留源句柄和目标句柄信息\n          sourceHandle: edge.sourceHandle || null,\n          targetHandle: edge.targetHandle || null,\n          style: {\n            stroke: edgeStyle.stroke || \"#6d28d9\",\n            strokeWidth: edgeStyle.strokeWidth || 1\n          },\n          // 确保保留连接类型和其他数据\n          data: {\n            connectionType: edge.connectionType || \"arrow\",\n            ...(edge.data || {})\n          },\n          // 如果有方向箭头信息，也需要保留\n          ...(edge.connectionType === \"arrow\" && {\n            markerEnd: {\n              type: \"arrowclosed\",\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          })\n        };\n      } catch (error) {\n        console.error(\"Error parsing edge data:\", error, edge);\n        return null;\n      }\n    }).filter(edge => edge !== null);\n    console.log(`Transformed ${transformedEdges.length} edges`);\n    if (transformedEdges.length > 0) {\n      console.log(`[FETCH EDGES] First transformed edge:`, {\n        id: transformedEdges[0].id,\n        source: transformedEdges[0].source,\n        target: transformedEdges[0].target,\n        sourceHandle: transformedEdges[0].sourceHandle,\n        targetHandle: transformedEdges[0].targetHandle\n      });\n    }\n    return transformedEdges;\n  } catch (error) {\n    console.error(\"Error fetching roadmap edges:\", error);\n    throw error;\n  }\n};\n\n// Update roadmap edges\nexport const updateRoadmapEdges = async (id, edges) => {\n  try {\n    var _edges;\n    console.log(`[API] Updating ${((_edges = edges) === null || _edges === void 0 ? void 0 : _edges.length) || 0} edges for roadmap ${id}`);\n    console.log(`[API] Edges data type:`, typeof edges, Array.isArray(edges));\n\n    // 确保edges是数组\n    if (!edges) {\n      console.error(\"[API] Edges is null or undefined\");\n      edges = [];\n    }\n    if (!Array.isArray(edges)) {\n      console.error(\"[API] Invalid edges data - not an array:\", typeof edges);\n      // 尝试转换为数组\n      try {\n        if (typeof edges === \"object\" && edges !== null) {\n          edges = Object.values(edges);\n          console.log(\"[API] Converted object to array, length:\", edges.length);\n        } else {\n          edges = [];\n        }\n      } catch (conversionError) {\n        console.error(\"[API] Conversion error:\", conversionError);\n        edges = [];\n      }\n    }\n    if (edges.length === 0) {\n      console.warn(\"[API] Warning: Empty edges array provided\");\n    }\n\n    // Log每个边缘的详细信息，确保source和target正确\n    edges.forEach((edge, index) => {\n      console.log(`[API] Edge ${index}: ID=${edge.id}, Source=${edge.source}, Target=${edge.target}, \n        SourceHandle=${edge.sourceHandle}, TargetHandle=${edge.targetHandle}`);\n    });\n\n    // Transform to server format\n    const serverEdges = edges.map(edge => {\n      var _edge$data;\n      // Validate required edge properties\n      if (!(edge !== null && edge !== void 0 && edge.id) || !(edge !== null && edge !== void 0 && edge.source) || !(edge !== null && edge !== void 0 && edge.target)) {\n        console.error(\"[UPDATE] Edge missing required properties:\", edge);\n        // Skip this edge instead of throwing an error\n        return null;\n      }\n\n      // Ensure style is well-formed JSON\n      let styleString;\n      if (typeof edge.style === \"object\" && edge.style !== null) {\n        try {\n          styleString = JSON.stringify(edge.style);\n        } catch (e) {\n          console.error(`[UPDATE] Error stringifying style for edge ${edge.id}:`, e);\n          styleString = JSON.stringify({\n            stroke: \"#999\"\n          });\n        }\n      } else if (typeof edge.style === \"string\") {\n        // Validate that it's already valid JSON\n        try {\n          JSON.parse(edge.style); // Just testing if this works\n          styleString = edge.style;\n        } catch (e) {\n          console.error(`[UPDATE] Invalid JSON style for edge ${edge.id}:`, e);\n          styleString = JSON.stringify({\n            stroke: \"#999\"\n          });\n        }\n      } else {\n        styleString = JSON.stringify({\n          stroke: \"#999\"\n        });\n      }\n\n      // 创建正确格式化的服务器边缘\n      const serverEdge = {\n        edgeIdentifier: edge.id,\n        source: edge.source,\n        target: edge.target,\n        // 保存句柄信息\n        sourceHandle: edge.sourceHandle || null,\n        targetHandle: edge.targetHandle || null,\n        type: edge.type || \"smoothstep\",\n        animated: edge.animated || false,\n        style: styleString,\n        // 保存连接类型\n        connectionType: ((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.connectionType) || \"arrow\",\n        // 保存其他数据\n        data: edge.data ? JSON.stringify(edge.data) : null\n      };\n      console.log(`[UPDATE] Transformed edge ${edge.id} for server:`, {\n        edgeIdentifier: serverEdge.edgeIdentifier,\n        source: serverEdge.source,\n        target: serverEdge.target,\n        sourceHandle: serverEdge.sourceHandle,\n        targetHandle: serverEdge.targetHandle,\n        type: serverEdge.type\n      });\n      return serverEdge;\n    }).filter(edge => edge !== null); // 过滤掉无效边缘\n\n    console.log(`[API] Sending ${serverEdges.length} edges to server`);\n    const response = await api.put(`/roadmaps/${id}/edges`, {\n      edges: serverEdges\n    });\n    console.log(`[API] Server response for edges update:`, response.status, response.statusText);\n    console.log(`[API] Response data:`, response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`[API ERROR] Failed to update edges:`, error);\n    if (error.response) {\n      console.error(`[API ERROR] Response status:`, error.response.status);\n      console.error(`[API ERROR] Response data:`, error.response.data);\n    }\n    throw error;\n  }\n};\n\n// Toggle favorite roadmap\nexport const toggleFavoriteRoadmap = async id => {\n  const response = await api.post(`/roadmaps/${id}/favorite`);\n  return response.data;\n};\n\n// Get user favorites\nexport const getUserFavorites = async () => {\n  const response = await api.get(\"/roadmaps/favorites\");\n  return response.data;\n};\n\n// Link a course to a roadmap node\nexport const linkCourseToNode = async (roadmapId, nodeId, courseId) => {\n  try {\n    const response = await api.post(`/roadmaps/${roadmapId}/nodes/${nodeId}/link-course`, {\n      courseId: Number(courseId)\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error linking course to node:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getRoadmaps","response","get","data","getRoadmapById","id","roadmapData","category","categoryName","name","user","author","username","createRoadmap","post","updateRoadmap","put","deleteRoadmap","delete","getRoadmapNodes","_response$data","_response$data2","console","log","status","dataLength","length","firstNode","transformedNodes","map","node","nodeData","JSON","parse","courseDetails","courseId","nodeIdentifier","type","position","x","positionX","y","positionY","label","code","description","categoryId","difficulty","credits","completed","nodeColor","nodeBgColor","textColor","fontSize","prerequisites","documentation","error","filter","_transformedNodes$0$d","updateRoadmapNodes","nodes","_nodes","Array","isArray","Object","values","conversionError","warn","serverNodes","_node$position","_node$position2","_node$data","_serverNode$data","_serverNode$data2","nodeDataString","stringify","e","jsonError","serverNode","dataPreview","substring","statusText","getRoadmapEdges","_response$data3","_response$data4","firstEdge","transformedEdges","edge","edgeStyle","style","edgeIdentifier","source","target","animated","sourceHandle","targetHandle","stroke","strokeWidth","connectionType","markerEnd","width","height","color","updateRoadmapEdges","edges","_edges","forEach","index","serverEdges","_edge$data","styleString","serverEdge","toggleFavoriteRoadmap","getUserFavorites","linkCourseToNode","roadmapId","nodeId","Number"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/services/roadmapService.js"],"sourcesContent":["import api from \"./api\";\r\n\r\n// Get all roadmaps\r\nexport const getRoadmaps = async () => {\r\n  const response = await api.get(\"/roadmaps\");\r\n  return response.data;\r\n};\r\n\r\n// Get roadmap by ID\r\nexport const getRoadmapById = async (id) => {\r\n  const response = await api.get(`/roadmaps/${id}`);\r\n  // Format data to ensure consistent properties\r\n  const roadmapData = response.data;\r\n\r\n  // Make sure categoryName is available\r\n  if (roadmapData.category && !roadmapData.categoryName) {\r\n    roadmapData.categoryName = roadmapData.category.name;\r\n  }\r\n\r\n  // Make sure author info is available for backward compatibility\r\n  if (roadmapData.user && !roadmapData.author) {\r\n    roadmapData.author = roadmapData.user.username;\r\n  }\r\n\r\n  return roadmapData;\r\n};\r\n\r\n// Create new roadmap\r\nexport const createRoadmap = async (roadmapData) => {\r\n  const response = await api.post(\"/roadmaps\", roadmapData);\r\n  return response.data;\r\n};\r\n\r\n// Update roadmap\r\nexport const updateRoadmap = async (id, roadmapData) => {\r\n  const response = await api.put(`/roadmaps/${id}`, roadmapData);\r\n  return response.data;\r\n};\r\n\r\n// Delete roadmap\r\nexport const deleteRoadmap = async (id) => {\r\n  const response = await api.delete(`/roadmaps/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Get roadmap nodes - including course connections\r\nexport const getRoadmapNodes = async (id) => {\r\n  try {\r\n    console.log(`Fetching nodes for roadmap ${id}`);\r\n    const response = await api.get(`/roadmaps/${id}/nodes`);\r\n\r\n    console.log(`[FETCH NODES] Raw server response:`, {\r\n      status: response.status,\r\n      dataLength: response.data?.length || 0,\r\n      firstNode: response.data?.[0] || \"none\",\r\n    });\r\n\r\n    // Transform server-side node format to client-side format\r\n    const transformedNodes = response.data\r\n      .map((node) => {\r\n        try {\r\n          // Parse the JSON data field\r\n          const nodeData = node.data ? JSON.parse(node.data) : {};\r\n\r\n          // Check if this node is linked to a course\r\n          let courseDetails = {};\r\n          if (node.courseId) {\r\n            // In a real implementation, you might fetch course details here\r\n            // or have them included in the node response\r\n            courseDetails = {\r\n              courseId: node.courseId,\r\n              // Other course properties would be added here\r\n            };\r\n          }\r\n\r\n          return {\r\n            id: node.nodeIdentifier,\r\n            type: \"courseNode\", // Default type for all nodes\r\n            position: {\r\n              x: node.positionX,\r\n              y: node.positionY,\r\n            },\r\n            data: {\r\n              id: node.nodeIdentifier,\r\n              label: nodeData.label || \"\",\r\n              code: nodeData.code || \"\",\r\n              description: nodeData.description || \"\",\r\n              category: nodeData.category || \"\",\r\n              categoryId: nodeData.categoryId || null,\r\n              difficulty: nodeData.difficulty || \"beginner\",\r\n              credits: nodeData.credits || 0,\r\n              completed: nodeData.completed || false,\r\n              nodeColor: nodeData.nodeColor,\r\n              nodeBgColor: nodeData.nodeBgColor,\r\n              textColor: nodeData.textColor,\r\n              fontSize: nodeData.fontSize,\r\n              prerequisites: nodeData.prerequisites || \"\",\r\n              documentation: nodeData.documentation || \"\",\r\n              ...courseDetails,\r\n            },\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error parsing node data:\", error, node);\r\n          return null;\r\n        }\r\n      })\r\n      .filter((node) => node !== null);\r\n\r\n    console.log(`Transformed ${transformedNodes.length} nodes`);\r\n    if (transformedNodes.length > 0) {\r\n      console.log(`[FETCH NODES] First transformed node:`, {\r\n        id: transformedNodes[0].id,\r\n        type: transformedNodes[0].type,\r\n        position: transformedNodes[0].position,\r\n        label: transformedNodes[0].data?.label,\r\n      });\r\n    }\r\n\r\n    return transformedNodes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching roadmap nodes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update roadmap nodes\r\nexport const updateRoadmapNodes = async (id, nodes) => {\r\n  try {\r\n    console.log(`[API] Updating ${nodes?.length || 0} nodes for roadmap ${id}`);\r\n    console.log(`[API] Nodes data type:`, typeof nodes, Array.isArray(nodes));\r\n\r\n    // Đảm bảo nodes là mảng hợp lệ\r\n    if (!nodes) {\r\n      console.error(\"[API] Nodes is null or undefined\");\r\n      nodes = [];\r\n    }\r\n\r\n    if (!Array.isArray(nodes)) {\r\n      console.error(\"[API] Invalid nodes data - not an array:\", typeof nodes);\r\n      // Cố gắng chuyển đổi thành mảng nếu có thể\r\n      try {\r\n        if (typeof nodes === \"object\" && nodes !== null) {\r\n          nodes = Object.values(nodes);\r\n          console.log(\"[API] Converted object to array, length:\", nodes.length);\r\n        } else {\r\n          nodes = [];\r\n        }\r\n      } catch (conversionError) {\r\n        console.error(\"[API] Conversion error:\", conversionError);\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    if (nodes.length === 0) {\r\n      console.warn(\"[API] Warning: Empty nodes array provided\");\r\n    }\r\n\r\n    // Transform to server format\r\n    const serverNodes = nodes\r\n      .map((node) => {\r\n        // Ensure all required node properties exist\r\n        if (!node?.id) {\r\n          console.error(\"[UPDATE] Node missing id:\", node);\r\n          // Skip this node\r\n          return null;\r\n        }\r\n\r\n        if (!node.position) {\r\n          console.warn(\r\n            `[UPDATE] Node ${node.id} missing position, using default`\r\n          );\r\n          node.position = { x: 0, y: 0 };\r\n        }\r\n\r\n        // Ensure node data is well-formed JSON\r\n        let nodeDataString;\r\n        try {\r\n          if (typeof node.data === \"object\" && node.data !== null) {\r\n            nodeDataString = JSON.stringify(node.data);\r\n          } else if (typeof node.data === \"string\") {\r\n            // Validate that it's already valid JSON\r\n            try {\r\n              JSON.parse(node.data); // Just testing if this works\r\n              nodeDataString = node.data;\r\n            } catch (e) {\r\n              console.error(\r\n                `[UPDATE] Invalid JSON data for node ${node.id}:`,\r\n                e\r\n              );\r\n              nodeDataString = JSON.stringify({\r\n                label: node.data || \"Unknown\",\r\n              });\r\n            }\r\n          } else {\r\n            nodeDataString = JSON.stringify({ label: \"Unknown\" });\r\n          }\r\n        } catch (jsonError) {\r\n          console.error(\r\n            `[UPDATE] Error stringifying data for node ${node.id}:`,\r\n            jsonError\r\n          );\r\n          nodeDataString = JSON.stringify({ label: \"Unknown\" });\r\n        }\r\n\r\n        // Create properly formatted server node\r\n        const serverNode = {\r\n          nodeIdentifier: node.id,\r\n          positionX: node.position?.x || 0,\r\n          positionY: node.position?.y || 0,\r\n          data: nodeDataString,\r\n          courseId: node.data?.courseId || null,\r\n        };\r\n\r\n        console.log(`[UPDATE] Transformed node ${node.id} for server:`, {\r\n          nodeIdentifier: serverNode.nodeIdentifier,\r\n          positionX: serverNode.positionX,\r\n          positionY: serverNode.positionY,\r\n          dataLength: serverNode.data?.length,\r\n          dataPreview: serverNode.data?.substring(0, 50),\r\n          courseId: serverNode.courseId,\r\n        });\r\n\r\n        return serverNode;\r\n      })\r\n      .filter((node) => node !== null); // Lọc bỏ các node null\r\n\r\n    console.log(`[API] Sending ${serverNodes.length} nodes to server`);\r\n\r\n    const response = await api.put(`/roadmaps/${id}/nodes`, {\r\n      nodes: serverNodes,\r\n    });\r\n\r\n    console.log(\r\n      `[API] Server response for nodes update:`,\r\n      response.status,\r\n      response.statusText\r\n    );\r\n    console.log(`[API] Response data:`, response.data);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`[API ERROR] Failed to update nodes:`, error);\r\n    if (error.response) {\r\n      console.error(`[API ERROR] Response status:`, error.response.status);\r\n      console.error(`[API ERROR] Response data:`, error.response.data);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get roadmap edges\r\nexport const getRoadmapEdges = async (id) => {\r\n  try {\r\n    console.log(`Fetching edges for roadmap ${id}`);\r\n    const response = await api.get(`/roadmaps/${id}/edges`);\r\n\r\n    console.log(`[FETCH EDGES] Raw server response:`, {\r\n      status: response.status,\r\n      dataLength: response.data?.length || 0,\r\n      firstEdge: response.data?.[0] || \"none\",\r\n    });\r\n\r\n    // Transform server-side edge format to client-side format\r\n    const transformedEdges = response.data\r\n      .map((edge) => {\r\n        try {\r\n          // Parse the JSON style field\r\n          const edgeStyle = edge.style ? JSON.parse(edge.style) : {};\r\n\r\n          console.log(\r\n            `[FETCH EDGES] Processing edge: ID=${edge.edgeIdentifier}, Source=${edge.source}, Target=${edge.target}`\r\n          );\r\n\r\n          return {\r\n            id: edge.edgeIdentifier,\r\n            source: edge.source,\r\n            target: edge.target,\r\n            type: edge.type || \"smoothstep\",\r\n            animated: edge.animated || false,\r\n            // 保留源句柄和目标句柄信息\r\n            sourceHandle: edge.sourceHandle || null,\r\n            targetHandle: edge.targetHandle || null,\r\n            style: {\r\n              stroke: edgeStyle.stroke || \"#6d28d9\",\r\n              strokeWidth: edgeStyle.strokeWidth || 1,\r\n            },\r\n            // 确保保留连接类型和其他数据\r\n            data: {\r\n              connectionType: edge.connectionType || \"arrow\",\r\n              ...(edge.data || {}),\r\n            },\r\n            // 如果有方向箭头信息，也需要保留\r\n            ...(edge.connectionType === \"arrow\" && {\r\n              markerEnd: {\r\n                type: \"arrowclosed\",\r\n                width: 20,\r\n                height: 20,\r\n                color: \"#6d28d9\",\r\n              },\r\n            }),\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error parsing edge data:\", error, edge);\r\n          return null;\r\n        }\r\n      })\r\n      .filter((edge) => edge !== null);\r\n\r\n    console.log(`Transformed ${transformedEdges.length} edges`);\r\n    if (transformedEdges.length > 0) {\r\n      console.log(`[FETCH EDGES] First transformed edge:`, {\r\n        id: transformedEdges[0].id,\r\n        source: transformedEdges[0].source,\r\n        target: transformedEdges[0].target,\r\n        sourceHandle: transformedEdges[0].sourceHandle,\r\n        targetHandle: transformedEdges[0].targetHandle,\r\n      });\r\n    }\r\n\r\n    return transformedEdges;\r\n  } catch (error) {\r\n    console.error(\"Error fetching roadmap edges:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update roadmap edges\r\nexport const updateRoadmapEdges = async (id, edges) => {\r\n  try {\r\n    console.log(`[API] Updating ${edges?.length || 0} edges for roadmap ${id}`);\r\n    console.log(`[API] Edges data type:`, typeof edges, Array.isArray(edges));\r\n\r\n    // 确保edges是数组\r\n    if (!edges) {\r\n      console.error(\"[API] Edges is null or undefined\");\r\n      edges = [];\r\n    }\r\n\r\n    if (!Array.isArray(edges)) {\r\n      console.error(\"[API] Invalid edges data - not an array:\", typeof edges);\r\n      // 尝试转换为数组\r\n      try {\r\n        if (typeof edges === \"object\" && edges !== null) {\r\n          edges = Object.values(edges);\r\n          console.log(\"[API] Converted object to array, length:\", edges.length);\r\n        } else {\r\n          edges = [];\r\n        }\r\n      } catch (conversionError) {\r\n        console.error(\"[API] Conversion error:\", conversionError);\r\n        edges = [];\r\n      }\r\n    }\r\n\r\n    if (edges.length === 0) {\r\n      console.warn(\"[API] Warning: Empty edges array provided\");\r\n    }\r\n\r\n    // Log每个边缘的详细信息，确保source和target正确\r\n    edges.forEach((edge, index) => {\r\n      console.log(`[API] Edge ${index}: ID=${edge.id}, Source=${edge.source}, Target=${edge.target}, \r\n        SourceHandle=${edge.sourceHandle}, TargetHandle=${edge.targetHandle}`);\r\n    });\r\n\r\n    // Transform to server format\r\n    const serverEdges = edges\r\n      .map((edge) => {\r\n        // Validate required edge properties\r\n        if (!edge?.id || !edge?.source || !edge?.target) {\r\n          console.error(\"[UPDATE] Edge missing required properties:\", edge);\r\n          // Skip this edge instead of throwing an error\r\n          return null;\r\n        }\r\n\r\n        // Ensure style is well-formed JSON\r\n        let styleString;\r\n        if (typeof edge.style === \"object\" && edge.style !== null) {\r\n          try {\r\n            styleString = JSON.stringify(edge.style);\r\n          } catch (e) {\r\n            console.error(\r\n              `[UPDATE] Error stringifying style for edge ${edge.id}:`,\r\n              e\r\n            );\r\n            styleString = JSON.stringify({ stroke: \"#999\" });\r\n          }\r\n        } else if (typeof edge.style === \"string\") {\r\n          // Validate that it's already valid JSON\r\n          try {\r\n            JSON.parse(edge.style); // Just testing if this works\r\n            styleString = edge.style;\r\n          } catch (e) {\r\n            console.error(\r\n              `[UPDATE] Invalid JSON style for edge ${edge.id}:`,\r\n              e\r\n            );\r\n            styleString = JSON.stringify({ stroke: \"#999\" });\r\n          }\r\n        } else {\r\n          styleString = JSON.stringify({ stroke: \"#999\" });\r\n        }\r\n\r\n        // 创建正确格式化的服务器边缘\r\n        const serverEdge = {\r\n          edgeIdentifier: edge.id,\r\n          source: edge.source,\r\n          target: edge.target,\r\n          // 保存句柄信息\r\n          sourceHandle: edge.sourceHandle || null,\r\n          targetHandle: edge.targetHandle || null,\r\n          type: edge.type || \"smoothstep\",\r\n          animated: edge.animated || false,\r\n          style: styleString,\r\n          // 保存连接类型\r\n          connectionType: edge.data?.connectionType || \"arrow\",\r\n          // 保存其他数据\r\n          data: edge.data ? JSON.stringify(edge.data) : null,\r\n        };\r\n\r\n        console.log(`[UPDATE] Transformed edge ${edge.id} for server:`, {\r\n          edgeIdentifier: serverEdge.edgeIdentifier,\r\n          source: serverEdge.source,\r\n          target: serverEdge.target,\r\n          sourceHandle: serverEdge.sourceHandle,\r\n          targetHandle: serverEdge.targetHandle,\r\n          type: serverEdge.type,\r\n        });\r\n\r\n        return serverEdge;\r\n      })\r\n      .filter((edge) => edge !== null); // 过滤掉无效边缘\r\n\r\n    console.log(`[API] Sending ${serverEdges.length} edges to server`);\r\n\r\n    const response = await api.put(`/roadmaps/${id}/edges`, {\r\n      edges: serverEdges,\r\n    });\r\n\r\n    console.log(\r\n      `[API] Server response for edges update:`,\r\n      response.status,\r\n      response.statusText\r\n    );\r\n    console.log(`[API] Response data:`, response.data);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`[API ERROR] Failed to update edges:`, error);\r\n    if (error.response) {\r\n      console.error(`[API ERROR] Response status:`, error.response.status);\r\n      console.error(`[API ERROR] Response data:`, error.response.data);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Toggle favorite roadmap\r\nexport const toggleFavoriteRoadmap = async (id) => {\r\n  const response = await api.post(`/roadmaps/${id}/favorite`);\r\n  return response.data;\r\n};\r\n\r\n// Get user favorites\r\nexport const getUserFavorites = async () => {\r\n  const response = await api.get(\"/roadmaps/favorites\");\r\n  return response.data;\r\n};\r\n\r\n// Link a course to a roadmap node\r\nexport const linkCourseToNode = async (roadmapId, nodeId, courseId) => {\r\n  try {\r\n    const response = await api.post(\r\n      `/roadmaps/${roadmapId}/nodes/${nodeId}/link-course`,\r\n      {\r\n        courseId: Number(courseId),\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error linking course to node:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}