{"ast":null,"code":"import axios from \"axios\";\n\n// Base URL for API requests\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add a request interceptor to add the auth token to every request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    // Use Authorization Bearer header (standard JWT auth)\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle token expiration\napi.interceptors.response.use(response => response, error => {\n  // 检查错误响应是否存在\n  if (error.response) {\n    // 处理401未授权错误（令牌过期、无效）\n    if (error.response.status === 401) {\n      console.log(\"Token expired or invalid, logging out...\");\n\n      // 清除本地存储的令牌\n      localStorage.removeItem(\"token\");\n\n      // 如果是在开发模式下，也清除开发模式用户数据\n      if (localStorage.getItem(\"devMode\") === \"true\") {\n        localStorage.removeItem(\"devModeUser\");\n      }\n\n      // 清除API默认请求头中的Authorization\n      delete api.defaults.headers.common[\"Authorization\"];\n\n      // 重定向到登录页面，但避免循环重定向\n      const currentPath = window.location.pathname;\n      if (!currentPath.includes(\"/login\")) {\n        // 添加延迟，避免可能的循环\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 100);\n      }\n    }\n\n    // 处理服务器错误\n    else if (error.response.status >= 500) {\n      console.error(\"Server error:\", error.response.data);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","console","log","removeItem","defaults","common","currentPath","window","location","pathname","includes","setTimeout","href","data"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Base URL for API requests\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Add a request interceptor to add the auth token to every request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      // Use Authorization Bearer header (standard JWT auth)\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // 检查错误响应是否存在\r\n    if (error.response) {\r\n      // 处理401未授权错误（令牌过期、无效）\r\n      if (error.response.status === 401) {\r\n        console.log(\"Token expired or invalid, logging out...\");\r\n\r\n        // 清除本地存储的令牌\r\n        localStorage.removeItem(\"token\");\r\n\r\n        // 如果是在开发模式下，也清除开发模式用户数据\r\n        if (localStorage.getItem(\"devMode\") === \"true\") {\r\n          localStorage.removeItem(\"devModeUser\");\r\n        }\r\n\r\n        // 清除API默认请求头中的Authorization\r\n        delete api.defaults.headers.common[\"Authorization\"];\r\n\r\n        // 重定向到登录页面，但避免循环重定向\r\n        const currentPath = window.location.pathname;\r\n        if (!currentPath.includes(\"/login\")) {\r\n          // 添加延迟，避免可能的循环\r\n          setTimeout(() => {\r\n            window.location.href = \"/login\";\r\n          }, 100);\r\n        }\r\n      }\r\n\r\n      // 处理服务器错误\r\n      else if (error.response.status >= 500) {\r\n        console.error(\"Server error:\", error.response.data);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACjCC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;MAEvD;MACAR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;;MAEhC;MACA,IAAIT,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,KAAK,MAAM,EAAE;QAC9CD,YAAY,CAACS,UAAU,CAAC,aAAa,CAAC;MACxC;;MAEA;MACA,OAAOlB,GAAG,CAACmB,QAAQ,CAAChB,OAAO,CAACiB,MAAM,CAAC,eAAe,CAAC;;MAEnD;MACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;MAC5C,IAAI,CAACH,WAAW,CAACI,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACnC;QACAC,UAAU,CAAC,MAAM;UACfJ,MAAM,CAACC,QAAQ,CAACI,IAAI,GAAG,QAAQ;QACjC,CAAC,EAAE,GAAG,CAAC;MACT;IACF;;IAEA;IAAA,KACK,IAAIhB,KAAK,CAACG,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;MACrCC,OAAO,CAACL,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACG,QAAQ,CAACc,IAAI,CAAC;IACrD;EACF;EAEA,OAAOhB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}