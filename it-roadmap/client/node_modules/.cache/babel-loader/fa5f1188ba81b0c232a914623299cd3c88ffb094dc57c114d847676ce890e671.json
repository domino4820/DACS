{"ast":null,"code":"import api from \"./api\";\n\n// Get roadmap data for a course (nodes and edges)\nexport const getCourseRoadmap = async courseId => {\n  try {\n    console.log(`Fetching roadmap data for course ${courseId}`);\n\n    // Get the course data to find associated roadmap\n    const courseResponse = await api.get(`/courses/${courseId}`);\n    const courseData = courseResponse.data;\n\n    // Check if this course has an associated roadmap\n    let roadmapId = courseData.roadmapId;\n    let roadmapData = null;\n\n    // If no roadmap associated, create one for this course\n    if (!roadmapId) {\n      console.log(`Course ${courseId} has no associated roadmap, creating one`);\n      try {\n        // Create a new roadmap for this course\n        const createResponse = await api.post(\"/roadmaps\", {\n          title: `Roadmap for ${courseData.title}`,\n          description: `Learning roadmap for course: ${courseData.title}`,\n          categoryId: courseData.categoryId,\n          skillId: courseData.skillId,\n          userId: courseData.userId || 1 // Default to user 1 if not specified\n        });\n        roadmapId = createResponse.data.id;\n\n        // Associate the roadmap with the course\n        await api.put(`/courses/${courseId}`, {\n          roadmapId: roadmapId\n        });\n        console.log(`Created and associated new roadmap ID: ${roadmapId}`);\n\n        // Initialize with empty roadmap\n        roadmapData = {\n          ...createResponse.data,\n          nodes: [],\n          edges: []\n        };\n      } catch (error) {\n        console.error(\"Error creating new roadmap:\", error);\n        throw new Error(\"Could not create a roadmap for this course\");\n      }\n    } else {\n      // Fetch the existing roadmap with its nodes and edges\n      console.log(`Course has roadmap ID: ${roadmapId}, fetching data directly`);\n      try {\n        // Get complete roadmap data\n        const roadmapResponse = await api.get(`/roadmaps/${roadmapId}`);\n        const baseRoadmap = roadmapResponse.data;\n\n        // Get nodes\n        const nodesResponse = await api.get(`/roadmaps/${roadmapId}/nodes`);\n        const nodes = nodesResponse.data && Array.isArray(nodesResponse.data) ? transformNodesToClientFormat(nodesResponse.data) : [];\n\n        // Get edges\n        const edgesResponse = await api.get(`/roadmaps/${roadmapId}/edges`);\n        const edges = edgesResponse.data && Array.isArray(edgesResponse.data) ? transformEdgesToClientFormat(edgesResponse.data) : [];\n        console.log(`Got ${nodes.length} nodes and ${edges.length} edges from roadmap ${roadmapId}`);\n\n        // Combine roadmap data\n        roadmapData = {\n          ...baseRoadmap,\n          nodes,\n          edges\n        };\n      } catch (error) {\n        console.error(`Error fetching roadmap ${roadmapId} data:`, error);\n        throw new Error(`Failed to fetch roadmap ${roadmapId}`);\n      }\n    }\n\n    // Return combined data with course info\n    return {\n      ...courseData,\n      roadmap: roadmapData,\n      nodes: roadmapData.nodes,\n      edges: roadmapData.edges\n    };\n  } catch (error) {\n    console.error(`Error fetching roadmap for course ${courseId}:`, error);\n    throw error;\n  }\n};\n\n// Save roadmap data directly to roadmap entity\nexport const saveCourseRoadmap = async (courseId, roadmapData) => {\n  try {\n    console.log(`Saving roadmap data for course ${courseId}`);\n    if (!courseId || isNaN(Number(courseId))) {\n      throw new Error(`Invalid course ID: ${courseId}`);\n    }\n    const numericCourseId = Number(courseId);\n    const {\n      nodes,\n      edges\n    } = roadmapData;\n    console.log(\"Nodes to save:\", nodes);\n    console.log(\"Edges to save:\", edges);\n\n    // Validate nodes and edges\n    if (!Array.isArray(nodes)) {\n      throw new Error(\"Nodes must be an array\");\n    }\n    if (!Array.isArray(edges)) {\n      throw new Error(\"Edges must be an array\");\n    }\n\n    // Step 1: Get or create a roadmap for this course\n    console.log(`Step 1: Getting/creating roadmap for course ${numericCourseId}`);\n    let roadmapId;\n\n    // First check if course has a roadmap\n    const courseResponse = await api.get(`/courses/${numericCourseId}`);\n    const courseData = courseResponse.data;\n    if (courseData.roadmapId) {\n      roadmapId = courseData.roadmapId;\n      console.log(`Using existing roadmap ID: ${roadmapId}`);\n    } else {\n      // Create new roadmap if course doesn't have one\n      const createResponse = await api.post(\"/roadmaps\", {\n        title: `Roadmap for ${courseData.title}`,\n        description: `Learning roadmap for course: ${courseData.title}`,\n        categoryId: courseData.categoryId,\n        skillId: courseData.skillId,\n        userId: courseData.userId || 1 // Default to user 1 if not specified\n      });\n      roadmapId = createResponse.data.id;\n\n      // Associate roadmap with course\n      await api.put(`/courses/${numericCourseId}`, {\n        roadmapId: roadmapId\n      });\n      console.log(`Created and associated new roadmap ID: ${roadmapId}`);\n    }\n\n    // Step 2: Transform nodes and edges to add roadmapId\n    console.log(`Step 2: Transforming nodes and edges for roadmap ${roadmapId}`);\n    const transformedNodes = transformNodesToServerFormat(nodes).map(node => ({\n      ...node,\n      roadmapId: roadmapId\n    }));\n    const transformedEdges = transformEdgesToServerFormat(edges).map(edge => ({\n      ...edge,\n      roadmapId: roadmapId\n    }));\n\n    // Step 3: Save nodes to the roadmap\n    console.log(`Step 3: Saving ${transformedNodes.length} nodes to roadmap ${roadmapId}`);\n    try {\n      await api.put(`/roadmaps/${roadmapId}/nodes`, {\n        nodes: transformedNodes\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Error saving nodes:\", error);\n      throw new Error(`Failed to save nodes: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`);\n    }\n\n    // Step 4: Save edges to the roadmap\n    console.log(`Step 4: Saving ${transformedEdges.length} edges to roadmap ${roadmapId}`);\n    try {\n      await api.put(`/roadmaps/${roadmapId}/edges`, {\n        edges: transformedEdges\n      });\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error(\"Error saving edges:\", error);\n      throw new Error(`Failed to save edges: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`);\n    }\n    console.log(`Roadmap ${roadmapId} saved successfully`);\n\n    // Step 5: Get updated roadmap data\n    return await getRoadmapById(roadmapId);\n  } catch (error) {\n    console.error(`Error saving roadmap for course ${courseId}:`, error);\n    throw error;\n  }\n};\n\n// Get roadmap by ID directly (not through a course)\nexport const getRoadmapById = async roadmapId => {\n  try {\n    console.log(`Fetching roadmap data for ID ${roadmapId}`);\n\n    // Get the base roadmap data\n    const roadmapResponse = await api.get(`/roadmaps/${roadmapId}`);\n    const baseRoadmap = roadmapResponse.data;\n\n    // Get nodes\n    const nodesResponse = await api.get(`/roadmaps/${roadmapId}/nodes`);\n    const nodes = nodesResponse.data && Array.isArray(nodesResponse.data) ? transformNodesToClientFormat(nodesResponse.data) : [];\n\n    // Get edges\n    const edgesResponse = await api.get(`/roadmaps/${roadmapId}/edges`);\n    const edges = edgesResponse.data && Array.isArray(edgesResponse.data) ? transformEdgesToClientFormat(edgesResponse.data) : [];\n    console.log(`Got ${nodes.length} nodes and ${edges.length} edges from roadmap ${roadmapId}`);\n\n    // Return combined data\n    return {\n      ...baseRoadmap,\n      nodes,\n      edges\n    };\n  } catch (error) {\n    console.error(`Error fetching roadmap ${roadmapId}:`, error);\n    throw error;\n  }\n};\n\n// Create a new course with roadmap data\nexport const createCourseWithRoadmap = async courseData => {\n  try {\n    console.log(\"Creating new course with roadmap data\");\n    const {\n      nodes,\n      edges,\n      ...courseDetails\n    } = courseData;\n\n    // Create the course first\n    const courseResponse = await api.post(\"/courses\", courseDetails);\n    const newCourse = courseResponse.data;\n    const courseId = newCourse.id;\n\n    // Then create and save roadmap if nodes/edges provided\n    if (nodes && nodes.length > 0 || edges && edges.length > 0) {\n      await saveCourseRoadmap(courseId, {\n        nodes,\n        edges\n      });\n    }\n\n    // Return the full course with roadmap data\n    return await getCourseRoadmap(courseId);\n  } catch (error) {\n    console.error(\"Error creating course with roadmap:\", error);\n    throw error;\n  }\n};\n\n// Transform nodes from server format to client format\nexport const transformNodesToClientFormat = nodes => {\n  return nodes.map(node => {\n    try {\n      // If node already has client format, return as is\n      if (node.type && node.position && node.data) {\n        return node;\n      }\n\n      // Parse the data if it's a string\n      let nodeData = node.data;\n      if (typeof node.data === \"string\") {\n        try {\n          nodeData = JSON.parse(node.data);\n        } catch (e) {\n          nodeData = {\n            label: node.data\n          };\n        }\n      }\n      return {\n        id: node.nodeIdentifier,\n        type: \"courseNode\",\n        // Default node type\n        position: {\n          x: node.positionX || 0,\n          y: node.positionY || 0\n        },\n        data: {\n          ...nodeData,\n          id: node.nodeIdentifier\n        }\n      };\n    } catch (error) {\n      console.error(\"Error transforming node to client format:\", error, node);\n      return null;\n    }\n  }).filter(Boolean);\n};\n\n// Transform nodes from client format to server format\nexport const transformNodesToServerFormat = nodes => {\n  if (!Array.isArray(nodes)) {\n    console.error(\"Nodes is not an array:\", nodes);\n    return [];\n  }\n  return nodes.map(node => {\n    try {\n      var _node$position, _node$position2;\n      if (!node || !node.id) {\n        console.warn(\"Invalid node object:\", node);\n        return null;\n      }\n\n      // Make sure position exists and has valid x, y values\n      const posX = ((_node$position = node.position) === null || _node$position === void 0 ? void 0 : _node$position.x) || 0;\n      const posY = ((_node$position2 = node.position) === null || _node$position2 === void 0 ? void 0 : _node$position2.y) || 0;\n\n      // Make a copy of data to avoid mutating the original\n      const nodeData = {\n        ...(node.data || {})\n      };\n\n      // Return in the format expected by the server\n      return {\n        nodeIdentifier: node.id,\n        positionX: posX,\n        positionY: posY,\n        data: JSON.stringify(nodeData),\n        courseId: nodeData.courseId || null\n      };\n    } catch (error) {\n      console.error(\"Error transforming node to server format:\", error, node);\n      return null;\n    }\n  }).filter(Boolean);\n};\n\n// Transform edges from server format to client format\nexport const transformEdgesToClientFormat = edges => {\n  return edges.map(edge => {\n    try {\n      // If edge already has client format, return as is\n      if (edge.source && edge.target && edge.id) {\n        return edge;\n      }\n\n      // Parse the style if it's a string\n      let edgeStyle = {};\n      if (typeof edge.style === \"string\") {\n        try {\n          edgeStyle = JSON.parse(edge.style);\n        } catch (e) {\n          edgeStyle = {};\n        }\n      } else if (typeof edge.style === \"object\") {\n        edgeStyle = edge.style;\n      }\n      return {\n        id: edge.edgeIdentifier,\n        source: edge.source,\n        target: edge.target,\n        type: edge.type || \"smoothstep\",\n        animated: edge.animated || false,\n        style: edgeStyle\n      };\n    } catch (error) {\n      console.error(\"Error transforming edge to client format:\", error, edge);\n      return null;\n    }\n  }).filter(Boolean);\n};\n\n// Transform edges from client format to server format\nexport const transformEdgesToServerFormat = edges => {\n  if (!Array.isArray(edges)) {\n    console.error(\"Edges is not an array:\", edges);\n    return [];\n  }\n  return edges.map(edge => {\n    try {\n      if (!edge || !edge.id || !edge.source || !edge.target) {\n        console.warn(\"Invalid edge object:\", edge);\n        return null;\n      }\n\n      // Parse or stringify the style\n      let styleString;\n      if (typeof edge.style === \"object\") {\n        styleString = JSON.stringify(edge.style);\n      } else if (typeof edge.style === \"string\") {\n        styleString = edge.style;\n      } else {\n        styleString = JSON.stringify({});\n      }\n\n      // Return in the format expected by the server\n      return {\n        edgeIdentifier: edge.id,\n        source: edge.source,\n        target: edge.target,\n        type: edge.type || \"smoothstep\",\n        animated: edge.animated || false,\n        style: styleString\n      };\n    } catch (error) {\n      console.error(\"Error transforming edge to server format:\", error, edge);\n      return null;\n    }\n  }).filter(Boolean);\n};\nexport default {\n  getCourseRoadmap,\n  saveCourseRoadmap,\n  getRoadmapById,\n  createCourseWithRoadmap,\n  transformNodesToClientFormat,\n  transformNodesToServerFormat,\n  transformEdgesToClientFormat,\n  transformEdgesToServerFormat\n};","map":{"version":3,"names":["api","getCourseRoadmap","courseId","console","log","courseResponse","get","courseData","data","roadmapId","roadmapData","createResponse","post","title","description","categoryId","skillId","userId","id","put","nodes","edges","error","Error","roadmapResponse","baseRoadmap","nodesResponse","Array","isArray","transformNodesToClientFormat","edgesResponse","transformEdgesToClientFormat","length","roadmap","saveCourseRoadmap","isNaN","Number","numericCourseId","transformedNodes","transformNodesToServerFormat","map","node","transformedEdges","transformEdgesToServerFormat","edge","_error$response","_error$response$data","response","message","_error$response2","_error$response2$data","getRoadmapById","createCourseWithRoadmap","courseDetails","newCourse","type","position","nodeData","JSON","parse","e","label","nodeIdentifier","x","positionX","y","positionY","filter","Boolean","_node$position","_node$position2","warn","posX","posY","stringify","source","target","edgeStyle","style","edgeIdentifier","animated","styleString"],"sources":["D:/CyberPath/it-roadmap/client/src/services/courseRoadmapService.js"],"sourcesContent":["import api from \"./api\";\r\n\r\n// Get roadmap data for a course (nodes and edges)\r\nexport const getCourseRoadmap = async (courseId) => {\r\n  try {\r\n    console.log(`Fetching roadmap data for course ${courseId}`);\r\n\r\n    // Get the course data to find associated roadmap\r\n    const courseResponse = await api.get(`/courses/${courseId}`);\r\n    const courseData = courseResponse.data;\r\n\r\n    // Check if this course has an associated roadmap\r\n    let roadmapId = courseData.roadmapId;\r\n    let roadmapData = null;\r\n\r\n    // If no roadmap associated, create one for this course\r\n    if (!roadmapId) {\r\n      console.log(`Course ${courseId} has no associated roadmap, creating one`);\r\n\r\n      try {\r\n        // Create a new roadmap for this course\r\n        const createResponse = await api.post(\"/roadmaps\", {\r\n          title: `Roadmap for ${courseData.title}`,\r\n          description: `Learning roadmap for course: ${courseData.title}`,\r\n          categoryId: courseData.categoryId,\r\n          skillId: courseData.skillId,\r\n          userId: courseData.userId || 1, // Default to user 1 if not specified\r\n        });\r\n\r\n        roadmapId = createResponse.data.id;\r\n\r\n        // Associate the roadmap with the course\r\n        await api.put(`/courses/${courseId}`, {\r\n          roadmapId: roadmapId,\r\n        });\r\n\r\n        console.log(`Created and associated new roadmap ID: ${roadmapId}`);\r\n\r\n        // Initialize with empty roadmap\r\n        roadmapData = {\r\n          ...createResponse.data,\r\n          nodes: [],\r\n          edges: [],\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error creating new roadmap:\", error);\r\n        throw new Error(\"Could not create a roadmap for this course\");\r\n      }\r\n    } else {\r\n      // Fetch the existing roadmap with its nodes and edges\r\n      console.log(\r\n        `Course has roadmap ID: ${roadmapId}, fetching data directly`\r\n      );\r\n      try {\r\n        // Get complete roadmap data\r\n        const roadmapResponse = await api.get(`/roadmaps/${roadmapId}`);\r\n        const baseRoadmap = roadmapResponse.data;\r\n\r\n        // Get nodes\r\n        const nodesResponse = await api.get(`/roadmaps/${roadmapId}/nodes`);\r\n        const nodes =\r\n          nodesResponse.data && Array.isArray(nodesResponse.data)\r\n            ? transformNodesToClientFormat(nodesResponse.data)\r\n            : [];\r\n\r\n        // Get edges\r\n        const edgesResponse = await api.get(`/roadmaps/${roadmapId}/edges`);\r\n        const edges =\r\n          edgesResponse.data && Array.isArray(edgesResponse.data)\r\n            ? transformEdgesToClientFormat(edgesResponse.data)\r\n            : [];\r\n\r\n        console.log(\r\n          `Got ${nodes.length} nodes and ${edges.length} edges from roadmap ${roadmapId}`\r\n        );\r\n\r\n        // Combine roadmap data\r\n        roadmapData = {\r\n          ...baseRoadmap,\r\n          nodes,\r\n          edges,\r\n        };\r\n      } catch (error) {\r\n        console.error(`Error fetching roadmap ${roadmapId} data:`, error);\r\n        throw new Error(`Failed to fetch roadmap ${roadmapId}`);\r\n      }\r\n    }\r\n\r\n    // Return combined data with course info\r\n    return {\r\n      ...courseData,\r\n      roadmap: roadmapData,\r\n      nodes: roadmapData.nodes,\r\n      edges: roadmapData.edges,\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error fetching roadmap for course ${courseId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Save roadmap data directly to roadmap entity\r\nexport const saveCourseRoadmap = async (courseId, roadmapData) => {\r\n  try {\r\n    console.log(`Saving roadmap data for course ${courseId}`);\r\n\r\n    if (!courseId || isNaN(Number(courseId))) {\r\n      throw new Error(`Invalid course ID: ${courseId}`);\r\n    }\r\n\r\n    const numericCourseId = Number(courseId);\r\n    const { nodes, edges } = roadmapData;\r\n\r\n    console.log(\"Nodes to save:\", nodes);\r\n    console.log(\"Edges to save:\", edges);\r\n\r\n    // Validate nodes and edges\r\n    if (!Array.isArray(nodes)) {\r\n      throw new Error(\"Nodes must be an array\");\r\n    }\r\n\r\n    if (!Array.isArray(edges)) {\r\n      throw new Error(\"Edges must be an array\");\r\n    }\r\n\r\n    // Step 1: Get or create a roadmap for this course\r\n    console.log(\r\n      `Step 1: Getting/creating roadmap for course ${numericCourseId}`\r\n    );\r\n    let roadmapId;\r\n\r\n    // First check if course has a roadmap\r\n    const courseResponse = await api.get(`/courses/${numericCourseId}`);\r\n    const courseData = courseResponse.data;\r\n\r\n    if (courseData.roadmapId) {\r\n      roadmapId = courseData.roadmapId;\r\n      console.log(`Using existing roadmap ID: ${roadmapId}`);\r\n    } else {\r\n      // Create new roadmap if course doesn't have one\r\n      const createResponse = await api.post(\"/roadmaps\", {\r\n        title: `Roadmap for ${courseData.title}`,\r\n        description: `Learning roadmap for course: ${courseData.title}`,\r\n        categoryId: courseData.categoryId,\r\n        skillId: courseData.skillId,\r\n        userId: courseData.userId || 1, // Default to user 1 if not specified\r\n      });\r\n\r\n      roadmapId = createResponse.data.id;\r\n\r\n      // Associate roadmap with course\r\n      await api.put(`/courses/${numericCourseId}`, {\r\n        roadmapId: roadmapId,\r\n      });\r\n\r\n      console.log(`Created and associated new roadmap ID: ${roadmapId}`);\r\n    }\r\n\r\n    // Step 2: Transform nodes and edges to add roadmapId\r\n    console.log(\r\n      `Step 2: Transforming nodes and edges for roadmap ${roadmapId}`\r\n    );\r\n    const transformedNodes = transformNodesToServerFormat(nodes).map(\r\n      (node) => ({\r\n        ...node,\r\n        roadmapId: roadmapId,\r\n      })\r\n    );\r\n\r\n    const transformedEdges = transformEdgesToServerFormat(edges).map(\r\n      (edge) => ({\r\n        ...edge,\r\n        roadmapId: roadmapId,\r\n      })\r\n    );\r\n\r\n    // Step 3: Save nodes to the roadmap\r\n    console.log(\r\n      `Step 3: Saving ${transformedNodes.length} nodes to roadmap ${roadmapId}`\r\n    );\r\n    try {\r\n      await api.put(`/roadmaps/${roadmapId}/nodes`, {\r\n        nodes: transformedNodes,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error saving nodes:\", error);\r\n      throw new Error(\r\n        `Failed to save nodes: ${\r\n          error.response?.data?.message || error.message\r\n        }`\r\n      );\r\n    }\r\n\r\n    // Step 4: Save edges to the roadmap\r\n    console.log(\r\n      `Step 4: Saving ${transformedEdges.length} edges to roadmap ${roadmapId}`\r\n    );\r\n    try {\r\n      await api.put(`/roadmaps/${roadmapId}/edges`, {\r\n        edges: transformedEdges,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error saving edges:\", error);\r\n      throw new Error(\r\n        `Failed to save edges: ${\r\n          error.response?.data?.message || error.message\r\n        }`\r\n      );\r\n    }\r\n\r\n    console.log(`Roadmap ${roadmapId} saved successfully`);\r\n\r\n    // Step 5: Get updated roadmap data\r\n    return await getRoadmapById(roadmapId);\r\n  } catch (error) {\r\n    console.error(`Error saving roadmap for course ${courseId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get roadmap by ID directly (not through a course)\r\nexport const getRoadmapById = async (roadmapId) => {\r\n  try {\r\n    console.log(`Fetching roadmap data for ID ${roadmapId}`);\r\n\r\n    // Get the base roadmap data\r\n    const roadmapResponse = await api.get(`/roadmaps/${roadmapId}`);\r\n    const baseRoadmap = roadmapResponse.data;\r\n\r\n    // Get nodes\r\n    const nodesResponse = await api.get(`/roadmaps/${roadmapId}/nodes`);\r\n    const nodes =\r\n      nodesResponse.data && Array.isArray(nodesResponse.data)\r\n        ? transformNodesToClientFormat(nodesResponse.data)\r\n        : [];\r\n\r\n    // Get edges\r\n    const edgesResponse = await api.get(`/roadmaps/${roadmapId}/edges`);\r\n    const edges =\r\n      edgesResponse.data && Array.isArray(edgesResponse.data)\r\n        ? transformEdgesToClientFormat(edgesResponse.data)\r\n        : [];\r\n\r\n    console.log(\r\n      `Got ${nodes.length} nodes and ${edges.length} edges from roadmap ${roadmapId}`\r\n    );\r\n\r\n    // Return combined data\r\n    return {\r\n      ...baseRoadmap,\r\n      nodes,\r\n      edges,\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error fetching roadmap ${roadmapId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new course with roadmap data\r\nexport const createCourseWithRoadmap = async (courseData) => {\r\n  try {\r\n    console.log(\"Creating new course with roadmap data\");\r\n    const { nodes, edges, ...courseDetails } = courseData;\r\n\r\n    // Create the course first\r\n    const courseResponse = await api.post(\"/courses\", courseDetails);\r\n    const newCourse = courseResponse.data;\r\n    const courseId = newCourse.id;\r\n\r\n    // Then create and save roadmap if nodes/edges provided\r\n    if ((nodes && nodes.length > 0) || (edges && edges.length > 0)) {\r\n      await saveCourseRoadmap(courseId, { nodes, edges });\r\n    }\r\n\r\n    // Return the full course with roadmap data\r\n    return await getCourseRoadmap(courseId);\r\n  } catch (error) {\r\n    console.error(\"Error creating course with roadmap:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Transform nodes from server format to client format\r\nexport const transformNodesToClientFormat = (nodes) => {\r\n  return nodes\r\n    .map((node) => {\r\n      try {\r\n        // If node already has client format, return as is\r\n        if (node.type && node.position && node.data) {\r\n          return node;\r\n        }\r\n\r\n        // Parse the data if it's a string\r\n        let nodeData = node.data;\r\n        if (typeof node.data === \"string\") {\r\n          try {\r\n            nodeData = JSON.parse(node.data);\r\n          } catch (e) {\r\n            nodeData = { label: node.data };\r\n          }\r\n        }\r\n\r\n        return {\r\n          id: node.nodeIdentifier,\r\n          type: \"courseNode\", // Default node type\r\n          position: {\r\n            x: node.positionX || 0,\r\n            y: node.positionY || 0,\r\n          },\r\n          data: {\r\n            ...nodeData,\r\n            id: node.nodeIdentifier,\r\n          },\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error transforming node to client format:\", error, node);\r\n        return null;\r\n      }\r\n    })\r\n    .filter(Boolean);\r\n};\r\n\r\n// Transform nodes from client format to server format\r\nexport const transformNodesToServerFormat = (nodes) => {\r\n  if (!Array.isArray(nodes)) {\r\n    console.error(\"Nodes is not an array:\", nodes);\r\n    return [];\r\n  }\r\n\r\n  return nodes\r\n    .map((node) => {\r\n      try {\r\n        if (!node || !node.id) {\r\n          console.warn(\"Invalid node object:\", node);\r\n          return null;\r\n        }\r\n\r\n        // Make sure position exists and has valid x, y values\r\n        const posX = node.position?.x || 0;\r\n        const posY = node.position?.y || 0;\r\n\r\n        // Make a copy of data to avoid mutating the original\r\n        const nodeData = { ...(node.data || {}) };\r\n\r\n        // Return in the format expected by the server\r\n        return {\r\n          nodeIdentifier: node.id,\r\n          positionX: posX,\r\n          positionY: posY,\r\n          data: JSON.stringify(nodeData),\r\n          courseId: nodeData.courseId || null,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error transforming node to server format:\", error, node);\r\n        return null;\r\n      }\r\n    })\r\n    .filter(Boolean);\r\n};\r\n\r\n// Transform edges from server format to client format\r\nexport const transformEdgesToClientFormat = (edges) => {\r\n  return edges\r\n    .map((edge) => {\r\n      try {\r\n        // If edge already has client format, return as is\r\n        if (edge.source && edge.target && edge.id) {\r\n          return edge;\r\n        }\r\n\r\n        // Parse the style if it's a string\r\n        let edgeStyle = {};\r\n        if (typeof edge.style === \"string\") {\r\n          try {\r\n            edgeStyle = JSON.parse(edge.style);\r\n          } catch (e) {\r\n            edgeStyle = {};\r\n          }\r\n        } else if (typeof edge.style === \"object\") {\r\n          edgeStyle = edge.style;\r\n        }\r\n\r\n        return {\r\n          id: edge.edgeIdentifier,\r\n          source: edge.source,\r\n          target: edge.target,\r\n          type: edge.type || \"smoothstep\",\r\n          animated: edge.animated || false,\r\n          style: edgeStyle,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error transforming edge to client format:\", error, edge);\r\n        return null;\r\n      }\r\n    })\r\n    .filter(Boolean);\r\n};\r\n\r\n// Transform edges from client format to server format\r\nexport const transformEdgesToServerFormat = (edges) => {\r\n  if (!Array.isArray(edges)) {\r\n    console.error(\"Edges is not an array:\", edges);\r\n    return [];\r\n  }\r\n\r\n  return edges\r\n    .map((edge) => {\r\n      try {\r\n        if (!edge || !edge.id || !edge.source || !edge.target) {\r\n          console.warn(\"Invalid edge object:\", edge);\r\n          return null;\r\n        }\r\n\r\n        // Parse or stringify the style\r\n        let styleString;\r\n        if (typeof edge.style === \"object\") {\r\n          styleString = JSON.stringify(edge.style);\r\n        } else if (typeof edge.style === \"string\") {\r\n          styleString = edge.style;\r\n        } else {\r\n          styleString = JSON.stringify({});\r\n        }\r\n\r\n        // Return in the format expected by the server\r\n        return {\r\n          edgeIdentifier: edge.id,\r\n          source: edge.source,\r\n          target: edge.target,\r\n          type: edge.type || \"smoothstep\",\r\n          animated: edge.animated || false,\r\n          style: styleString,\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error transforming edge to server format:\", error, edge);\r\n        return null;\r\n      }\r\n    })\r\n    .filter(Boolean);\r\n};\r\n\r\nexport default {\r\n  getCourseRoadmap,\r\n  saveCourseRoadmap,\r\n  getRoadmapById,\r\n  createCourseWithRoadmap,\r\n  transformNodesToClientFormat,\r\n  transformNodesToServerFormat,\r\n  transformEdgesToClientFormat,\r\n  transformEdgesToServerFormat,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}