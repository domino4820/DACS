{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\demo\\\\DACS-jules_wip_16596734084587186652\\\\it-roadmap\\\\client\\\\src\\\\components\\\\RoadmapView.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, Panel, ReactFlowProvider, useReactFlow, MarkerType, Connection } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport { PlusCircle, Save, Trash, Plus, X, Link as LinkIcon, LinkOff, Palette, ArrowLeft, ArrowRight } from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { processEdgeConfig, createEdgeConnection, getEdgeDebugInfo, validateEdgeDirection } from \"../utils/edgeUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  courseNode: CourseNode\n};\nconst RoadmapViewInner = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate\n}, ref) => {\n  _s();\n  const {\n    toast\n  } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const isInitialMount = useRef(true);\n  // Keep track of manually added nodes to prevent them from being lost\n  const addedNodesRef = useRef([]);\n  const {\n    user,\n    devMode,\n    login,\n    logout,\n    isAuthenticated,\n    isAdmin\n  } = useAuth();\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack(prev => [...prev, {\n      nodes: [...nodes],\n      edges: [...edges]\n    }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n\n  // 获取当前的默认边缘配置\n  const getDefaultEdgeOptions = useCallback(() => {\n    return {\n      type: \"smoothstep\",\n      style: {\n        stroke: \"hsl(var(--muted-foreground))\"\n      },\n      animated: false,\n      ...(connectionType === \"arrow\" && {\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          width: 20,\n          height: 20,\n          color: \"hsl(var(--primary))\"\n        }\n      }),\n      data: {\n        connectionType\n      }\n    };\n  }, [connectionType]);\n\n  // Define Save changes AFTER processEdgeConfig is defined\n  const saveChanges = useCallback(() => {\n    if (!onSave) return;\n    try {\n      console.log(\"[VIEW] Preparing to save changes\");\n      console.log(\"[VIEW] Current nodes count:\", nodes.length);\n      console.log(\"[VIEW] Current edges count:\", edges.length);\n\n      // Ensure all nodes have required properties\n      const cleanedNodes = nodes.map(node => {\n        var _node$position, _node$position2, _node$data, _node$data2, _node$data3, _node$data4, _node$data5, _node$data6, _node$data7, _node$data8, _node$data9, _node$data0, _node$data1;\n        // Create a clean copy of the node without React references\n        return {\n          id: node.id,\n          type: node.type || \"courseNode\",\n          position: {\n            x: ((_node$position = node.position) === null || _node$position === void 0 ? void 0 : _node$position.x) || 0,\n            y: ((_node$position2 = node.position) === null || _node$position2 === void 0 ? void 0 : _node$position2.y) || 0\n          },\n          // Extract only the data we need from node.data\n          data: {\n            label: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.label) || \"\",\n            id: node.id,\n            code: ((_node$data2 = node.data) === null || _node$data2 === void 0 ? void 0 : _node$data2.code) || \"\",\n            description: ((_node$data3 = node.data) === null || _node$data3 === void 0 ? void 0 : _node$data3.description) || \"\",\n            completed: ((_node$data4 = node.data) === null || _node$data4 === void 0 ? void 0 : _node$data4.completed) || false,\n            completedAt: ((_node$data5 = node.data) === null || _node$data5 === void 0 ? void 0 : _node$data5.completedAt) || null,\n            documents: ((_node$data6 = node.data) === null || _node$data6 === void 0 ? void 0 : _node$data6.documents) || [],\n            courseId: (_node$data7 = node.data) === null || _node$data7 === void 0 ? void 0 : _node$data7.courseId,\n            nodeColor: (_node$data8 = node.data) === null || _node$data8 === void 0 ? void 0 : _node$data8.nodeColor,\n            nodeBgColor: (_node$data9 = node.data) === null || _node$data9 === void 0 ? void 0 : _node$data9.nodeBgColor,\n            textColor: (_node$data0 = node.data) === null || _node$data0 === void 0 ? void 0 : _node$data0.textColor,\n            fontSize: (_node$data1 = node.data) === null || _node$data1 === void 0 ? void 0 : _node$data1.fontSize\n          }\n        };\n      });\n\n      // Remove any invalid edges\n      const nodeIdMap = new Set(cleanedNodes.map(node => node.id));\n\n      // 仅保留有效的边缘\n      const validEdges = edges.filter(edge => {\n        if (!edge || !edge.id || !edge.source || !edge.target) {\n          console.warn(\"[VIEW] Skipping invalid edge missing id/source/target\");\n          return false;\n        }\n        return true;\n      });\n\n      // Clean edges - 确保它们连接到现有节点并保留正确的方向信息\n      const cleanedEdges = validEdges.filter(edge => {\n        // Check if source and target nodes exist\n        const sourceExists = nodeIdMap.has(edge.source);\n        const targetExists = nodeIdMap.has(edge.target);\n        if (!sourceExists || !targetExists) {\n          console.warn(`[VIEW] Removing invalid edge - Source exists: ${sourceExists}, Target exists: ${targetExists}`, edge);\n          return false;\n        }\n        return true;\n      }).map(edge => {\n        // 使用工具函数确保边缘数据的一致性和箭头方向正确\n        return processEdgeConfig(edge);\n      });\n      console.log(\"[VIEW] Cleaned nodes count:\", cleanedNodes.length);\n      console.log(\"[VIEW] Cleaned edges count:\", cleanedEdges.length);\n\n      // Debug: 记录第一条边缘的方向信息\n      if (cleanedEdges.length > 0) {\n        console.log(\"[VIEW] First edge direction check:\", getEdgeDebugInfo(cleanedEdges[0]));\n      }\n\n      // 确保数据是数组\n      const finalNodes = Array.isArray(cleanedNodes) ? cleanedNodes : [];\n      const finalEdges = Array.isArray(cleanedEdges) ? cleanedEdges : [];\n\n      // 调用回调保存数据\n      console.log(\"[VIEW] Calling onSave with:\", finalNodes.length, \"nodes and\", finalEdges.length, \"edges\");\n      onSave(finalNodes, finalEdges);\n    } catch (error) {\n      console.error(\"[VIEW] Error preparing data for save:\", error);\n      toast({\n        title: \"Lỗi khi chuẩn bị dữ liệu\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  }, [nodes, edges, onSave, toast]);\n\n  // Now define handleCompleteToggle after saveChanges\n  const handleCompleteToggle = useCallback((nodeId, completed) => {\n    var _nodes$find;\n    if (readOnly) return;\n\n    // Get the current timestamp\n    const completedAt = completed ? new Date().toISOString() : null;\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            completed,\n            completedAt\n          }\n        };\n      }\n      return node;\n    }));\n    toast({\n      title: completed ? \"Course marked as completed\" : \"Course marked as incomplete\",\n      description: `You've ${completed ? \"completed\" : \"unmarked\"} ${(_nodes$find = nodes.find(n => n.id === nodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.label}`\n    });\n  }, [nodes, setNodes, toast, readOnly]);\n  const handleAddCourse = useCallback(courseData => {\n    saveCurrentState();\n    console.log(\"[ADD NODE] Adding new course node:\", courseData);\n\n    // Generate a unique node ID with timestamp for guaranteed uniqueness\n    const newNodeId = `node-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\n\n    // Simple positioning math to ensure nodes don't overlap\n    const nodeOffsets = [{\n      x: 0,\n      y: 0\n    }, {\n      x: 250,\n      y: 0\n    }, {\n      x: 0,\n      y: 150\n    }, {\n      x: 250,\n      y: 150\n    }, {\n      x: -250,\n      y: 0\n    }, {\n      x: -250,\n      y: 150\n    }];\n\n    // Base position starts at center if possible\n    let baseX = 0,\n      baseY = 0;\n    if (reactFlowInstance) {\n      const viewport = reactFlowInstance.getViewport();\n      const screenCenter = reactFlowInstance.screenToFlowPosition({\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      });\n      baseX = screenCenter.x;\n      baseY = screenCenter.y;\n    }\n\n    // Choose offset based on node count (cycle through positions)\n    const offset = nodeOffsets[nodes.length % nodeOffsets.length];\n\n    // Final position\n    const position = {\n      x: baseX + offset.x,\n      y: baseY + offset.y\n    };\n    console.log(`[ADD NODE] Creating new node at position: x=${position.x}, y=${position.y}`);\n\n    // Create the node with all required data\n    const newNode = {\n      id: newNodeId,\n      type: \"courseNode\",\n      position,\n      data: {\n        ...courseData,\n        id: newNodeId,\n        completed: false,\n        completedAt: null,\n        showQuickToggle: true,\n        onQuickToggle: handleCompleteToggle\n      }\n    };\n    console.log(\"[ADD NODE] New node created:\", newNode);\n\n    // Add node directly to state and tracking ref\n    setNodes(currentNodes => {\n      const updatedNodes = [...currentNodes, newNode];\n      console.log(\"[ADD NODE] Updated nodes state, new count:\", updatedNodes.length);\n      return updatedNodes;\n    });\n    addedNodesRef.current = [...addedNodesRef.current, newNode];\n    console.log(\"[ADD NODE] Added to tracking ref, new count:\", addedNodesRef.current.length);\n\n    // Close dialog and show confirmation\n    setIsAddCourseOpen(false);\n    toast({\n      title: \"Course added\",\n      description: `${courseData.label} has been added to the roadmap`\n    });\n\n    // Save changes immediately if we're in edit mode to prevent loss\n    if (isEditing && onSave) {\n      console.log(\"[ADD NODE] Auto-saving changes after adding node\");\n      setTimeout(() => {\n        saveChanges();\n      }, 500);\n    }\n\n    // Ensure newly added node is visible\n    setTimeout(() => {\n      if (reactFlowInstance) {\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: false,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        });\n      }\n    }, 100);\n  }, [setNodes, toast, reactFlowInstance, nodes.length, handleCompleteToggle, saveCurrentState, saveChanges, isEditing, onSave]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    // Skip effect if no initial data\n    if (!(initialNodes !== null && initialNodes !== void 0 && initialNodes.length) && !(initialEdges !== null && initialEdges !== void 0 && initialEdges.length)) {\n      return;\n    }\n\n    // Only run once during initial mount to avoid re-render cycles\n    if (isInitialMount.current) {\n      console.log(\"[FLOW] Initial setup with nodes:\", initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length);\n      if ((initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length) > 0) {\n        // Process nodes once with required properties for display\n        const processedNodes = initialNodes.map(node => {\n          var _node$data10;\n          return {\n            ...node,\n            type: \"courseNode\",\n            position: node.position || {\n              x: Math.random() * 500,\n              y: Math.random() * 300\n            },\n            data: {\n              ...node.data,\n              showQuickToggle: true,\n              onQuickToggle: handleCompleteToggle,\n              label: ((_node$data10 = node.data) === null || _node$data10 === void 0 ? void 0 : _node$data10.label) || \"Untitled Node\"\n            }\n          };\n        });\n\n        // Initialize with the processed nodes\n        setNodes(processedNodes);\n        // Store initial nodes in our ref for tracking\n        addedNodesRef.current = [...processedNodes];\n      }\n\n      // Process edges only after nodes are set\n      if ((initialEdges === null || initialEdges === void 0 ? void 0 : initialEdges.length) > 0) {\n        console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\n\n        // Create a map of node IDs for quick lookup\n        const nodeMap = new Map(initialNodes.map(node => [node.id, node]));\n\n        // Validate edges against existing nodes to ensure they connect to valid nodes\n        const validEdges = initialEdges.filter(edge => {\n          // Check that both source and target nodes exist\n          const sourceExists = nodeMap.has(edge.source);\n          const targetExists = nodeMap.has(edge.target);\n          if (!sourceExists || !targetExists) {\n            console.warn(`[FLOW] Skipping invalid edge: Source exists: ${sourceExists}, Target exists: ${targetExists}`, edge);\n            return false;\n          }\n          return true;\n        });\n\n        // Log the handle positions found in the data\n        console.log(\"[FLOW] Edge handle data:\", validEdges.map(edge => {\n          var _edge$data, _edge$data2;\n          return {\n            id: edge.id,\n            sourceHandle: edge.sourceHandle || ((_edge$data = edge.data) === null || _edge$data === void 0 ? void 0 : _edge$data.sourceHandle),\n            targetHandle: edge.targetHandle || ((_edge$data2 = edge.data) === null || _edge$data2 === void 0 ? void 0 : _edge$data2.targetHandle)\n          };\n        }));\n\n        // Process edges with additional data\n        const processedEdges = validEdges.map(edge => {\n          var _edge$data3, _edge$data4;\n          // Extract handle information from wherever it might be stored\n          const sourceHandle = edge.sourceHandle || ((_edge$data3 = edge.data) === null || _edge$data3 === void 0 ? void 0 : _edge$data3.sourceHandle) || null;\n          const targetHandle = edge.targetHandle || ((_edge$data4 = edge.data) === null || _edge$data4 === void 0 ? void 0 : _edge$data4.targetHandle) || null;\n\n          // Generate a consistent ID based on all connection points\n          const edgeId = edge.id || `edge-${edge.source}-${sourceHandle || \"default\"}-${edge.target}-${targetHandle || \"default\"}`;\n\n          // 创建基本边缘属性\n          const baseEdge = {\n            ...edge,\n            id: edgeId,\n            type: edge.type || \"smoothstep\",\n            animated: edge.animated !== undefined ? edge.animated : true,\n            style: edge.style || {\n              stroke: \"hsl(var(--muted-foreground))\"\n            },\n            sourceHandle: sourceHandle,\n            targetHandle: targetHandle,\n            className: `custom-edge source-${sourceHandle || \"default\"} target-${targetHandle || \"default\"}`\n          };\n\n          // 使用外部工具函数确保边缘配置一致性\n          return processEdgeConfig(baseEdge);\n        });\n        console.log(\"[FLOW] Processed edges:\", processedEdges.length);\n        setEdges(processedEdges);\n      }\n\n      // Mark as initialized to prevent future re-processing\n      isInitialMount.current = false;\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle]);\n\n  // Update parent component with internal changes - optimized for fewer updates\n  useEffect(() => {\n    // Skip during initial render or if no update function provided\n    if (isInitialMount.current || !onInternalUpdate) return;\n\n    // Use a debounce to avoid too frequent updates\n    const timer = setTimeout(() => {\n      console.log(`[FLOW] Debounced parent update: ${nodes.length} nodes`);\n      onInternalUpdate(nodes, edges);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Simplify the node preservation effect\n  useEffect(() => {\n    if (addedNodesRef.current.length > 0 && nodes.length === 0) {\n      // Only restore if we've lost ALL nodes (prevents loops)\n      console.log(\"[FLOW] Lost all nodes, restoring from ref\");\n      setNodes(addedNodesRef.current);\n    }\n  }, [nodes.length, setNodes]);\n  const onNodeClick = useCallback((event, node) => {\n    event.stopPropagation();\n    if (editMode === \"delete\") {\n      // Delete mode: remove the node\n      saveCurrentState();\n      setNodes(nodes.filter(n => n.id !== node.id));\n      // Also remove any connected edges\n      setEdges(edges.filter(e => e.source !== node.id && e.target !== node.id));\n      toast({\n        title: \"Node deleted\",\n        description: `${node.data.label} has been removed from the roadmap`\n      });\n    } else if (editMode === \"connect\" && selectedNode) {\n      // Connect mode: create an edge between selectedNode and this node\n      if (selectedNode.id !== node.id) {\n        const newEdge = {\n          id: `edge-${Date.now()}`,\n          source: selectedNode.id,\n          target: node.id,\n          type: \"smoothstep\",\n          animated: true,\n          style: {\n            stroke: \"hsl(var(--muted-foreground))\"\n          },\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"hsl(var(--primary))\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        };\n        saveCurrentState();\n        setEdges(eds => [...eds, newEdge]);\n        setSelectedNode(null);\n        setEditMode(\"select\");\n        toast({\n          title: \"Connection created\",\n          description: `Connected ${selectedNode.data.label} to ${node.data.label}`\n        });\n      }\n    } else if (editMode === \"select\") {\n      // Regular select mode: show node details\n      setSelectedNode(node);\n    }\n  }, [editMode, selectedNode, nodes, edges, setNodes, setEdges, saveCurrentState, toast]);\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\"\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(node => {\n      var _node$data$category;\n      return ((_node$data$category = node.data.category) === null || _node$data$category === void 0 ? void 0 : _node$data$category.toLowerCase()) === selectedCategory.toLowerCase();\n    });\n  }, [nodes, selectedCategory]);\n  const handleStyleChange = useCallback(styles => {\n    // Apply styles to selected node or default edge options\n    if (selectedNode) {\n      handleCompleteToggle(selectedNode.id, styles.nodeStyle.completed);\n    }\n\n    // Update default edge options\n    // (would be implemented in a full version)\n  }, [selectedNode, handleCompleteToggle]);\n  const handleConnectionTypeChange = useCallback(type => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      // Instead of suppressing errors, let's implement a proper fix\n      let resizeObserverLoopErrCount = 0;\n      const debouncedResizeObserverCallback = debounce(() => {\n        resizeObserverLoopErrCount = 0;\n      }, 200);\n      const originalError = console.error;\n      console.error = (...args) => {\n        var _args$, _args$$includes, _args$2, _args$2$message, _args$2$message$inclu;\n        if ((_args$ = args[0]) !== null && _args$ !== void 0 && (_args$$includes = _args$.includes) !== null && _args$$includes !== void 0 && _args$$includes.call(_args$, \"ResizeObserver loop\") || (_args$2 = args[0]) !== null && _args$2 !== void 0 && (_args$2$message = _args$2.message) !== null && _args$2$message !== void 0 && (_args$2$message$inclu = _args$2$message.includes) !== null && _args$2$message$inclu !== void 0 && _args$2$message$inclu.call(_args$2$message, \"ResizeObserver loop\")) {\n          // Increment counter and invoke debounced callback\n          resizeObserverLoopErrCount += 1;\n          if (resizeObserverLoopErrCount <= 1) {\n            debouncedResizeObserverCallback();\n          }\n          // Suppress the error\n          return;\n        }\n        originalError.apply(console, args);\n      };\n      return () => {\n        console.error = originalError;\n      };\n    }\n\n    // Helper function for debounce\n    function debounce(fn, delay) {\n      let timeoutId;\n      return function () {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => fn.apply(this, arguments), delay);\n      };\n    }\n  }, []);\n\n  // Optimize edge rendering and enhance edge interaction\n  useEffect(() => {\n    // Configure ReactFlow for improved edge connection\n    const reactFlowEl = document.querySelector(\".react-flow\");\n    if (reactFlowEl) {\n      // Add custom class for better edge interaction\n      reactFlowEl.classList.add(\"improved-edge-connection\");\n    }\n    return () => {\n      if (reactFlowEl) {\n        reactFlowEl.classList.remove(\"improved-edge-connection\");\n      }\n    };\n  }, []);\n\n  // Ensure nodes are visible in the viewport\n  useEffect(() => {\n    if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\n      // Wait for rendering to complete, then fit view\n      const timeoutId = setTimeout(() => {\n        console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        });\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [nodes.length, reactFlowInstance]);\n\n  // Add a debug useEffect to log whenever nodes change\n  useEffect(() => {\n    if (nodes.length > 0) {\n      console.log(\"[FLOW] Nodes changed, current count:\", nodes.length);\n    }\n  }, [nodes]);\n\n  // Cleanup on unmount to prevent memory leaks\n  useEffect(() => {\n    return () => {\n      // Clear any timeouts that might be pending\n      const viewportEl = document.querySelector(\".react-flow__viewport\");\n      if (viewportEl) {\n        viewportEl.style.transitionProperty = \"\";\n        viewportEl.style.transitionDuration = \"\";\n      }\n      console.log(\"[FLOW] Component unmounting, performing cleanup\");\n    };\n  }, []);\n\n  // Add special effect to prevent excessive console logging during development\n  useEffect(() => {\n    if (process.env.NODE_ENV === \"development\") {\n      const originalConsoleLog = console.log;\n      const flowLogPattern = /^\\[FLOW\\]/;\n\n      // Filter out excessive flow logs in development\n      console.log = (...args) => {\n        if (typeof args[0] === \"string\" && flowLogPattern.test(args[0])) {\n          // Only log important flow messages or when explicitly debugging\n          if (args[0].includes(\"error\") || args[0].includes(\"Creating\") || args[0].includes(\"deleted\")) {\n            originalConsoleLog.apply(console, args);\n          }\n        } else {\n          originalConsoleLog.apply(console, args);\n        }\n      };\n      return () => {\n        console.log = originalConsoleLog;\n      };\n    }\n  }, []);\n\n  // Expose methods to parent component through ref\n  useImperativeHandle(ref, () => ({\n    saveChanges\n  }), [saveChanges]);\n  const onConnect = useCallback(params => {\n    if (readOnly) return false;\n    console.log(\"[CONNECT] Creating new connection:\", params);\n\n    // Save existing state for potential undo\n    saveCurrentState();\n\n    // 使用工具函数创建新的边缘连接\n    const newEdge = createEdgeConnection(params, connectionType);\n    if (!newEdge) {\n      console.error(\"[CONNECT] Failed to create edge\");\n      return false;\n    }\n    console.log(\"[CONNECT] New edge created:\", getEdgeDebugInfo(newEdge));\n\n    // Add edge to state\n    setEdges(eds => {\n      const updatedEdges = addEdge(newEdge, eds);\n      console.log(\"[CONNECT] Updated edges, new count:\", updatedEdges.length);\n      return updatedEdges;\n    });\n\n    // Show confirmation\n    toast({\n      title: \"Connection created\",\n      description: \"A new connection has been added to the roadmap\"\n    });\n\n    // Save changes immediately if we're in edit mode to prevent loss\n    if (isEditing && onSave) {\n      console.log(\"[CONNECT] Auto-saving changes after adding edge\");\n      setTimeout(() => {\n        saveChanges();\n      }, 500);\n    }\n    return true;\n  }, [connectionType, readOnly, setEdges, saveCurrentState, toast, isEditing, onSave, saveChanges]);\n  const handleDeleteNode = useCallback(nodeId => {\n    saveCurrentState();\n\n    // Remove the node from state\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n\n    // Remove the node from our tracking ref\n    addedNodesRef.current = addedNodesRef.current.filter(node => node.id !== nodeId);\n\n    // Remove connected edges\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n\n    // Clear selection\n    setSelectedNode(null);\n    toast({\n      title: \"Node deleted\",\n      description: \"The node has been removed from the roadmap\"\n    });\n\n    // Update view after deletion\n    setTimeout(() => {\n      if (reactFlowInstance) {\n        reactFlowInstance.fitView({\n          padding: 0.5\n        });\n      }\n    }, 100);\n  }, [setNodes, setEdges, toast, saveCurrentState, reactFlowInstance, setSelectedNode]);\n  const handleUpdateNodeStyle = useCallback((nodeId, style) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            ...style\n          }\n        };\n      }\n      return node;\n    }));\n  }, [setNodes]);\n  const onEdgeClick = useCallback((event, edge) => {\n    if (editMode === \"delete\") {\n      saveCurrentState();\n\n      // Delete the edge\n      setEdges(eds => eds.filter(e => e.id !== edge.id));\n      toast({\n        title: \"Connection removed\",\n        description: \"The connection between nodes has been removed\"\n      });\n    }\n  }, [setEdges, editMode, saveCurrentState, toast]);\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const previousState = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, currentState]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const nextState = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, currentState]);\n    setRedoStack(prev => prev.slice(0, -1));\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Debug for admin permissions\n  console.log(\"MainNav rendering with user:\", user);\n  console.log(\"User is admin?\", isAdmin);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    className: \"h-full w-full\",\n    children: [isEditing && showEditorPanel && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"right\",\n      className: \"w-72 mr-2\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapEditorPanel, {\n        onStyleChange: handleStyleChange,\n        onConnectionTypeChange: handleConnectionTypeChange,\n        activeEdgeStyle: connectionType,\n        editMode: editMode,\n        onEditModeChange: mode => {\n          setEditMode(mode);\n          if (mode === \"connect\") {\n            toast({\n              title: \"Connect mode\",\n              description: \"Click on a source node, then click on a target node to create a connection\"\n            });\n          } else if (mode === \"delete\") {\n            toast({\n              title: \"Delete mode\",\n              description: \"Click on a node or connection to delete it\"\n            });\n          }\n        },\n        onAddNodeClick: () => setIsAddCourseOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 943,\n      columnNumber: 11\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"top-right\",\n      className: \"bg-card p-3 rounded-sm border border-[hsl(var(--border))] shadow-md mb-4\" // Updated Panel classes, kept mr-[300px] for now\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2 justify-end\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          variant: \"outline\" // Changed to variant\n          ,\n          onClick: handleUndo,\n          disabled: undoStack.length === 0,\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            className: \"h-4 w-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 981,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          variant: \"outline\" // Changed to variant\n          ,\n          onClick: handleRedo,\n          disabled: redoStack.length === 0,\n          children: /*#__PURE__*/_jsxDEV(ArrowRight, {\n            className: \"h-4 w-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 989,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"default\" // Changed to variant\n          ,\n          size: \"sm\",\n          onClick: saveChanges,\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            className: \"h-4 w-4 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 996,\n            columnNumber: 17\n          }, this), \" Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 991,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 970,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: filteredNodes(),\n        edges: edges,\n        onNodesChange: isEditing ? onNodesChange : undefined,\n        onEdgesChange: isEditing ? onEdgesChange : undefined,\n        onConnect: isEditing ? onConnect : undefined,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        onPaneClick: onPaneClick,\n        nodeTypes: nodeTypes,\n        onNodeDragStop: onNodeDragStop,\n        nodesDraggable: isEditing,\n        nodesConnectable: isEditing && editMode === \"connect\",\n        elementsSelectable: !readOnly,\n        defaultEdgeOptions: getDefaultEdgeOptions(),\n        fitView: true,\n        fitViewOptions: {\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        },\n        minZoom: 0.2,\n        maxZoom: 4,\n        snapToGrid: true,\n        snapGrid: [10, 10],\n        nodeExtent: [[-2000, -2000], [2000, 2000]],\n        proOptions: {\n          hideAttribution: true\n        },\n        disableKeyboardA11y: true,\n        autoPanOnNodeDrag: false,\n        elevateEdgesOnSelect: false,\n        onInit: instance => {\n          // Use setTimeout to ensure proper initialization\n          setTimeout(() => {\n            if (nodes.length > 0) {\n              instance.fitView({\n                padding: 0.5\n              });\n              console.log(\"[FLOW] Flow initialized with nodes:\", nodes.length);\n            }\n          }, 300);\n        }\n        // Add custom edge rendering to set data attributes based on handle positions\n        ,\n        edgeUpdaterRadius: 10,\n        edgesUpdatable: true,\n        edgesFocusable: true,\n        onEdgeUpdate: (oldEdge, newConnection) => {\n          setEdges(els => els.map(edge => {\n            if (edge.id === oldEdge.id) {\n              // Generate new ID based on new connection points\n              const newId = `edge-${newConnection.source}-${newConnection.sourceHandle || \"default\"}-${newConnection.target}-${newConnection.targetHandle || \"default\"}`;\n              return {\n                ...edge,\n                id: newId,\n                source: newConnection.source,\n                target: newConnection.target,\n                sourceHandle: newConnection.sourceHandle,\n                targetHandle: newConnection.targetHandle,\n                data: {\n                  ...edge.data,\n                  sourceId: newConnection.source,\n                  targetId: newConnection.target,\n                  sourceHandle: newConnection.sourceHandle,\n                  targetHandle: newConnection.targetHandle,\n                  sourceHandleType: newConnection.sourceHandle || \"default\",\n                  targetHandleType: newConnection.targetHandle || \"default\"\n                }\n              };\n            }\n            return edge;\n          }));\n          return true;\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1090,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n          nodeStrokeWidth: 3,\n          zoomable: true,\n          pannable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1091,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 12,\n          size: 1,\n          color: \"hsl(var(--border))\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1092,\n          columnNumber: 13\n        }, this), \" \", edges.map(edge => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-edgeid\": edge.id,\n            \"data-sourcehandle\": edge.sourceHandle || \"default\",\n            \"data-targethandle\": edge.targetHandle || \"default\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1102,\n            columnNumber: 17\n          }, this)\n        }, `handle-${edge.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 15\n        }, this))]\n      }, `flow-${id}-${nodes.length}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 9\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(CourseInfoPanel, {\n      node: selectedNode,\n      onClose: () => setSelectedNode(null),\n      onCompleteToggle: handleCompleteToggle,\n      onDelete: isEditing ? handleDeleteNode : undefined,\n      onUpdateStyle: handleUpdateNodeStyle,\n      isAdmin: isEditing,\n      readOnly: readOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1113,\n      columnNumber: 11\n    }, this), isAddCourseOpen && /*#__PURE__*/_jsxDEV(AddCourseDialog, {\n      open: isAddCourseOpen,\n      onClose: () => setIsAddCourseOpen(false),\n      onAdd: handleAddCourse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1125,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 941,\n    columnNumber: 7\n  }, this);\n}, \"PWKqusw3WEBhSDQ+c+1uTLLrMxg=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow, useAuth];\n})), \"PWKqusw3WEBhSDQ+c+1uTLLrMxg=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow, useAuth];\n});\n_c2 = RoadmapViewInner;\nconst RoadmapView = /*#__PURE__*/forwardRef(_c3 = (props, ref) => {\n  var _props$initialNodes, _props$initialEdges;\n  console.log(\"[FLOW] RoadmapView wrapper rendering with props:\", {\n    id: props.id,\n    nodesCount: (_props$initialNodes = props.initialNodes) === null || _props$initialNodes === void 0 ? void 0 : _props$initialNodes.length,\n    edgesCount: (_props$initialEdges = props.initialEdges) === null || _props$initialEdges === void 0 ? void 0 : _props$initialEdges.length\n  });\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapViewInner, {\n        ref: ref,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1144,\n    columnNumber: 5\n  }, this);\n});\n_c4 = RoadmapView;\nexport default RoadmapView;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"RoadmapViewInner$forwardRef\");\n$RefreshReg$(_c2, \"RoadmapViewInner\");\n$RefreshReg$(_c3, \"RoadmapView$forwardRef\");\n$RefreshReg$(_c4, \"RoadmapView\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useCallback","useEffect","useRef","forwardRef","useImperativeHandle","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","Palette","ArrowLeft","ArrowRight","CourseNode","CourseInfoPanel","AddCourseDialog","RoadmapEditorPanel","useAuth","processEdgeConfig","createEdgeConnection","getEdgeDebugInfo","validateEdgeDirection","jsxDEV","_jsxDEV","nodeTypes","courseNode","RoadmapViewInner","_c","id","initialNodes","initialEdges","isEditing","readOnly","onSave","onInternalUpdate","ref","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","connectionType","setConnectionType","showEditorPanel","setShowEditorPanel","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","isInitialMount","addedNodesRef","user","devMode","login","logout","isAuthenticated","isAdmin","isSidebarOpen","setIsSidebarOpen","saveCurrentState","prev","getDefaultEdgeOptions","type","style","stroke","animated","markerEnd","ArrowClosed","width","height","color","data","saveChanges","console","log","length","cleanedNodes","map","node","_node$position","_node$position2","_node$data","_node$data2","_node$data3","_node$data4","_node$data5","_node$data6","_node$data7","_node$data8","_node$data9","_node$data0","_node$data1","position","x","y","label","code","description","completed","completedAt","documents","courseId","nodeColor","nodeBgColor","textColor","fontSize","nodeIdMap","Set","validEdges","filter","edge","source","target","warn","cleanedEdges","sourceExists","has","targetExists","finalNodes","Array","isArray","finalEdges","error","title","message","variant","handleCompleteToggle","nodeId","_nodes$find","Date","toISOString","nds","find","n","handleAddCourse","courseData","newNodeId","now","Math","floor","random","nodeOffsets","baseX","baseY","viewport","getViewport","screenCenter","screenToFlowPosition","window","innerWidth","innerHeight","offset","newNode","showQuickToggle","onQuickToggle","currentNodes","updatedNodes","current","setTimeout","fitView","padding","includeHiddenNodes","minZoom","maxZoom","processedNodes","_node$data10","nodeMap","Map","_edge$data","_edge$data2","sourceHandle","targetHandle","processedEdges","_edge$data3","_edge$data4","edgeId","baseEdge","undefined","className","timer","clearTimeout","onNodeClick","event","stopPropagation","e","newEdge","eds","onPaneClick","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","handleStyleChange","styles","nodeStyle","handleConnectionTypeChange","process","env","NODE_ENV","resizeObserverLoopErrCount","debouncedResizeObserverCallback","debounce","originalError","args","_args$","_args$$includes","_args$2","_args$2$message","_args$2$message$inclu","includes","call","apply","fn","delay","timeoutId","arguments","reactFlowEl","document","querySelector","classList","add","remove","viewportEl","transitionProperty","transitionDuration","originalConsoleLog","flowLogPattern","test","onConnect","params","updatedEdges","handleDeleteNode","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","children","onStyleChange","onConnectionTypeChange","activeEdgeStyle","onEditModeChange","mode","onAddNodeClick","fileName","lineNumber","columnNumber","size","onClick","disabled","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitViewOptions","snapToGrid","snapGrid","nodeExtent","proOptions","hideAttribution","disableKeyboardA11y","autoPanOnNodeDrag","elevateEdgesOnSelect","onInit","instance","edgeUpdaterRadius","edgesUpdatable","edgesFocusable","onEdgeUpdate","oldEdge","newConnection","els","newId","sourceId","targetId","sourceHandleType","targetHandleType","nodeStrokeWidth","zoomable","pannable","gap","display","onClose","onCompleteToggle","onDelete","onUpdateStyle","open","onAdd","_c2","RoadmapView","_c3","props","_props$initialNodes","_props$initialEdges","nodesCount","edgesCount","_c4","$RefreshReg$"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport ReactFlow, {\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  addEdge,\r\n  Panel,\r\n  ReactFlowProvider,\r\n  useReactFlow,\r\n  MarkerType,\r\n  Connection,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\r\nimport { Button } from \"./ui/button\";\r\nimport { useToast } from \"./ui/use-toast\";\r\nimport {\r\n  PlusCircle,\r\n  Save,\r\n  Trash,\r\n  Plus,\r\n  X,\r\n  Link as LinkIcon,\r\n  LinkOff,\r\n  Palette,\r\n  ArrowLeft,\r\n  ArrowRight,\r\n} from \"lucide-react\";\r\nimport CourseNode from \"./CourseNode\";\r\nimport CourseInfoPanel from \"./CourseInfoPanel\";\r\nimport AddCourseDialog from \"./AddCourseDialog\";\r\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport {\r\n  processEdgeConfig,\r\n  createEdgeConnection,\r\n  getEdgeDebugInfo,\r\n  validateEdgeDirection,\r\n} from \"../utils/edgeUtils\";\r\n\r\nconst nodeTypes = {\r\n  courseNode: CourseNode,\r\n};\r\n\r\nconst RoadmapViewInner = forwardRef(\r\n  (\r\n    {\r\n      id,\r\n      initialNodes = [],\r\n      initialEdges = [],\r\n      isEditing = false,\r\n      readOnly = false,\r\n      onSave,\r\n      onInternalUpdate,\r\n    },\r\n    ref\r\n  ) => {\r\n    const { toast } = useToast();\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n    const [selectedCategory, setSelectedCategory] = useState(\"all\");\r\n    const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\r\n    const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\r\n    const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\r\n    const [showEditorPanel, setShowEditorPanel] = useState(true);\r\n    const reactFlowWrapper = useRef(null);\r\n    const reactFlowInstance = useReactFlow();\r\n    const [undoStack, setUndoStack] = useState([]);\r\n    const [redoStack, setRedoStack] = useState([]);\r\n    const isInitialMount = useRef(true);\r\n    // Keep track of manually added nodes to prevent them from being lost\r\n    const addedNodesRef = useRef([]);\r\n    const { user, devMode, login, logout, isAuthenticated, isAdmin } =\r\n      useAuth();\r\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n    // Save current state for undo feature\r\n    const saveCurrentState = useCallback(() => {\r\n      setUndoStack((prev) => [\r\n        ...prev,\r\n        { nodes: [...nodes], edges: [...edges] },\r\n      ]);\r\n      setRedoStack([]);\r\n    }, [nodes, edges]);\r\n\r\n    // 获取当前的默认边缘配置\r\n    const getDefaultEdgeOptions = useCallback(() => {\r\n      return {\r\n        type: \"smoothstep\",\r\n        style: { stroke: \"hsl(var(--muted-foreground))\" },\r\n        animated: false,\r\n        ...(connectionType === \"arrow\" && {\r\n          markerEnd: {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: \"hsl(var(--primary))\",\r\n          },\r\n        }),\r\n        data: {\r\n          connectionType,\r\n        },\r\n      };\r\n    }, [connectionType]);\r\n\r\n    // Define Save changes AFTER processEdgeConfig is defined\r\n    const saveChanges = useCallback(() => {\r\n      if (!onSave) return;\r\n\r\n      try {\r\n        console.log(\"[VIEW] Preparing to save changes\");\r\n        console.log(\"[VIEW] Current nodes count:\", nodes.length);\r\n        console.log(\"[VIEW] Current edges count:\", edges.length);\r\n\r\n        // Ensure all nodes have required properties\r\n        const cleanedNodes = nodes.map((node) => {\r\n          // Create a clean copy of the node without React references\r\n          return {\r\n            id: node.id,\r\n            type: node.type || \"courseNode\",\r\n            position: {\r\n              x: node.position?.x || 0,\r\n              y: node.position?.y || 0,\r\n            },\r\n            // Extract only the data we need from node.data\r\n            data: {\r\n              label: node.data?.label || \"\",\r\n              id: node.id,\r\n              code: node.data?.code || \"\",\r\n              description: node.data?.description || \"\",\r\n              completed: node.data?.completed || false,\r\n              completedAt: node.data?.completedAt || null,\r\n              documents: node.data?.documents || [],\r\n              courseId: node.data?.courseId,\r\n              nodeColor: node.data?.nodeColor,\r\n              nodeBgColor: node.data?.nodeBgColor,\r\n              textColor: node.data?.textColor,\r\n              fontSize: node.data?.fontSize,\r\n            },\r\n          };\r\n        });\r\n\r\n        // Remove any invalid edges\r\n        const nodeIdMap = new Set(cleanedNodes.map((node) => node.id));\r\n\r\n        // 仅保留有效的边缘\r\n        const validEdges = edges.filter((edge) => {\r\n          if (!edge || !edge.id || !edge.source || !edge.target) {\r\n            console.warn(\r\n              \"[VIEW] Skipping invalid edge missing id/source/target\"\r\n            );\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n\r\n        // Clean edges - 确保它们连接到现有节点并保留正确的方向信息\r\n        const cleanedEdges = validEdges\r\n          .filter((edge) => {\r\n            // Check if source and target nodes exist\r\n            const sourceExists = nodeIdMap.has(edge.source);\r\n            const targetExists = nodeIdMap.has(edge.target);\r\n\r\n            if (!sourceExists || !targetExists) {\r\n              console.warn(\r\n                `[VIEW] Removing invalid edge - Source exists: ${sourceExists}, Target exists: ${targetExists}`,\r\n                edge\r\n              );\r\n              return false;\r\n            }\r\n            return true;\r\n          })\r\n          .map((edge) => {\r\n            // 使用工具函数确保边缘数据的一致性和箭头方向正确\r\n            return processEdgeConfig(edge);\r\n          });\r\n\r\n        console.log(\"[VIEW] Cleaned nodes count:\", cleanedNodes.length);\r\n        console.log(\"[VIEW] Cleaned edges count:\", cleanedEdges.length);\r\n\r\n        // Debug: 记录第一条边缘的方向信息\r\n        if (cleanedEdges.length > 0) {\r\n          console.log(\r\n            \"[VIEW] First edge direction check:\",\r\n            getEdgeDebugInfo(cleanedEdges[0])\r\n          );\r\n        }\r\n\r\n        // 确保数据是数组\r\n        const finalNodes = Array.isArray(cleanedNodes) ? cleanedNodes : [];\r\n        const finalEdges = Array.isArray(cleanedEdges) ? cleanedEdges : [];\r\n\r\n        // 调用回调保存数据\r\n        console.log(\r\n          \"[VIEW] Calling onSave with:\",\r\n          finalNodes.length,\r\n          \"nodes and\",\r\n          finalEdges.length,\r\n          \"edges\"\r\n        );\r\n        onSave(finalNodes, finalEdges);\r\n      } catch (error) {\r\n        console.error(\"[VIEW] Error preparing data for save:\", error);\r\n        toast({\r\n          title: \"Lỗi khi chuẩn bị dữ liệu\",\r\n          description: error.message,\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n    }, [nodes, edges, onSave, toast]);\r\n\r\n    // Now define handleCompleteToggle after saveChanges\r\n    const handleCompleteToggle = useCallback(\r\n      (nodeId, completed) => {\r\n        if (readOnly) return;\r\n\r\n        // Get the current timestamp\r\n        const completedAt = completed ? new Date().toISOString() : null;\r\n\r\n        setNodes((nds) =>\r\n          nds.map((node) => {\r\n            if (node.id === nodeId) {\r\n              return {\r\n                ...node,\r\n                data: {\r\n                  ...node.data,\r\n                  completed,\r\n                  completedAt,\r\n                },\r\n              };\r\n            }\r\n            return node;\r\n          })\r\n        );\r\n\r\n        toast({\r\n          title: completed\r\n            ? \"Course marked as completed\"\r\n            : \"Course marked as incomplete\",\r\n          description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\r\n            nodes.find((n) => n.id === nodeId)?.data.label\r\n          }`,\r\n        });\r\n      },\r\n      [nodes, setNodes, toast, readOnly]\r\n    );\r\n\r\n    const handleAddCourse = useCallback(\r\n      (courseData) => {\r\n        saveCurrentState();\r\n\r\n        console.log(\"[ADD NODE] Adding new course node:\", courseData);\r\n\r\n        // Generate a unique node ID with timestamp for guaranteed uniqueness\r\n        const newNodeId = `node-${Date.now()}-${Math.floor(\r\n          Math.random() * 1000000\r\n        )}`;\r\n\r\n        // Simple positioning math to ensure nodes don't overlap\r\n        const nodeOffsets = [\r\n          { x: 0, y: 0 },\r\n          { x: 250, y: 0 },\r\n          { x: 0, y: 150 },\r\n          { x: 250, y: 150 },\r\n          { x: -250, y: 0 },\r\n          { x: -250, y: 150 },\r\n        ];\r\n\r\n        // Base position starts at center if possible\r\n        let baseX = 0,\r\n          baseY = 0;\r\n\r\n        if (reactFlowInstance) {\r\n          const viewport = reactFlowInstance.getViewport();\r\n          const screenCenter = reactFlowInstance.screenToFlowPosition({\r\n            x: window.innerWidth / 2,\r\n            y: window.innerHeight / 2,\r\n          });\r\n          baseX = screenCenter.x;\r\n          baseY = screenCenter.y;\r\n        }\r\n\r\n        // Choose offset based on node count (cycle through positions)\r\n        const offset = nodeOffsets[nodes.length % nodeOffsets.length];\r\n\r\n        // Final position\r\n        const position = {\r\n          x: baseX + offset.x,\r\n          y: baseY + offset.y,\r\n        };\r\n\r\n        console.log(\r\n          `[ADD NODE] Creating new node at position: x=${position.x}, y=${position.y}`\r\n        );\r\n\r\n        // Create the node with all required data\r\n        const newNode = {\r\n          id: newNodeId,\r\n          type: \"courseNode\",\r\n          position,\r\n          data: {\r\n            ...courseData,\r\n            id: newNodeId,\r\n            completed: false,\r\n            completedAt: null,\r\n            showQuickToggle: true,\r\n            onQuickToggle: handleCompleteToggle,\r\n          },\r\n        };\r\n\r\n        console.log(\"[ADD NODE] New node created:\", newNode);\r\n\r\n        // Add node directly to state and tracking ref\r\n        setNodes((currentNodes) => {\r\n          const updatedNodes = [...currentNodes, newNode];\r\n          console.log(\r\n            \"[ADD NODE] Updated nodes state, new count:\",\r\n            updatedNodes.length\r\n          );\r\n          return updatedNodes;\r\n        });\r\n\r\n        addedNodesRef.current = [...addedNodesRef.current, newNode];\r\n        console.log(\r\n          \"[ADD NODE] Added to tracking ref, new count:\",\r\n          addedNodesRef.current.length\r\n        );\r\n\r\n        // Close dialog and show confirmation\r\n        setIsAddCourseOpen(false);\r\n        toast({\r\n          title: \"Course added\",\r\n          description: `${courseData.label} has been added to the roadmap`,\r\n        });\r\n\r\n        // Save changes immediately if we're in edit mode to prevent loss\r\n        if (isEditing && onSave) {\r\n          console.log(\"[ADD NODE] Auto-saving changes after adding node\");\r\n          setTimeout(() => {\r\n            saveChanges();\r\n          }, 500);\r\n        }\r\n\r\n        // Ensure newly added node is visible\r\n        setTimeout(() => {\r\n          if (reactFlowInstance) {\r\n            reactFlowInstance.fitView({\r\n              padding: 0.5,\r\n              includeHiddenNodes: false,\r\n              minZoom: 0.5,\r\n              maxZoom: 1.5,\r\n            });\r\n          }\r\n        }, 100);\r\n      },\r\n      [\r\n        setNodes,\r\n        toast,\r\n        reactFlowInstance,\r\n        nodes.length,\r\n        handleCompleteToggle,\r\n        saveCurrentState,\r\n        saveChanges,\r\n        isEditing,\r\n        onSave,\r\n      ]\r\n    );\r\n\r\n    // Set initial nodes and edges when they change\r\n    useEffect(() => {\r\n      // Skip effect if no initial data\r\n      if (!initialNodes?.length && !initialEdges?.length) {\r\n        return;\r\n      }\r\n\r\n      // Only run once during initial mount to avoid re-render cycles\r\n      if (isInitialMount.current) {\r\n        console.log(\"[FLOW] Initial setup with nodes:\", initialNodes?.length);\r\n\r\n        if (initialNodes?.length > 0) {\r\n          // Process nodes once with required properties for display\r\n          const processedNodes = initialNodes.map((node) => ({\r\n            ...node,\r\n            type: \"courseNode\",\r\n            position: node.position || {\r\n              x: Math.random() * 500,\r\n              y: Math.random() * 300,\r\n            },\r\n            data: {\r\n              ...node.data,\r\n              showQuickToggle: true,\r\n              onQuickToggle: handleCompleteToggle,\r\n              label: node.data?.label || \"Untitled Node\",\r\n            },\r\n          }));\r\n\r\n          // Initialize with the processed nodes\r\n          setNodes(processedNodes);\r\n          // Store initial nodes in our ref for tracking\r\n          addedNodesRef.current = [...processedNodes];\r\n        }\r\n\r\n        // Process edges only after nodes are set\r\n        if (initialEdges?.length > 0) {\r\n          console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\r\n\r\n          // Create a map of node IDs for quick lookup\r\n          const nodeMap = new Map(initialNodes.map((node) => [node.id, node]));\r\n\r\n          // Validate edges against existing nodes to ensure they connect to valid nodes\r\n          const validEdges = initialEdges.filter((edge) => {\r\n            // Check that both source and target nodes exist\r\n            const sourceExists = nodeMap.has(edge.source);\r\n            const targetExists = nodeMap.has(edge.target);\r\n\r\n            if (!sourceExists || !targetExists) {\r\n              console.warn(\r\n                `[FLOW] Skipping invalid edge: Source exists: ${sourceExists}, Target exists: ${targetExists}`,\r\n                edge\r\n              );\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n\r\n          // Log the handle positions found in the data\r\n          console.log(\r\n            \"[FLOW] Edge handle data:\",\r\n            validEdges.map((edge) => ({\r\n              id: edge.id,\r\n              sourceHandle: edge.sourceHandle || edge.data?.sourceHandle,\r\n              targetHandle: edge.targetHandle || edge.data?.targetHandle,\r\n            }))\r\n          );\r\n\r\n          // Process edges with additional data\r\n          const processedEdges = validEdges.map((edge) => {\r\n            // Extract handle information from wherever it might be stored\r\n            const sourceHandle =\r\n              edge.sourceHandle || edge.data?.sourceHandle || null;\r\n            const targetHandle =\r\n              edge.targetHandle || edge.data?.targetHandle || null;\r\n\r\n            // Generate a consistent ID based on all connection points\r\n            const edgeId =\r\n              edge.id ||\r\n              `edge-${edge.source}-${sourceHandle || \"default\"}-${\r\n                edge.target\r\n              }-${targetHandle || \"default\"}`;\r\n\r\n            // 创建基本边缘属性\r\n            const baseEdge = {\r\n              ...edge,\r\n              id: edgeId,\r\n              type: edge.type || \"smoothstep\",\r\n              animated: edge.animated !== undefined ? edge.animated : true,\r\n              style: edge.style || { stroke: \"hsl(var(--muted-foreground))\" },\r\n              sourceHandle: sourceHandle,\r\n              targetHandle: targetHandle,\r\n              className: `custom-edge source-${\r\n                sourceHandle || \"default\"\r\n              } target-${targetHandle || \"default\"}`,\r\n            };\r\n\r\n            // 使用外部工具函数确保边缘配置一致性\r\n            return processEdgeConfig(baseEdge);\r\n          });\r\n\r\n          console.log(\"[FLOW] Processed edges:\", processedEdges.length);\r\n          setEdges(processedEdges);\r\n        }\r\n\r\n        // Mark as initialized to prevent future re-processing\r\n        isInitialMount.current = false;\r\n      }\r\n    }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle]);\r\n\r\n    // Update parent component with internal changes - optimized for fewer updates\r\n    useEffect(() => {\r\n      // Skip during initial render or if no update function provided\r\n      if (isInitialMount.current || !onInternalUpdate) return;\r\n\r\n      // Use a debounce to avoid too frequent updates\r\n      const timer = setTimeout(() => {\r\n        console.log(`[FLOW] Debounced parent update: ${nodes.length} nodes`);\r\n        onInternalUpdate(nodes, edges);\r\n      }, 500);\r\n\r\n      return () => clearTimeout(timer);\r\n    }, [nodes, edges, onInternalUpdate]);\r\n\r\n    // Simplify the node preservation effect\r\n    useEffect(() => {\r\n      if (addedNodesRef.current.length > 0 && nodes.length === 0) {\r\n        // Only restore if we've lost ALL nodes (prevents loops)\r\n        console.log(\"[FLOW] Lost all nodes, restoring from ref\");\r\n        setNodes(addedNodesRef.current);\r\n      }\r\n    }, [nodes.length, setNodes]);\r\n\r\n    const onNodeClick = useCallback(\r\n      (event, node) => {\r\n        event.stopPropagation();\r\n\r\n        if (editMode === \"delete\") {\r\n          // Delete mode: remove the node\r\n          saveCurrentState();\r\n          setNodes(nodes.filter((n) => n.id !== node.id));\r\n          // Also remove any connected edges\r\n          setEdges(\r\n            edges.filter((e) => e.source !== node.id && e.target !== node.id)\r\n          );\r\n\r\n          toast({\r\n            title: \"Node deleted\",\r\n            description: `${node.data.label} has been removed from the roadmap`,\r\n          });\r\n        } else if (editMode === \"connect\" && selectedNode) {\r\n          // Connect mode: create an edge between selectedNode and this node\r\n          if (selectedNode.id !== node.id) {\r\n            const newEdge = {\r\n              id: `edge-${Date.now()}`,\r\n              source: selectedNode.id,\r\n              target: node.id,\r\n              type: \"smoothstep\",\r\n              animated: true,\r\n              style: { stroke: \"hsl(var(--muted-foreground))\" },\r\n              ...(connectionType === \"arrow\" && {\r\n                markerEnd: {\r\n                  type: MarkerType.ArrowClosed,\r\n                  width: 20,\r\n                  height: 20,\r\n                  color: \"hsl(var(--primary))\",\r\n                },\r\n              }),\r\n              data: {\r\n                connectionType,\r\n              },\r\n            };\r\n\r\n            saveCurrentState();\r\n            setEdges((eds) => [...eds, newEdge]);\r\n            setSelectedNode(null);\r\n            setEditMode(\"select\");\r\n\r\n            toast({\r\n              title: \"Connection created\",\r\n              description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\r\n            });\r\n          }\r\n        } else if (editMode === \"select\") {\r\n          // Regular select mode: show node details\r\n          setSelectedNode(node);\r\n        }\r\n      },\r\n      [\r\n        editMode,\r\n        selectedNode,\r\n        nodes,\r\n        edges,\r\n        setNodes,\r\n        setEdges,\r\n        saveCurrentState,\r\n        toast,\r\n      ]\r\n    );\r\n\r\n    const onPaneClick = useCallback(() => {\r\n      // In regular mode, clicking the pane should deselect the node\r\n      setSelectedNode(null);\r\n\r\n      // If in connect mode but no node selected, return to select mode\r\n      if (editMode === \"connect\" && selectedNode) {\r\n        setEditMode(\"select\");\r\n        setSelectedNode(null);\r\n        toast({\r\n          title: \"Connection cancelled\",\r\n          description: \"Node connection has been cancelled\",\r\n        });\r\n      }\r\n    }, [editMode, selectedNode, toast]);\r\n\r\n    // Update node positions when they are dragged\r\n    const onNodeDragStop = useCallback(() => {\r\n      if (isEditing) {\r\n        saveCurrentState();\r\n      }\r\n    }, [isEditing, saveCurrentState]);\r\n\r\n    // Handle category filtering\r\n    const filteredNodes = useCallback(() => {\r\n      if (selectedCategory === \"all\") {\r\n        return nodes;\r\n      }\r\n      return nodes.filter(\r\n        (node) =>\r\n          node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\r\n      );\r\n    }, [nodes, selectedCategory]);\r\n\r\n    const handleStyleChange = useCallback(\r\n      (styles) => {\r\n        // Apply styles to selected node or default edge options\r\n        if (selectedNode) {\r\n          handleCompleteToggle(selectedNode.id, styles.nodeStyle.completed);\r\n        }\r\n\r\n        // Update default edge options\r\n        // (would be implemented in a full version)\r\n      },\r\n      [selectedNode, handleCompleteToggle]\r\n    );\r\n\r\n    const handleConnectionTypeChange = useCallback((type) => {\r\n      setConnectionType(type);\r\n    }, []);\r\n\r\n    // Ngăn chặn cảnh báo ResizeObserver\r\n    useEffect(() => {\r\n      // Chỉ áp dụng trong môi trường phát triển\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        // Instead of suppressing errors, let's implement a proper fix\r\n        let resizeObserverLoopErrCount = 0;\r\n        const debouncedResizeObserverCallback = debounce(() => {\r\n          resizeObserverLoopErrCount = 0;\r\n        }, 200);\r\n\r\n        const originalError = console.error;\r\n        console.error = (...args) => {\r\n          if (\r\n            args[0]?.includes?.(\"ResizeObserver loop\") ||\r\n            args[0]?.message?.includes?.(\"ResizeObserver loop\")\r\n          ) {\r\n            // Increment counter and invoke debounced callback\r\n            resizeObserverLoopErrCount += 1;\r\n            if (resizeObserverLoopErrCount <= 1) {\r\n              debouncedResizeObserverCallback();\r\n            }\r\n            // Suppress the error\r\n            return;\r\n          }\r\n          originalError.apply(console, args);\r\n        };\r\n\r\n        return () => {\r\n          console.error = originalError;\r\n        };\r\n      }\r\n\r\n      // Helper function for debounce\r\n      function debounce(fn, delay) {\r\n        let timeoutId;\r\n        return function () {\r\n          clearTimeout(timeoutId);\r\n          timeoutId = setTimeout(() => fn.apply(this, arguments), delay);\r\n        };\r\n      }\r\n    }, []);\r\n\r\n    // Optimize edge rendering and enhance edge interaction\r\n    useEffect(() => {\r\n      // Configure ReactFlow for improved edge connection\r\n      const reactFlowEl = document.querySelector(\".react-flow\");\r\n      if (reactFlowEl) {\r\n        // Add custom class for better edge interaction\r\n        reactFlowEl.classList.add(\"improved-edge-connection\");\r\n      }\r\n\r\n      return () => {\r\n        if (reactFlowEl) {\r\n          reactFlowEl.classList.remove(\"improved-edge-connection\");\r\n        }\r\n      };\r\n    }, []);\r\n\r\n    // Ensure nodes are visible in the viewport\r\n    useEffect(() => {\r\n      if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\r\n        // Wait for rendering to complete, then fit view\r\n        const timeoutId = setTimeout(() => {\r\n          console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\r\n          reactFlowInstance.fitView({\r\n            padding: 0.5,\r\n            includeHiddenNodes: true,\r\n            minZoom: 0.5,\r\n            maxZoom: 1.5,\r\n          });\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeoutId);\r\n      }\r\n    }, [nodes.length, reactFlowInstance]);\r\n\r\n    // Add a debug useEffect to log whenever nodes change\r\n    useEffect(() => {\r\n      if (nodes.length > 0) {\r\n        console.log(\"[FLOW] Nodes changed, current count:\", nodes.length);\r\n      }\r\n    }, [nodes]);\r\n\r\n    // Cleanup on unmount to prevent memory leaks\r\n    useEffect(() => {\r\n      return () => {\r\n        // Clear any timeouts that might be pending\r\n        const viewportEl = document.querySelector(\".react-flow__viewport\");\r\n        if (viewportEl) {\r\n          viewportEl.style.transitionProperty = \"\";\r\n          viewportEl.style.transitionDuration = \"\";\r\n        }\r\n\r\n        console.log(\"[FLOW] Component unmounting, performing cleanup\");\r\n      };\r\n    }, []);\r\n\r\n    // Add special effect to prevent excessive console logging during development\r\n    useEffect(() => {\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        const originalConsoleLog = console.log;\r\n        const flowLogPattern = /^\\[FLOW\\]/;\r\n\r\n        // Filter out excessive flow logs in development\r\n        console.log = (...args) => {\r\n          if (typeof args[0] === \"string\" && flowLogPattern.test(args[0])) {\r\n            // Only log important flow messages or when explicitly debugging\r\n            if (\r\n              args[0].includes(\"error\") ||\r\n              args[0].includes(\"Creating\") ||\r\n              args[0].includes(\"deleted\")\r\n            ) {\r\n              originalConsoleLog.apply(console, args);\r\n            }\r\n          } else {\r\n            originalConsoleLog.apply(console, args);\r\n          }\r\n        };\r\n\r\n        return () => {\r\n          console.log = originalConsoleLog;\r\n        };\r\n      }\r\n    }, []);\r\n\r\n    // Expose methods to parent component through ref\r\n    useImperativeHandle(\r\n      ref,\r\n      () => ({\r\n        saveChanges,\r\n      }),\r\n      [saveChanges]\r\n    );\r\n\r\n    const onConnect = useCallback(\r\n      (params) => {\r\n        if (readOnly) return false;\r\n\r\n        console.log(\"[CONNECT] Creating new connection:\", params);\r\n\r\n        // Save existing state for potential undo\r\n        saveCurrentState();\r\n\r\n        // 使用工具函数创建新的边缘连接\r\n        const newEdge = createEdgeConnection(params, connectionType);\r\n\r\n        if (!newEdge) {\r\n          console.error(\"[CONNECT] Failed to create edge\");\r\n          return false;\r\n        }\r\n\r\n        console.log(\"[CONNECT] New edge created:\", getEdgeDebugInfo(newEdge));\r\n\r\n        // Add edge to state\r\n        setEdges((eds) => {\r\n          const updatedEdges = addEdge(newEdge, eds);\r\n          console.log(\r\n            \"[CONNECT] Updated edges, new count:\",\r\n            updatedEdges.length\r\n          );\r\n          return updatedEdges;\r\n        });\r\n\r\n        // Show confirmation\r\n        toast({\r\n          title: \"Connection created\",\r\n          description: \"A new connection has been added to the roadmap\",\r\n        });\r\n\r\n        // Save changes immediately if we're in edit mode to prevent loss\r\n        if (isEditing && onSave) {\r\n          console.log(\"[CONNECT] Auto-saving changes after adding edge\");\r\n          setTimeout(() => {\r\n            saveChanges();\r\n          }, 500);\r\n        }\r\n\r\n        return true;\r\n      },\r\n      [\r\n        connectionType,\r\n        readOnly,\r\n        setEdges,\r\n        saveCurrentState,\r\n        toast,\r\n        isEditing,\r\n        onSave,\r\n        saveChanges,\r\n      ]\r\n    );\r\n\r\n    const handleDeleteNode = useCallback(\r\n      (nodeId) => {\r\n        saveCurrentState();\r\n\r\n        // Remove the node from state\r\n        setNodes((nds) => nds.filter((node) => node.id !== nodeId));\r\n\r\n        // Remove the node from our tracking ref\r\n        addedNodesRef.current = addedNodesRef.current.filter(\r\n          (node) => node.id !== nodeId\r\n        );\r\n\r\n        // Remove connected edges\r\n        setEdges((eds) =>\r\n          eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\r\n        );\r\n\r\n        // Clear selection\r\n        setSelectedNode(null);\r\n\r\n        toast({\r\n          title: \"Node deleted\",\r\n          description: \"The node has been removed from the roadmap\",\r\n        });\r\n\r\n        // Update view after deletion\r\n        setTimeout(() => {\r\n          if (reactFlowInstance) {\r\n            reactFlowInstance.fitView({ padding: 0.5 });\r\n          }\r\n        }, 100);\r\n      },\r\n      [\r\n        setNodes,\r\n        setEdges,\r\n        toast,\r\n        saveCurrentState,\r\n        reactFlowInstance,\r\n        setSelectedNode,\r\n      ]\r\n    );\r\n\r\n    const handleUpdateNodeStyle = useCallback(\r\n      (nodeId, style) => {\r\n        setNodes((nds) =>\r\n          nds.map((node) => {\r\n            if (node.id === nodeId) {\r\n              return {\r\n                ...node,\r\n                data: {\r\n                  ...node.data,\r\n                  ...style,\r\n                },\r\n              };\r\n            }\r\n            return node;\r\n          })\r\n        );\r\n      },\r\n      [setNodes]\r\n    );\r\n\r\n    const onEdgeClick = useCallback(\r\n      (event, edge) => {\r\n        if (editMode === \"delete\") {\r\n          saveCurrentState();\r\n\r\n          // Delete the edge\r\n          setEdges((eds) => eds.filter((e) => e.id !== edge.id));\r\n\r\n          toast({\r\n            title: \"Connection removed\",\r\n            description: \"The connection between nodes has been removed\",\r\n          });\r\n        }\r\n      },\r\n      [setEdges, editMode, saveCurrentState, toast]\r\n    );\r\n\r\n    const handleUndo = useCallback(() => {\r\n      if (undoStack.length === 0) return;\r\n\r\n      const currentState = { nodes: [...nodes], edges: [...edges] };\r\n      const previousState = undoStack[undoStack.length - 1];\r\n\r\n      setRedoStack((prev) => [...prev, currentState]);\r\n      setUndoStack((prev) => prev.slice(0, -1));\r\n\r\n      setNodes(previousState.nodes);\r\n      setEdges(previousState.edges);\r\n\r\n      toast({\r\n        title: \"Undo\",\r\n        description: \"Previous action undone\",\r\n      });\r\n    }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\r\n\r\n    const handleRedo = useCallback(() => {\r\n      if (redoStack.length === 0) return;\r\n\r\n      const currentState = { nodes: [...nodes], edges: [...edges] };\r\n      const nextState = redoStack[redoStack.length - 1];\r\n\r\n      setUndoStack((prev) => [...prev, currentState]);\r\n      setRedoStack((prev) => prev.slice(0, -1));\r\n\r\n      setNodes(nextState.nodes);\r\n      setEdges(nextState.edges);\r\n\r\n      toast({\r\n        title: \"Redo\",\r\n        description: \"Action redone\",\r\n      });\r\n    }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\r\n\r\n    // Debug for admin permissions\r\n    console.log(\"MainNav rendering with user:\", user);\r\n    console.log(\"User is admin?\", isAdmin);\r\n\r\n    return (\r\n      <div ref={reactFlowWrapper} className=\"h-full w-full\">\r\n        {isEditing && showEditorPanel && (\r\n          <Panel position=\"right\" className=\"w-72 mr-2\">\r\n            <RoadmapEditorPanel\r\n              onStyleChange={handleStyleChange}\r\n              onConnectionTypeChange={handleConnectionTypeChange}\r\n              activeEdgeStyle={connectionType}\r\n              editMode={editMode}\r\n              onEditModeChange={(mode) => {\r\n                setEditMode(mode);\r\n                if (mode === \"connect\") {\r\n                  toast({\r\n                    title: \"Connect mode\",\r\n                    description:\r\n                      \"Click on a source node, then click on a target node to create a connection\",\r\n                  });\r\n                } else if (mode === \"delete\") {\r\n                  toast({\r\n                    title: \"Delete mode\",\r\n                    description: \"Click on a node or connection to delete it\",\r\n                  });\r\n                }\r\n              }}\r\n              onAddNodeClick={() => setIsAddCourseOpen(true)}\r\n            />\r\n          </Panel>\r\n        )}\r\n\r\n        {isEditing && (\r\n          <Panel\r\n            position=\"top-right\"\r\n            className=\"bg-card p-3 rounded-sm border border-[hsl(var(--border))] shadow-md mb-4\" // Updated Panel classes, kept mr-[300px] for now\r\n          >\r\n            <div className=\"flex gap-2 justify-end\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\" // Changed to variant\r\n                onClick={handleUndo}\r\n                disabled={undoStack.length === 0}\r\n              >\r\n                <ArrowLeft className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"outline\" // Changed to variant\r\n                onClick={handleRedo}\r\n                disabled={redoStack.length === 0}\r\n              >\r\n                <ArrowRight className=\"h-4 w-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"default\" // Changed to variant\r\n                size=\"sm\"\r\n                onClick={saveChanges}\r\n              >\r\n                <Save className=\"h-4 w-4 mr-1\" /> Save\r\n              </Button>\r\n            </div>\r\n          </Panel>\r\n        )}\r\n\r\n        <div className=\"h-full\">\r\n          <ReactFlow\r\n            key={`flow-${id}-${nodes.length}`}\r\n            nodes={filteredNodes()}\r\n            edges={edges}\r\n            onNodesChange={isEditing ? onNodesChange : undefined}\r\n            onEdgesChange={isEditing ? onEdgesChange : undefined}\r\n            onConnect={isEditing ? onConnect : undefined}\r\n            onNodeClick={onNodeClick}\r\n            onEdgeClick={onEdgeClick}\r\n            onPaneClick={onPaneClick}\r\n            nodeTypes={nodeTypes}\r\n            onNodeDragStop={onNodeDragStop}\r\n            nodesDraggable={isEditing}\r\n            nodesConnectable={isEditing && editMode === \"connect\"}\r\n            elementsSelectable={!readOnly}\r\n            defaultEdgeOptions={getDefaultEdgeOptions()}\r\n            fitView\r\n            fitViewOptions={{\r\n              padding: 0.5,\r\n              includeHiddenNodes: true,\r\n              minZoom: 0.5,\r\n              maxZoom: 1.5,\r\n            }}\r\n            minZoom={0.2}\r\n            maxZoom={4}\r\n            snapToGrid={true}\r\n            snapGrid={[10, 10]}\r\n            nodeExtent={[\r\n              [-2000, -2000],\r\n              [2000, 2000],\r\n            ]}\r\n            proOptions={{ hideAttribution: true }}\r\n            disableKeyboardA11y={true}\r\n            autoPanOnNodeDrag={false}\r\n            elevateEdgesOnSelect={false}\r\n            onInit={(instance) => {\r\n              // Use setTimeout to ensure proper initialization\r\n              setTimeout(() => {\r\n                if (nodes.length > 0) {\r\n                  instance.fitView({ padding: 0.5 });\r\n                  console.log(\r\n                    \"[FLOW] Flow initialized with nodes:\",\r\n                    nodes.length\r\n                  );\r\n                }\r\n              }, 300);\r\n            }}\r\n            // Add custom edge rendering to set data attributes based on handle positions\r\n            edgeUpdaterRadius={10}\r\n            edgesUpdatable={true}\r\n            edgesFocusable={true}\r\n            onEdgeUpdate={(oldEdge, newConnection) => {\r\n              setEdges((els) =>\r\n                els.map((edge) => {\r\n                  if (edge.id === oldEdge.id) {\r\n                    // Generate new ID based on new connection points\r\n                    const newId = `edge-${newConnection.source}-${\r\n                      newConnection.sourceHandle || \"default\"\r\n                    }-${newConnection.target}-${\r\n                      newConnection.targetHandle || \"default\"\r\n                    }`;\r\n                    return {\r\n                      ...edge,\r\n                      id: newId,\r\n                      source: newConnection.source,\r\n                      target: newConnection.target,\r\n                      sourceHandle: newConnection.sourceHandle,\r\n                      targetHandle: newConnection.targetHandle,\r\n                      data: {\r\n                        ...edge.data,\r\n                        sourceId: newConnection.source,\r\n                        targetId: newConnection.target,\r\n                        sourceHandle: newConnection.sourceHandle,\r\n                        targetHandle: newConnection.targetHandle,\r\n                        sourceHandleType:\r\n                          newConnection.sourceHandle || \"default\",\r\n                        targetHandleType:\r\n                          newConnection.targetHandle || \"default\",\r\n                      },\r\n                    };\r\n                  }\r\n                  return edge;\r\n                })\r\n              );\r\n              return true;\r\n            }}\r\n          >\r\n            <Controls />\r\n            <MiniMap nodeStrokeWidth={3} zoomable pannable />\r\n            <Background\r\n              variant=\"dots\"\r\n              gap={12}\r\n              size={1}\r\n              color=\"hsl(var(--border))\"\r\n            />{\" \"}\r\n            {/* Updated Background color */}\r\n            {/* Add custom edge styles for colored connections */}\r\n            {edges.map((edge) => (\r\n              <div key={`handle-${edge.id}`} style={{ display: \"none\" }}>\r\n                <div\r\n                  data-edgeid={edge.id}\r\n                  data-sourcehandle={edge.sourceHandle || \"default\"}\r\n                  data-targethandle={edge.targetHandle || \"default\"}\r\n                />\r\n              </div>\r\n            ))}\r\n          </ReactFlow>\r\n        </div>\r\n\r\n        {selectedNode && (\r\n          <CourseInfoPanel\r\n            node={selectedNode}\r\n            onClose={() => setSelectedNode(null)}\r\n            onCompleteToggle={handleCompleteToggle}\r\n            onDelete={isEditing ? handleDeleteNode : undefined}\r\n            onUpdateStyle={handleUpdateNodeStyle}\r\n            isAdmin={isEditing}\r\n            readOnly={readOnly}\r\n          />\r\n        )}\r\n\r\n        {isAddCourseOpen && (\r\n          <AddCourseDialog\r\n            open={isAddCourseOpen}\r\n            onClose={() => setIsAddCourseOpen(false)}\r\n            onAdd={handleAddCourse}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst RoadmapView = forwardRef((props, ref) => {\r\n  console.log(\"[FLOW] RoadmapView wrapper rendering with props:\", {\r\n    id: props.id,\r\n    nodesCount: props.initialNodes?.length,\r\n    edgesCount: props.initialEdges?.length,\r\n  });\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n      <div className=\"w-full h-full\">\r\n        <RoadmapViewInner ref={ref} {...props} />\r\n      </div>\r\n    </ReactFlowProvider>\r\n  );\r\n});\r\n\r\nexport default RoadmapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}