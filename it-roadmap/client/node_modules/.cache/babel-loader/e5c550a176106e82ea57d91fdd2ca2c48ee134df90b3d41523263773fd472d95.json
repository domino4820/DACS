{"ast":null,"code":"import api from \"./api\";\n\n// Get all roadmaps\nexport const getRoadmaps = async () => {\n  const response = await api.get(\"/roadmaps\");\n  return response.data;\n};\n\n// Get roadmap by ID\nexport const getRoadmapById = async id => {\n  const response = await api.get(`/roadmaps/${id}`);\n  // Format data to ensure consistent properties\n  const roadmapData = response.data;\n\n  // Make sure categoryName is available\n  if (roadmapData.category && !roadmapData.categoryName) {\n    roadmapData.categoryName = roadmapData.category.name;\n  }\n\n  // Make sure author info is available for backward compatibility\n  if (roadmapData.user && !roadmapData.author) {\n    roadmapData.author = roadmapData.user.username;\n  }\n  return roadmapData;\n};\n\n// Create new roadmap\nexport const createRoadmap = async roadmapData => {\n  const response = await api.post(\"/roadmaps\", roadmapData);\n  return response.data;\n};\n\n// Update roadmap\nexport const updateRoadmap = async (id, roadmapData) => {\n  const response = await api.put(`/roadmaps/${id}`, roadmapData);\n  return response.data;\n};\n\n// Delete roadmap\nexport const deleteRoadmap = async id => {\n  const response = await api.delete(`/roadmaps/${id}`);\n  return response.data;\n};\n\n// Get roadmap nodes - including course connections\nexport const getRoadmapNodes = async id => {\n  try {\n    console.log(`Fetching nodes for roadmap ${id}`);\n    const response = await api.get(`/roadmaps/${id}/nodes`);\n\n    // Transform server-side node format to client-side format\n    const transformedNodes = response.data.map(node => {\n      try {\n        // Parse the JSON data field\n        const nodeData = node.data ? JSON.parse(node.data) : {};\n\n        // Check if this node is linked to a course\n        let courseDetails = {};\n        if (node.courseId) {\n          // In a real implementation, you might fetch course details here\n          // or have them included in the node response\n          courseDetails = {\n            courseId: node.courseId\n            // Other course properties would be added here\n          };\n        }\n        return {\n          id: node.nodeIdentifier,\n          type: \"courseNode\",\n          // Default type for all nodes\n          position: {\n            x: node.positionX,\n            y: node.positionY\n          },\n          data: {\n            id: node.nodeIdentifier,\n            label: nodeData.label || \"\",\n            code: nodeData.code || \"\",\n            description: nodeData.description || \"\",\n            category: nodeData.category || \"\",\n            categoryId: nodeData.categoryId || null,\n            difficulty: nodeData.difficulty || \"beginner\",\n            credits: nodeData.credits || 0,\n            completed: nodeData.completed || false,\n            nodeColor: nodeData.nodeColor,\n            nodeBgColor: nodeData.nodeBgColor,\n            textColor: nodeData.textColor,\n            fontSize: nodeData.fontSize,\n            prerequisites: nodeData.prerequisites || \"\",\n            documentation: nodeData.documentation || \"\",\n            ...courseDetails\n          }\n        };\n      } catch (error) {\n        console.error(\"Error parsing node data:\", error, node);\n        return null;\n      }\n    }).filter(node => node !== null);\n    console.log(`Transformed ${transformedNodes.length} nodes`);\n    return transformedNodes;\n  } catch (error) {\n    console.error(\"Error fetching roadmap nodes:\", error);\n    throw error;\n  }\n};\n\n// Update roadmap nodes\nexport const updateRoadmapNodes = async (id, nodes) => {\n  try {\n    var _nodes;\n    console.log(`[API] Updating ${((_nodes = nodes) === null || _nodes === void 0 ? void 0 : _nodes.length) || 0} nodes for roadmap ${id}`);\n    console.log(`[API] Nodes data type:`, typeof nodes, Array.isArray(nodes));\n\n    // Đảm bảo nodes là mảng hợp lệ\n    if (!nodes) {\n      console.error(\"[API] Nodes is null or undefined\");\n      nodes = [];\n    }\n    if (!Array.isArray(nodes)) {\n      console.error(\"[API] Invalid nodes data - not an array:\", typeof nodes);\n      // Cố gắng chuyển đổi thành mảng nếu có thể\n      try {\n        if (typeof nodes === \"object\" && nodes !== null) {\n          nodes = Object.values(nodes);\n          console.log(\"[API] Converted object to array, length:\", nodes.length);\n        } else {\n          nodes = [];\n        }\n      } catch (conversionError) {\n        console.error(\"[API] Conversion error:\", conversionError);\n        nodes = [];\n      }\n    }\n    if (nodes.length === 0) {\n      console.warn(\"[API] Warning: Empty nodes array provided\");\n    }\n\n    // Transform to server format\n    const serverNodes = nodes.map(node => {\n      var _node, _node$position, _node$position2, _node$data, _serverNode$data, _serverNode$data2;\n      // Ensure all required node properties exist\n      if (!((_node = node) !== null && _node !== void 0 && _node.id)) {\n        console.error(\"[UPDATE] Node missing id:\", node);\n        // Generate a unique ID instead of throwing error\n        node = {\n          ...node,\n          id: `node_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n        };\n      }\n      if (!node.position) {\n        console.warn(`[UPDATE] Node ${node.id} missing position, using default`);\n        node.position = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      // Ensure node data is well-formed JSON\n      let nodeDataString;\n      if (typeof node.data === \"object\") {\n        nodeDataString = JSON.stringify(node.data);\n      } else if (typeof node.data === \"string\") {\n        // Validate that it's already valid JSON\n        try {\n          JSON.parse(node.data); // Just testing if this works\n          nodeDataString = node.data;\n        } catch (e) {\n          console.error(`[UPDATE] Invalid JSON data for node ${node.id}:`, e);\n          nodeDataString = JSON.stringify({\n            label: node.data || \"Unknown\"\n          });\n        }\n      } else {\n        nodeDataString = JSON.stringify({\n          label: \"Unknown\"\n        });\n      }\n\n      // Create properly formatted server node\n      const serverNode = {\n        nodeIdentifier: node.id,\n        positionX: ((_node$position = node.position) === null || _node$position === void 0 ? void 0 : _node$position.x) || 0,\n        positionY: ((_node$position2 = node.position) === null || _node$position2 === void 0 ? void 0 : _node$position2.y) || 0,\n        data: nodeDataString,\n        courseId: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.courseId) || null\n      };\n      console.log(`[UPDATE] Transformed node ${node.id} for server:`, {\n        nodeIdentifier: serverNode.nodeIdentifier,\n        positionX: serverNode.positionX,\n        positionY: serverNode.positionY,\n        dataLength: (_serverNode$data = serverNode.data) === null || _serverNode$data === void 0 ? void 0 : _serverNode$data.length,\n        dataPreview: (_serverNode$data2 = serverNode.data) === null || _serverNode$data2 === void 0 ? void 0 : _serverNode$data2.substring(0, 50),\n        courseId: serverNode.courseId\n      });\n      return serverNode;\n    });\n    console.log(`[API] Sending ${serverNodes.length} nodes to server`);\n    const response = await api.put(`/roadmaps/${id}/nodes`, {\n      nodes: serverNodes\n    });\n    console.log(`[API] Server response for nodes update:`, response.status, response.statusText);\n    console.log(`[API] Response data:`, response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`[API ERROR] Failed to update nodes:`, error);\n    if (error.response) {\n      console.error(`[API ERROR] Response status:`, error.response.status);\n      console.error(`[API ERROR] Response data:`, error.response.data);\n    }\n    throw error;\n  }\n};\n\n// Get roadmap edges\nexport const getRoadmapEdges = async id => {\n  try {\n    console.log(`Fetching edges for roadmap ${id}`);\n    const response = await api.get(`/roadmaps/${id}/edges`);\n\n    // Transform server-side edge format to client-side format\n    const transformedEdges = response.data.map(edge => {\n      try {\n        // Parse the JSON style field\n        const edgeStyle = edge.style ? JSON.parse(edge.style) : {};\n        return {\n          id: edge.edgeIdentifier,\n          source: edge.source,\n          target: edge.target,\n          type: edge.type || \"smoothstep\",\n          animated: edge.animated || false,\n          style: {\n            stroke: edgeStyle.stroke || \"#6d28d9\",\n            strokeWidth: edgeStyle.strokeWidth || 1\n          }\n        };\n      } catch (error) {\n        console.error(\"Error parsing edge data:\", error, edge);\n        return null;\n      }\n    }).filter(edge => edge !== null);\n    console.log(`Transformed ${transformedEdges.length} edges`);\n    return transformedEdges;\n  } catch (error) {\n    console.error(\"Error fetching roadmap edges:\", error);\n    throw error;\n  }\n};\n\n// Update roadmap edges\nexport const updateRoadmapEdges = async (id, edges) => {\n  try {\n    var _edges;\n    console.log(`[API] Updating ${((_edges = edges) === null || _edges === void 0 ? void 0 : _edges.length) || 0} edges for roadmap ${id}`);\n    console.log(`[API] Edges data type:`, typeof edges, Array.isArray(edges));\n\n    // Đảm bảo edges là mảng hợp lệ\n    if (!edges) {\n      console.error(\"[API] Edges is null or undefined\");\n      edges = [];\n    }\n    if (!Array.isArray(edges)) {\n      console.error(\"[API] Invalid edges data - not an array:\", typeof edges);\n      // Cố gắng chuyển đổi thành mảng nếu có thể\n      try {\n        if (typeof edges === \"object\" && edges !== null) {\n          edges = Object.values(edges);\n          console.log(\"[API] Converted object to array, length:\", edges.length);\n        } else {\n          edges = [];\n        }\n      } catch (conversionError) {\n        console.error(\"[API] Conversion error:\", conversionError);\n        edges = [];\n      }\n    }\n    if (edges.length === 0) {\n      console.warn(\"[API] Warning: Empty edges array provided\");\n    }\n\n    // Transform to server format\n    const serverEdges = edges.map(edge => {\n      // Validate required edge properties\n      if (!(edge !== null && edge !== void 0 && edge.id) || !(edge !== null && edge !== void 0 && edge.source) || !(edge !== null && edge !== void 0 && edge.target)) {\n        console.error(\"[UPDATE] Edge missing required properties:\", edge);\n        // Skip this edge instead of throwing an error\n        return null;\n      }\n\n      // Ensure style is well-formed JSON\n      let styleString;\n      if (typeof edge.style === \"object\" && edge.style !== null) {\n        try {\n          styleString = JSON.stringify(edge.style);\n        } catch (e) {\n          console.error(`[UPDATE] Error stringifying style for edge ${edge.id}:`, e);\n          styleString = JSON.stringify({\n            stroke: \"#999\"\n          });\n        }\n      } else if (typeof edge.style === \"string\") {\n        // Validate that it's already valid JSON\n        try {\n          JSON.parse(edge.style); // Just testing if this works\n          styleString = edge.style;\n        } catch (e) {\n          console.error(`[UPDATE] Invalid JSON style for edge ${edge.id}:`, e);\n          styleString = JSON.stringify({\n            stroke: \"#999\"\n          });\n        }\n      } else {\n        styleString = JSON.stringify({\n          stroke: \"#999\"\n        });\n      }\n\n      // Create properly formatted server edge\n      const serverEdge = {\n        edgeIdentifier: edge.id,\n        source: edge.source,\n        target: edge.target,\n        type: edge.type || \"smoothstep\",\n        animated: edge.animated || false,\n        style: styleString\n      };\n      console.log(`[UPDATE] Transformed edge ${edge.id} for server:`, {\n        edgeIdentifier: serverEdge.edgeIdentifier,\n        source: serverEdge.source,\n        target: serverEdge.target,\n        type: serverEdge.type\n      });\n      return serverEdge;\n    }).filter(edge => edge !== null); // Lọc bỏ các edge null\n\n    console.log(`[API] Sending ${serverEdges.length} edges to server`);\n    const response = await api.put(`/roadmaps/${id}/edges`, {\n      edges: serverEdges\n    });\n    console.log(`[API] Server response for edges update:`, response.status, response.statusText);\n    console.log(`[API] Response data:`, response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`[API ERROR] Failed to update edges:`, error);\n    if (error.response) {\n      console.error(`[API ERROR] Response status:`, error.response.status);\n      console.error(`[API ERROR] Response data:`, error.response.data);\n    }\n    throw error;\n  }\n};\n\n// Toggle favorite roadmap\nexport const toggleFavoriteRoadmap = async id => {\n  const response = await api.post(`/roadmaps/${id}/favorite`);\n  return response.data;\n};\n\n// Get user favorites\nexport const getUserFavorites = async () => {\n  const response = await api.get(\"/roadmaps/favorites\");\n  return response.data;\n};\n\n// Link a course to a roadmap node\nexport const linkCourseToNode = async (roadmapId, nodeId, courseId) => {\n  try {\n    const response = await api.post(`/roadmaps/${roadmapId}/nodes/${nodeId}/link-course`, {\n      courseId: Number(courseId)\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error linking course to node:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getRoadmaps","response","get","data","getRoadmapById","id","roadmapData","category","categoryName","name","user","author","username","createRoadmap","post","updateRoadmap","put","deleteRoadmap","delete","getRoadmapNodes","console","log","transformedNodes","map","node","nodeData","JSON","parse","courseDetails","courseId","nodeIdentifier","type","position","x","positionX","y","positionY","label","code","description","categoryId","difficulty","credits","completed","nodeColor","nodeBgColor","textColor","fontSize","prerequisites","documentation","error","filter","length","updateRoadmapNodes","nodes","_nodes","Array","isArray","Object","values","conversionError","warn","serverNodes","_node","_node$position","_node$position2","_node$data","_serverNode$data","_serverNode$data2","Date","now","Math","random","toString","substring","nodeDataString","stringify","e","serverNode","dataLength","dataPreview","status","statusText","getRoadmapEdges","transformedEdges","edge","edgeStyle","style","edgeIdentifier","source","target","animated","stroke","strokeWidth","updateRoadmapEdges","edges","_edges","serverEdges","styleString","serverEdge","toggleFavoriteRoadmap","getUserFavorites","linkCourseToNode","roadmapId","nodeId","Number"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/services/roadmapService.js"],"sourcesContent":["import api from \"./api\";\r\n\r\n// Get all roadmaps\r\nexport const getRoadmaps = async () => {\r\n  const response = await api.get(\"/roadmaps\");\r\n  return response.data;\r\n};\r\n\r\n// Get roadmap by ID\r\nexport const getRoadmapById = async (id) => {\r\n  const response = await api.get(`/roadmaps/${id}`);\r\n  // Format data to ensure consistent properties\r\n  const roadmapData = response.data;\r\n\r\n  // Make sure categoryName is available\r\n  if (roadmapData.category && !roadmapData.categoryName) {\r\n    roadmapData.categoryName = roadmapData.category.name;\r\n  }\r\n\r\n  // Make sure author info is available for backward compatibility\r\n  if (roadmapData.user && !roadmapData.author) {\r\n    roadmapData.author = roadmapData.user.username;\r\n  }\r\n\r\n  return roadmapData;\r\n};\r\n\r\n// Create new roadmap\r\nexport const createRoadmap = async (roadmapData) => {\r\n  const response = await api.post(\"/roadmaps\", roadmapData);\r\n  return response.data;\r\n};\r\n\r\n// Update roadmap\r\nexport const updateRoadmap = async (id, roadmapData) => {\r\n  const response = await api.put(`/roadmaps/${id}`, roadmapData);\r\n  return response.data;\r\n};\r\n\r\n// Delete roadmap\r\nexport const deleteRoadmap = async (id) => {\r\n  const response = await api.delete(`/roadmaps/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Get roadmap nodes - including course connections\r\nexport const getRoadmapNodes = async (id) => {\r\n  try {\r\n    console.log(`Fetching nodes for roadmap ${id}`);\r\n    const response = await api.get(`/roadmaps/${id}/nodes`);\r\n\r\n    // Transform server-side node format to client-side format\r\n    const transformedNodes = response.data\r\n      .map((node) => {\r\n        try {\r\n          // Parse the JSON data field\r\n          const nodeData = node.data ? JSON.parse(node.data) : {};\r\n\r\n          // Check if this node is linked to a course\r\n          let courseDetails = {};\r\n          if (node.courseId) {\r\n            // In a real implementation, you might fetch course details here\r\n            // or have them included in the node response\r\n            courseDetails = {\r\n              courseId: node.courseId,\r\n              // Other course properties would be added here\r\n            };\r\n          }\r\n\r\n          return {\r\n            id: node.nodeIdentifier,\r\n            type: \"courseNode\", // Default type for all nodes\r\n            position: {\r\n              x: node.positionX,\r\n              y: node.positionY,\r\n            },\r\n            data: {\r\n              id: node.nodeIdentifier,\r\n              label: nodeData.label || \"\",\r\n              code: nodeData.code || \"\",\r\n              description: nodeData.description || \"\",\r\n              category: nodeData.category || \"\",\r\n              categoryId: nodeData.categoryId || null,\r\n              difficulty: nodeData.difficulty || \"beginner\",\r\n              credits: nodeData.credits || 0,\r\n              completed: nodeData.completed || false,\r\n              nodeColor: nodeData.nodeColor,\r\n              nodeBgColor: nodeData.nodeBgColor,\r\n              textColor: nodeData.textColor,\r\n              fontSize: nodeData.fontSize,\r\n              prerequisites: nodeData.prerequisites || \"\",\r\n              documentation: nodeData.documentation || \"\",\r\n              ...courseDetails,\r\n            },\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error parsing node data:\", error, node);\r\n          return null;\r\n        }\r\n      })\r\n      .filter((node) => node !== null);\r\n\r\n    console.log(`Transformed ${transformedNodes.length} nodes`);\r\n    return transformedNodes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching roadmap nodes:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update roadmap nodes\r\nexport const updateRoadmapNodes = async (id, nodes) => {\r\n  try {\r\n    console.log(`[API] Updating ${nodes?.length || 0} nodes for roadmap ${id}`);\r\n    console.log(`[API] Nodes data type:`, typeof nodes, Array.isArray(nodes));\r\n\r\n    // Đảm bảo nodes là mảng hợp lệ\r\n    if (!nodes) {\r\n      console.error(\"[API] Nodes is null or undefined\");\r\n      nodes = [];\r\n    }\r\n\r\n    if (!Array.isArray(nodes)) {\r\n      console.error(\"[API] Invalid nodes data - not an array:\", typeof nodes);\r\n      // Cố gắng chuyển đổi thành mảng nếu có thể\r\n      try {\r\n        if (typeof nodes === \"object\" && nodes !== null) {\r\n          nodes = Object.values(nodes);\r\n          console.log(\"[API] Converted object to array, length:\", nodes.length);\r\n        } else {\r\n          nodes = [];\r\n        }\r\n      } catch (conversionError) {\r\n        console.error(\"[API] Conversion error:\", conversionError);\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    if (nodes.length === 0) {\r\n      console.warn(\"[API] Warning: Empty nodes array provided\");\r\n    }\r\n\r\n    // Transform to server format\r\n    const serverNodes = nodes.map((node) => {\r\n      // Ensure all required node properties exist\r\n      if (!node?.id) {\r\n        console.error(\"[UPDATE] Node missing id:\", node);\r\n        // Generate a unique ID instead of throwing error\r\n        node = {\r\n          ...node,\r\n          id: `node_${Date.now()}_${Math.random()\r\n            .toString(36)\r\n            .substring(2, 9)}`,\r\n        };\r\n      }\r\n\r\n      if (!node.position) {\r\n        console.warn(\r\n          `[UPDATE] Node ${node.id} missing position, using default`\r\n        );\r\n        node.position = { x: 0, y: 0 };\r\n      }\r\n\r\n      // Ensure node data is well-formed JSON\r\n      let nodeDataString;\r\n      if (typeof node.data === \"object\") {\r\n        nodeDataString = JSON.stringify(node.data);\r\n      } else if (typeof node.data === \"string\") {\r\n        // Validate that it's already valid JSON\r\n        try {\r\n          JSON.parse(node.data); // Just testing if this works\r\n          nodeDataString = node.data;\r\n        } catch (e) {\r\n          console.error(`[UPDATE] Invalid JSON data for node ${node.id}:`, e);\r\n          nodeDataString = JSON.stringify({ label: node.data || \"Unknown\" });\r\n        }\r\n      } else {\r\n        nodeDataString = JSON.stringify({ label: \"Unknown\" });\r\n      }\r\n\r\n      // Create properly formatted server node\r\n      const serverNode = {\r\n        nodeIdentifier: node.id,\r\n        positionX: node.position?.x || 0,\r\n        positionY: node.position?.y || 0,\r\n        data: nodeDataString,\r\n        courseId: node.data?.courseId || null,\r\n      };\r\n\r\n      console.log(`[UPDATE] Transformed node ${node.id} for server:`, {\r\n        nodeIdentifier: serverNode.nodeIdentifier,\r\n        positionX: serverNode.positionX,\r\n        positionY: serverNode.positionY,\r\n        dataLength: serverNode.data?.length,\r\n        dataPreview: serverNode.data?.substring(0, 50),\r\n        courseId: serverNode.courseId,\r\n      });\r\n\r\n      return serverNode;\r\n    });\r\n\r\n    console.log(`[API] Sending ${serverNodes.length} nodes to server`);\r\n\r\n    const response = await api.put(`/roadmaps/${id}/nodes`, {\r\n      nodes: serverNodes,\r\n    });\r\n\r\n    console.log(\r\n      `[API] Server response for nodes update:`,\r\n      response.status,\r\n      response.statusText\r\n    );\r\n    console.log(`[API] Response data:`, response.data);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`[API ERROR] Failed to update nodes:`, error);\r\n    if (error.response) {\r\n      console.error(`[API ERROR] Response status:`, error.response.status);\r\n      console.error(`[API ERROR] Response data:`, error.response.data);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get roadmap edges\r\nexport const getRoadmapEdges = async (id) => {\r\n  try {\r\n    console.log(`Fetching edges for roadmap ${id}`);\r\n    const response = await api.get(`/roadmaps/${id}/edges`);\r\n\r\n    // Transform server-side edge format to client-side format\r\n    const transformedEdges = response.data\r\n      .map((edge) => {\r\n        try {\r\n          // Parse the JSON style field\r\n          const edgeStyle = edge.style ? JSON.parse(edge.style) : {};\r\n\r\n          return {\r\n            id: edge.edgeIdentifier,\r\n            source: edge.source,\r\n            target: edge.target,\r\n            type: edge.type || \"smoothstep\",\r\n            animated: edge.animated || false,\r\n            style: {\r\n              stroke: edgeStyle.stroke || \"#6d28d9\",\r\n              strokeWidth: edgeStyle.strokeWidth || 1,\r\n            },\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error parsing edge data:\", error, edge);\r\n          return null;\r\n        }\r\n      })\r\n      .filter((edge) => edge !== null);\r\n\r\n    console.log(`Transformed ${transformedEdges.length} edges`);\r\n    return transformedEdges;\r\n  } catch (error) {\r\n    console.error(\"Error fetching roadmap edges:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update roadmap edges\r\nexport const updateRoadmapEdges = async (id, edges) => {\r\n  try {\r\n    console.log(`[API] Updating ${edges?.length || 0} edges for roadmap ${id}`);\r\n    console.log(`[API] Edges data type:`, typeof edges, Array.isArray(edges));\r\n\r\n    // Đảm bảo edges là mảng hợp lệ\r\n    if (!edges) {\r\n      console.error(\"[API] Edges is null or undefined\");\r\n      edges = [];\r\n    }\r\n\r\n    if (!Array.isArray(edges)) {\r\n      console.error(\"[API] Invalid edges data - not an array:\", typeof edges);\r\n      // Cố gắng chuyển đổi thành mảng nếu có thể\r\n      try {\r\n        if (typeof edges === \"object\" && edges !== null) {\r\n          edges = Object.values(edges);\r\n          console.log(\"[API] Converted object to array, length:\", edges.length);\r\n        } else {\r\n          edges = [];\r\n        }\r\n      } catch (conversionError) {\r\n        console.error(\"[API] Conversion error:\", conversionError);\r\n        edges = [];\r\n      }\r\n    }\r\n\r\n    if (edges.length === 0) {\r\n      console.warn(\"[API] Warning: Empty edges array provided\");\r\n    }\r\n\r\n    // Transform to server format\r\n    const serverEdges = edges\r\n      .map((edge) => {\r\n        // Validate required edge properties\r\n        if (!edge?.id || !edge?.source || !edge?.target) {\r\n          console.error(\"[UPDATE] Edge missing required properties:\", edge);\r\n          // Skip this edge instead of throwing an error\r\n          return null;\r\n        }\r\n\r\n        // Ensure style is well-formed JSON\r\n        let styleString;\r\n        if (typeof edge.style === \"object\" && edge.style !== null) {\r\n          try {\r\n            styleString = JSON.stringify(edge.style);\r\n          } catch (e) {\r\n            console.error(\r\n              `[UPDATE] Error stringifying style for edge ${edge.id}:`,\r\n              e\r\n            );\r\n            styleString = JSON.stringify({ stroke: \"#999\" });\r\n          }\r\n        } else if (typeof edge.style === \"string\") {\r\n          // Validate that it's already valid JSON\r\n          try {\r\n            JSON.parse(edge.style); // Just testing if this works\r\n            styleString = edge.style;\r\n          } catch (e) {\r\n            console.error(\r\n              `[UPDATE] Invalid JSON style for edge ${edge.id}:`,\r\n              e\r\n            );\r\n            styleString = JSON.stringify({ stroke: \"#999\" });\r\n          }\r\n        } else {\r\n          styleString = JSON.stringify({ stroke: \"#999\" });\r\n        }\r\n\r\n        // Create properly formatted server edge\r\n        const serverEdge = {\r\n          edgeIdentifier: edge.id,\r\n          source: edge.source,\r\n          target: edge.target,\r\n          type: edge.type || \"smoothstep\",\r\n          animated: edge.animated || false,\r\n          style: styleString,\r\n        };\r\n\r\n        console.log(`[UPDATE] Transformed edge ${edge.id} for server:`, {\r\n          edgeIdentifier: serverEdge.edgeIdentifier,\r\n          source: serverEdge.source,\r\n          target: serverEdge.target,\r\n          type: serverEdge.type,\r\n        });\r\n\r\n        return serverEdge;\r\n      })\r\n      .filter((edge) => edge !== null); // Lọc bỏ các edge null\r\n\r\n    console.log(`[API] Sending ${serverEdges.length} edges to server`);\r\n\r\n    const response = await api.put(`/roadmaps/${id}/edges`, {\r\n      edges: serverEdges,\r\n    });\r\n\r\n    console.log(\r\n      `[API] Server response for edges update:`,\r\n      response.status,\r\n      response.statusText\r\n    );\r\n    console.log(`[API] Response data:`, response.data);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`[API ERROR] Failed to update edges:`, error);\r\n    if (error.response) {\r\n      console.error(`[API ERROR] Response status:`, error.response.status);\r\n      console.error(`[API ERROR] Response data:`, error.response.data);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Toggle favorite roadmap\r\nexport const toggleFavoriteRoadmap = async (id) => {\r\n  const response = await api.post(`/roadmaps/${id}/favorite`);\r\n  return response.data;\r\n};\r\n\r\n// Get user favorites\r\nexport const getUserFavorites = async () => {\r\n  const response = await api.get(\"/roadmaps/favorites\");\r\n  return response.data;\r\n};\r\n\r\n// Link a course to a roadmap node\r\nexport const linkCourseToNode = async (roadmapId, nodeId, courseId) => {\r\n  try {\r\n    const response = await api.post(\r\n      `/roadmaps/${roadmapId}/nodes/${nodeId}/link-course`,\r\n      {\r\n        courseId: Number(courseId),\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error linking course to node:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}