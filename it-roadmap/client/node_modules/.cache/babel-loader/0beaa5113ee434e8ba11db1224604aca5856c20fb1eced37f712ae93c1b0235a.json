{"ast":null,"code":"\"use client\";import _objectSpread from\"D:/CyberPath/it-roadmap/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useCallback,useEffect,useRef}from\"react\";import ReactFlow,{MiniMap,Controls,Background,useNodesState,useEdgesState,addEdge,Panel,ReactFlowProvider,useReactFlow,MarkerType,Connection}from\"reactflow\";import\"reactflow/dist/style.css\";import{Tabs,TabsList,TabsTrigger}from\"./ui/tabs\";import{Button}from\"./ui/button\";import{useToast}from\"./ui/use-toast\";import{PlusCircle,Save,Trash,Plus,X,Link as LinkIcon,LinkOff,Palette}from\"lucide-react\";import CourseNode from\"./CourseNode\";import CourseInfoPanel from\"./CourseInfoPanel\";import AddCourseDialog from\"./AddCourseDialog\";import RoadmapEditorPanel from\"./RoadmapEditorPanel\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const nodeTypes={courseNode:CourseNode};function RoadmapViewInner(_ref){let{id,initialNodes=[],initialEdges=[],isEditing=false,readOnly=false,onSave,onInternalUpdate}=_ref;const{toast}=useToast();const[nodes,setNodes,onNodesChange]=useNodesState(initialNodes);const[edges,setEdges,onEdgesChange]=useEdgesState(initialEdges);const[selectedNode,setSelectedNode]=useState(null);const[selectedCategory,setSelectedCategory]=useState(\"all\");const[isAddCourseOpen,setIsAddCourseOpen]=useState(false);const[editMode,setEditMode]=useState(\"select\");// select, connect, add, delete\nconst[connectionType,setConnectionType]=useState(\"arrow\");// arrow, none\nconst[showEditorPanel,setShowEditorPanel]=useState(true);const reactFlowWrapper=useRef(null);const reactFlowInstance=useReactFlow();const[undoStack,setUndoStack]=useState([]);const[redoStack,setRedoStack]=useState([]);const isInitialMount=useRef(true);// Keep track of manually added nodes to prevent them from being lost\nconst addedNodesRef=useRef([]);// Define handleCompleteToggle before it's used\nconst handleCompleteToggle=useCallback((nodeId,completed)=>{var _nodes$find;if(readOnly)return;// Get the current timestamp\nconst completedAt=completed?new Date().toISOString():null;setNodes(nds=>nds.map(node=>{if(node.id===nodeId){return _objectSpread(_objectSpread({},node),{},{data:_objectSpread(_objectSpread({},node.data),{},{completed,completedAt})});}return node;}));toast({title:completed?\"Course marked as completed\":\"Course marked as incomplete\",description:\"You've \".concat(completed?\"completed\":\"unmarked\",\" \").concat((_nodes$find=nodes.find(n=>n.id===nodeId))===null||_nodes$find===void 0?void 0:_nodes$find.data.label)});},[nodes,setNodes,toast,readOnly]);// Set initial nodes and edges when they change\nuseEffect(()=>{// Skip effect if no initial data\nif(!(initialNodes!==null&&initialNodes!==void 0&&initialNodes.length)&&!(initialEdges!==null&&initialEdges!==void 0&&initialEdges.length)){return;}// Only run once during initial mount to avoid re-render cycles\nif(isInitialMount.current){console.log(\"[FLOW] Initial setup with nodes:\",initialNodes===null||initialNodes===void 0?void 0:initialNodes.length);if((initialNodes===null||initialNodes===void 0?void 0:initialNodes.length)>0){// Process nodes once with required properties for display\nconst processedNodes=initialNodes.map(node=>{var _node$data;return _objectSpread(_objectSpread({},node),{},{type:\"courseNode\",position:node.position||{x:Math.random()*500,y:Math.random()*300},data:_objectSpread(_objectSpread({},node.data),{},{showQuickToggle:true,onQuickToggle:handleCompleteToggle,label:((_node$data=node.data)===null||_node$data===void 0?void 0:_node$data.label)||\"Untitled Node\"})});});// Initialize with the processed nodes\nsetNodes(processedNodes);// Store initial nodes in our ref for tracking\naddedNodesRef.current=[...processedNodes];}// Process edges only after nodes are set\nif((initialEdges===null||initialEdges===void 0?void 0:initialEdges.length)>0){console.log(\"[FLOW] Setting initial edges:\",initialEdges.length);// Create a map of node IDs for quick lookup\nconst nodeMap=new Map(initialNodes.map(node=>[node.id,node]));// Validate edges against existing nodes to ensure they connect to valid nodes\nconst validEdges=initialEdges.filter(edge=>{// Check that both source and target nodes exist\nconst sourceExists=nodeMap.has(edge.source);const targetExists=nodeMap.has(edge.target);if(!sourceExists||!targetExists){console.warn(\"[FLOW] Skipping invalid edge: Source exists: \".concat(sourceExists,\", Target exists: \").concat(targetExists),edge);return false;}return true;});// Log the handle positions found in the data\nconsole.log(\"[FLOW] Edge handle data:\",validEdges.map(edge=>{var _edge$data,_edge$data2;return{id:edge.id,sourceHandle:edge.sourceHandle||((_edge$data=edge.data)===null||_edge$data===void 0?void 0:_edge$data.sourceHandle),targetHandle:edge.targetHandle||((_edge$data2=edge.data)===null||_edge$data2===void 0?void 0:_edge$data2.targetHandle)};}));// Process edges with additional data\nconst processedEdges=validEdges.map(edge=>{var _edge$data3,_edge$data4,_edge$data5,_edge$data6;// Extract handle information from wherever it might be stored\nconst sourceHandle=edge.sourceHandle||((_edge$data3=edge.data)===null||_edge$data3===void 0?void 0:_edge$data3.sourceHandle)||null;const targetHandle=edge.targetHandle||((_edge$data4=edge.data)===null||_edge$data4===void 0?void 0:_edge$data4.targetHandle)||null;// Generate a consistent ID based on all connection points\nconst edgeId=edge.id||\"edge-\".concat(edge.source,\"-\").concat(sourceHandle||\"default\",\"-\").concat(edge.target,\"-\").concat(targetHandle||\"default\");return _objectSpread(_objectSpread({},edge),{},{// Ensure edge has required properties\nid:edgeId,type:edge.type||\"smoothstep\",animated:edge.animated!==undefined?edge.animated:true,style:edge.style||{stroke:\"#6d28d9\"},// Ensure handle positions are preserved\nsourceHandle:sourceHandle,targetHandle:targetHandle,// Add class names for CSS targeting\nclassName:\"custom-edge source-\".concat(sourceHandle||\"default\",\" target-\").concat(targetHandle||\"default\"),// Store explicit connection information in data\ndata:_objectSpread(_objectSpread({},edge.data||{}),{},{sourceId:edge.source,targetId:edge.target,// Store handle positions in data for redundancy\nsourceHandle:sourceHandle,targetHandle:targetHandle,// Store handle types for better visualization\nsourceHandleType:sourceHandle||\"default\",targetHandleType:targetHandle||\"default\",connectionType:((_edge$data5=edge.data)===null||_edge$data5===void 0?void 0:_edge$data5.connectionType)||\"arrow\"})},!edge.markerEnd&&((_edge$data6=edge.data)===null||_edge$data6===void 0?void 0:_edge$data6.connectionType)!==\"none\"&&{markerEnd:{type:MarkerType.ArrowClosed,width:20,height:20,color:\"#6d28d9\"}});});console.log(\"[FLOW] Processed edges:\",processedEdges.length);setEdges(processedEdges);}// Mark as initialized to prevent future re-processing\nisInitialMount.current=false;}},[initialNodes,initialEdges,setNodes,setEdges,handleCompleteToggle]);// Update parent component with internal changes - optimized for fewer updates\nuseEffect(()=>{// Skip during initial render or if no update function provided\nif(isInitialMount.current||!onInternalUpdate)return;// Use a debounce to avoid too frequent updates\nconst timer=setTimeout(()=>{console.log(\"[FLOW] Debounced parent update: \".concat(nodes.length,\" nodes\"));onInternalUpdate(nodes,edges);},500);return()=>clearTimeout(timer);},[nodes,edges,onInternalUpdate]);// Simplify the node preservation effect\nuseEffect(()=>{if(addedNodesRef.current.length>0&&nodes.length===0){// Only restore if we've lost ALL nodes (prevents loops)\nconsole.log(\"[FLOW] Lost all nodes, restoring from ref\");setNodes(addedNodesRef.current);}},[nodes.length,setNodes]);// Save current state for undo feature\nconst saveCurrentState=useCallback(()=>{setUndoStack(prev=>[...prev,{nodes:[...nodes],edges:[...edges]}]);setRedoStack([]);},[nodes,edges]);const onConnect=useCallback(params=>{saveCurrentState();// Generate a more stable ID using source, target and handle positions\n// This ensures each unique connection point combination has its own ID\nconst edgeId=\"edge-\".concat(params.source,\"-\").concat(params.sourceHandle||\"default\",\"-\").concat(params.target,\"-\").concat(params.targetHandle||\"default\");// Log detail about the connection being made\nconsole.log(\"[FLOW] Creating connection:\",{source:params.source,sourceHandle:params.sourceHandle,target:params.target,targetHandle:params.targetHandle,edgeId:edgeId});// Add marker and apply current edge style settings\nconst newEdge=_objectSpread(_objectSpread(_objectSpread({},params),{},{id:edgeId,type:\"smoothstep\",animated:true,style:{stroke:\"#6d28d9\"},// Store handle positions explicitly\nsourceHandle:params.sourceHandle,targetHandle:params.targetHandle,// Add data attributes directly to the edge DOM element\nclassName:\"custom-edge source-\".concat(params.sourceHandle||\"default\",\" target-\").concat(params.targetHandle||\"default\")},connectionType===\"arrow\"&&{markerEnd:{type:MarkerType.ArrowClosed,width:20,height:20,color:\"#6d28d9\"}}),{},{data:{connectionType,// Store source and target information explicitly\nsourceId:params.source,targetId:params.target,// Store handle positions in data as well for redundancy\nsourceHandle:params.sourceHandle,targetHandle:params.targetHandle,// Store handle types for better visualization\nsourceHandleType:params.sourceHandle||\"default\",targetHandleType:params.targetHandle||\"default\"}});setEdges(eds=>{// Check if this exact connection already exists (same nodes and same handles)\nconst existingEdgeIndex=eds.findIndex(e=>e.source===params.source&&e.target===params.target&&e.sourceHandle===params.sourceHandle&&e.targetHandle===params.targetHandle);// If connection exists, update it rather than adding a new one\nif(existingEdgeIndex>=0){const updatedEdges=[...eds];updatedEdges[existingEdgeIndex]=newEdge;console.log(\"[FLOW] Updated existing edge:\",newEdge);return updatedEdges;}else{const newEdges=addEdge(newEdge,eds);console.log(\"[FLOW] Edge added:\",newEdge);console.log(\"[FLOW] Current edges count:\",newEdges.length);return newEdges;}});toast({title:\"Connection added\",description:\"A new connection has been created between nodes\"});},[setEdges,saveCurrentState,toast,connectionType]);const onNodeClick=useCallback((event,node)=>{event.stopPropagation();if(editMode===\"delete\"){// Delete mode: remove the node\nsaveCurrentState();setNodes(nodes.filter(n=>n.id!==node.id));// Also remove any connected edges\nsetEdges(edges.filter(e=>e.source!==node.id&&e.target!==node.id));toast({title:\"Node deleted\",description:\"\".concat(node.data.label,\" has been removed from the roadmap\")});}else if(editMode===\"connect\"&&selectedNode){// Connect mode: create an edge between selectedNode and this node\nif(selectedNode.id!==node.id){const newEdge=_objectSpread(_objectSpread({id:\"edge-\".concat(Date.now()),source:selectedNode.id,target:node.id,type:\"smoothstep\",animated:true,style:{stroke:\"#6d28d9\"}},connectionType===\"arrow\"&&{markerEnd:{type:MarkerType.ArrowClosed,width:20,height:20,color:\"#6d28d9\"}}),{},{data:{connectionType}});saveCurrentState();setEdges(eds=>[...eds,newEdge]);setSelectedNode(null);setEditMode(\"select\");toast({title:\"Connection created\",description:\"Connected \".concat(selectedNode.data.label,\" to \").concat(node.data.label)});}}else if(editMode===\"select\"){// Regular select mode: show node details\nsetSelectedNode(node);}},[editMode,selectedNode,nodes,edges,setNodes,setEdges,saveCurrentState,toast]);const onPaneClick=useCallback(()=>{// In regular mode, clicking the pane should deselect the node\nsetSelectedNode(null);// If in connect mode but no node selected, return to select mode\nif(editMode===\"connect\"&&selectedNode){setEditMode(\"select\");setSelectedNode(null);toast({title:\"Connection cancelled\",description:\"Node connection has been cancelled\"});}},[editMode,selectedNode,toast]);const handleSaveRoadmap=useCallback(()=>{if(onSave){console.log(\"[VIEW] Starting roadmap save process\");console.log(\"[VIEW] Current nodes:\",nodes.length);console.log(\"[VIEW] Current edges:\",edges.length);// Ensure no node is missing important data\nconst cleanedNodes=nodes.map(node=>{var _node$data2;if(!node.id){console.error(\"[VIEW] Node missing ID:\",node);// Generate a unique ID if missing\nnode.id=\"node_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substring(2,9));}if(!node.position){console.error(\"[VIEW] Node missing position:\",node);// Default position\nnode.position={x:0,y:0};}if(!node.data){console.error(\"[VIEW] Node missing data:\",node);// Default minimal data\nnode.data={label:\"Node \"+node.id};}// Ensure the node has all required information\nreturn _objectSpread(_objectSpread({},node),{},{type:node.type||\"courseNode\",// Default node type\ndata:_objectSpread(_objectSpread({},node.data||{}),{},{id:node.id,// Ensure ID in data matches node ID\nlabel:((_node$data2=node.data)===null||_node$data2===void 0?void 0:_node$data2.label)||\"Untitled\"// At least have a label\n})});});// Create a map of node IDs for quick lookup\nconst nodeIdMap=new Set(cleanedNodes.map(node=>node.id));// Enhance with log details to help diagnose issues\nconsole.log(\"[VIEW] Edge handle positions before cleaning:\",edges.map(edge=>{var _edge$data7,_edge$data8;return{id:edge.id,source:edge.source,target:edge.target,sourceHandle:edge.sourceHandle||((_edge$data7=edge.data)===null||_edge$data7===void 0?void 0:_edge$data7.sourceHandle),targetHandle:edge.targetHandle||((_edge$data8=edge.data)===null||_edge$data8===void 0?void 0:_edge$data8.targetHandle)};}));// Ensure edges have all necessary information\nconst cleanedEdges=edges.map(edge=>{var _edge$data9,_edge$data0,_edge$data1,_edge$data10;if(!edge.source||!edge.target){console.error(\"[VIEW] Edge missing source or target:\",edge);return null;// Skip invalid edges\n}// Make sure source and target nodes still exist\nconst sourceExists=nodeIdMap.has(edge.source);const targetExists=nodeIdMap.has(edge.target);if(!sourceExists||!targetExists){console.error(\"[VIEW] Edge has invalid connections. Source exists: \".concat(sourceExists,\", Target exists: \").concat(targetExists));return null;// Skip edges with missing endpoints\n}// Extract handle information from wherever it might be stored\nconst sourceHandle=edge.sourceHandle||((_edge$data9=edge.data)===null||_edge$data9===void 0?void 0:_edge$data9.sourceHandle)||null;const targetHandle=edge.targetHandle||((_edge$data0=edge.data)===null||_edge$data0===void 0?void 0:_edge$data0.targetHandle)||null;// Generate a consistent ID based on all connection points\nconst edgeId=\"edge-\".concat(edge.source,\"-\").concat(sourceHandle||\"default\",\"-\").concat(edge.target,\"-\").concat(targetHandle||\"default\");// Ensure we have complete edge data\nreturn _objectSpread(_objectSpread({},edge),{},{id:edgeId,type:edge.type||\"smoothstep\",// Default edge type\n// Preserve handle positions explicitly\nsourceHandle:sourceHandle,targetHandle:targetHandle,// Add class names for CSS targeting\nclassName:\"custom-edge source-\".concat(sourceHandle||\"default\",\" target-\").concat(targetHandle||\"default\"),// Store explicit source and target information\ndata:_objectSpread(_objectSpread({},edge.data||{}),{},{sourceId:edge.source,targetId:edge.target,// Store handle positions in data for redundancy\nsourceHandle:sourceHandle,targetHandle:targetHandle,// Store handle types for better visualization\nsourceHandleType:sourceHandle||\"default\",targetHandleType:targetHandle||\"default\",connectionType:((_edge$data1=edge.data)===null||_edge$data1===void 0?void 0:_edge$data1.connectionType)||\"arrow\"})},!edge.markerEnd&&((_edge$data10=edge.data)===null||_edge$data10===void 0?void 0:_edge$data10.connectionType)!==\"none\"&&{markerEnd:{type:MarkerType.ArrowClosed,width:20,height:20,color:\"#6d28d9\"}});}).filter(Boolean);// Filter out null edges\nconsole.log(\"[VIEW] Edge handle positions after cleaning:\",cleanedEdges.map(edge=>({id:edge.id,source:edge.source,target:edge.target,sourceHandle:edge.sourceHandle,targetHandle:edge.targetHandle})));console.log(\"[VIEW] Cleaned nodes for saving:\",cleanedNodes.length);console.log(\"[VIEW] Node data sample:\",cleanedNodes[0]);console.log(\"[VIEW] Cleaned edges for saving:\",cleanedEdges.length);if(cleanedEdges.length>0){console.log(\"[VIEW] Edge data sample:\",cleanedEdges[0]);}// Notify the user\ntoast({title:\"Saving roadmap...\",description:\"Saving \".concat(cleanedNodes.length,\" nodes and \").concat(cleanedEdges.length,\" edges\")});// Save data to local state\nsetNodes(cleanedNodes);setEdges(cleanedEdges);// Call the onSave callback to save the data\nconsole.log(\"[VIEW] Calling onSave with cleaned data\");onSave(cleanedNodes,cleanedEdges);}else{console.warn(\"[VIEW] Save handler not provided. Cannot save roadmap.\");toast({title:\"Cannot save roadmap\",description:\"Save handler not configured\",variant:\"destructive\"});}},[nodes,edges,onSave,toast,setNodes,setEdges]);const handleAddCourse=useCallback(courseData=>{saveCurrentState();// Generate a unique node ID with timestamp for guaranteed uniqueness\nconst newNodeId=\"node-\".concat(Date.now(),\"-\").concat(Math.floor(Math.random()*1000000));// Simple positioning math to ensure nodes don't overlap\nconst nodeOffsets=[{x:0,y:0},{x:250,y:0},{x:0,y:150},{x:250,y:150},{x:-250,y:0},{x:-250,y:150}];// Base position starts at center if possible\nlet baseX=0,baseY=0;if(reactFlowInstance){const viewport=reactFlowInstance.getViewport();const screenCenter=reactFlowInstance.screenToFlowPosition({x:window.innerWidth/2,y:window.innerHeight/2});baseX=screenCenter.x;baseY=screenCenter.y;}// Choose offset based on node count (cycle through positions)\nconst offset=nodeOffsets[nodes.length%nodeOffsets.length];// Final position\nconst position={x:baseX+offset.x,y:baseY+offset.y};console.log(\"[FLOW] Creating new node at position: x=\".concat(position.x,\", y=\").concat(position.y));// Create the node with all required data\nconst newNode={id:newNodeId,type:\"courseNode\",position,data:_objectSpread(_objectSpread({},courseData),{},{id:newNodeId,completed:false,completedAt:null,showQuickToggle:true,onQuickToggle:handleCompleteToggle})};// Add node directly to state and tracking ref\nsetNodes(currentNodes=>[...currentNodes,newNode]);addedNodesRef.current=[...addedNodesRef.current,newNode];// Close dialog and show confirmation\nsetIsAddCourseOpen(false);toast({title:\"Course added\",description:\"\".concat(courseData.label,\" has been added to the roadmap\")});// Ensure newly added node is visible\nsetTimeout(()=>{if(reactFlowInstance){reactFlowInstance.fitView({padding:0.5,includeHiddenNodes:false,minZoom:0.5,maxZoom:1.5});}},100);},[setNodes,toast,reactFlowInstance,nodes.length,handleCompleteToggle,saveCurrentState]);// Ensure manually added nodes are preserved during state updates\nuseEffect(()=>{if(addedNodesRef.current.length>0&&nodes.length>0){// Get IDs of current nodes\nconst currentIds=new Set(nodes.map(n=>n.id));// Find manually added nodes that are missing from current nodes\nconst missingNodes=addedNodesRef.current.filter(n=>!currentIds.has(n.id));// If any manually added nodes are missing, add them back\nif(missingNodes.length>0){console.log(\"[FLOW] Restoring \".concat(missingNodes.length,\" manually added nodes that were lost\"));setNodes(currentNodes=>[...currentNodes,...missingNodes]);}}},[nodes,setNodes]);const handleDeleteNode=useCallback(nodeId=>{saveCurrentState();// Remove the node from state\nsetNodes(nds=>nds.filter(node=>node.id!==nodeId));// Remove the node from our tracking ref\naddedNodesRef.current=addedNodesRef.current.filter(node=>node.id!==nodeId);// Remove connected edges\nsetEdges(eds=>eds.filter(edge=>edge.source!==nodeId&&edge.target!==nodeId));// Clear selection\nsetSelectedNode(null);toast({title:\"Node deleted\",description:\"The node has been removed from the roadmap\"});// Update view after deletion\nsetTimeout(()=>{if(reactFlowInstance){reactFlowInstance.fitView({padding:0.5});}},100);},[setNodes,setEdges,toast,saveCurrentState,reactFlowInstance]);const handleUpdateNodeStyle=useCallback((nodeId,style)=>{setNodes(nds=>nds.map(node=>{if(node.id===nodeId){return _objectSpread(_objectSpread({},node),{},{data:_objectSpread(_objectSpread({},node.data),style)});}return node;}));},[setNodes]);const onEdgeClick=useCallback((event,edge)=>{if(editMode===\"delete\"){saveCurrentState();// Delete the edge\nsetEdges(eds=>eds.filter(e=>e.id!==edge.id));toast({title:\"Connection removed\",description:\"The connection between nodes has been removed\"});}},[setEdges,editMode,saveCurrentState,toast]);const handleUndo=useCallback(()=>{if(undoStack.length===0)return;const currentState={nodes:[...nodes],edges:[...edges]};const previousState=undoStack[undoStack.length-1];setRedoStack(prev=>[...prev,currentState]);setUndoStack(prev=>prev.slice(0,-1));setNodes(previousState.nodes);setEdges(previousState.edges);toast({title:\"Undo\",description:\"Previous action undone\"});},[undoStack,redoStack,nodes,edges,setNodes,setEdges,toast]);const handleRedo=useCallback(()=>{if(redoStack.length===0)return;const currentState={nodes:[...nodes],edges:[...edges]};const nextState=redoStack[redoStack.length-1];setUndoStack(prev=>[...prev,currentState]);setRedoStack(prev=>prev.slice(0,-1));setNodes(nextState.nodes);setEdges(nextState.edges);toast({title:\"Redo\",description:\"Action redone\"});},[undoStack,redoStack,nodes,edges,setNodes,setEdges,toast]);// Update node positions when they are dragged\nconst onNodeDragStop=useCallback(()=>{if(isEditing){saveCurrentState();}},[isEditing,saveCurrentState]);// Handle category filtering\nconst filteredNodes=useCallback(()=>{if(selectedCategory===\"all\"){return nodes;}return nodes.filter(node=>{var _node$data$category;return((_node$data$category=node.data.category)===null||_node$data$category===void 0?void 0:_node$data$category.toLowerCase())===selectedCategory.toLowerCase();});},[nodes,selectedCategory]);const handleStyleChange=useCallback(styles=>{// Apply styles to selected node or default edge options\nif(selectedNode){handleUpdateNodeStyle(selectedNode.id,styles.nodeStyle);}// Update default edge options\n// (would be implemented in a full version)\n},[selectedNode,handleUpdateNodeStyle]);const handleConnectionTypeChange=useCallback(type=>{setConnectionType(type);},[]);// Ngăn chặn cảnh báo ResizeObserver\nuseEffect(()=>{// Chỉ áp dụng trong môi trường phát triển\nif(process.env.NODE_ENV!==\"production\"){// Instead of suppressing errors, let's implement a proper fix\nlet resizeObserverLoopErrCount=0;const debouncedResizeObserverCallback=debounce(()=>{resizeObserverLoopErrCount=0;},200);const originalError=console.error;console.error=function(){var _args$,_args$$includes,_args$2,_args$2$message,_args$2$message$inclu;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if((_args$=args[0])!==null&&_args$!==void 0&&(_args$$includes=_args$.includes)!==null&&_args$$includes!==void 0&&_args$$includes.call(_args$,\"ResizeObserver loop\")||(_args$2=args[0])!==null&&_args$2!==void 0&&(_args$2$message=_args$2.message)!==null&&_args$2$message!==void 0&&(_args$2$message$inclu=_args$2$message.includes)!==null&&_args$2$message$inclu!==void 0&&_args$2$message$inclu.call(_args$2$message,\"ResizeObserver loop\")){// Increment counter and invoke debounced callback\nresizeObserverLoopErrCount+=1;if(resizeObserverLoopErrCount<=1){debouncedResizeObserverCallback();}// Suppress the error\nreturn;}originalError.apply(console,args);};return()=>{console.error=originalError;};}// Helper function for debounce\nfunction debounce(fn,delay){let timeoutId;return function(){clearTimeout(timeoutId);timeoutId=setTimeout(()=>fn.apply(this,arguments),delay);};}},[]);// Optimize edge rendering and enhance edge interaction\nuseEffect(()=>{// Configure ReactFlow for improved edge connection\nconst reactFlowEl=document.querySelector(\".react-flow\");if(reactFlowEl){// Add custom class for better edge interaction\nreactFlowEl.classList.add(\"improved-edge-connection\");}return()=>{if(reactFlowEl){reactFlowEl.classList.remove(\"improved-edge-connection\");}};},[]);// Ensure nodes are visible in the viewport\nuseEffect(()=>{if(!isInitialMount.current&&nodes.length>0&&reactFlowInstance){// Wait for rendering to complete, then fit view\nconst timeoutId=setTimeout(()=>{console.log(\"[FLOW] Fitting view to ensure nodes are visible\");reactFlowInstance.fitView({padding:0.5,includeHiddenNodes:true,minZoom:0.5,maxZoom:1.5});},500);return()=>clearTimeout(timeoutId);}},[nodes.length,reactFlowInstance]);// Add a debug useEffect to log whenever nodes change\nuseEffect(()=>{if(nodes.length>0){console.log(\"[FLOW] Nodes changed, current count:\",nodes.length);}},[nodes]);// Cleanup on unmount to prevent memory leaks\nuseEffect(()=>{return()=>{// Clear any timeouts that might be pending\nconst viewportEl=document.querySelector(\".react-flow__viewport\");if(viewportEl){viewportEl.style.transitionProperty=\"\";viewportEl.style.transitionDuration=\"\";}console.log(\"[FLOW] Component unmounting, performing cleanup\");};},[]);// Add special effect to prevent excessive console logging during development\nuseEffect(()=>{if(process.env.NODE_ENV===\"development\"){const originalConsoleLog=console.log;const flowLogPattern=/^\\[FLOW\\]/;// Filter out excessive flow logs in development\nconsole.log=function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}if(typeof args[0]===\"string\"&&flowLogPattern.test(args[0])){// Only log important flow messages or when explicitly debugging\nif(args[0].includes(\"error\")||args[0].includes(\"Creating\")||args[0].includes(\"deleted\")){originalConsoleLog.apply(console,args);}}else{originalConsoleLog.apply(console,args);}};return()=>{console.log=originalConsoleLog;};}},[]);return/*#__PURE__*/_jsxs(\"div\",{ref:reactFlowWrapper,className:\"h-full w-full\",children:[isEditing&&showEditorPanel&&/*#__PURE__*/_jsx(Panel,{position:\"right\",className:\"w-72 mr-2\",children:/*#__PURE__*/_jsx(RoadmapEditorPanel,{onStyleChange:handleStyleChange,onConnectionTypeChange:handleConnectionTypeChange,activeEdgeStyle:connectionType,editMode:editMode,onEditModeChange:mode=>{setEditMode(mode);if(mode===\"connect\"){toast({title:\"Connect mode\",description:\"Click on a source node, then click on a target node to create a connection\"});}else if(mode===\"delete\"){toast({title:\"Delete mode\",description:\"Click on a node or connection to delete it\"});}},onAddNodeClick:()=>setIsAddCourseOpen(true)})}),isEditing&&/*#__PURE__*/_jsx(Panel,{position:\"top-right\",className:\"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-2 justify-end\",children:[/*#__PURE__*/_jsx(Button,{size:\"sm\",className:\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",onClick:handleUndo,disabled:undoStack.length===0,children:\"Undo\"}),/*#__PURE__*/_jsx(Button,{size:\"sm\",className:\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",onClick:handleRedo,disabled:redoStack.length===0,children:\"Redo\"}),/*#__PURE__*/_jsxs(Button,{className:\"bg-purple-600 hover:bg-purple-700 text-white\",size:\"sm\",onClick:handleSaveRoadmap,children:[/*#__PURE__*/_jsx(Save,{className:\"h-4 w-4 mr-1\"}),\" Save\"]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"h-full\",children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:filteredNodes(),edges:edges,onNodesChange:isEditing?onNodesChange:undefined,onEdgesChange:isEditing?onEdgesChange:undefined,onConnect:isEditing?onConnect:undefined,onNodeClick:onNodeClick,onEdgeClick:onEdgeClick,onPaneClick:onPaneClick,nodeTypes:nodeTypes,onNodeDragStop:onNodeDragStop,nodesDraggable:isEditing,nodesConnectable:isEditing&&editMode===\"connect\",elementsSelectable:!readOnly,defaultEdgeOptions:_objectSpread(_objectSpread({type:\"smoothstep\",style:{stroke:\"#6d28d9\"},animated:true},connectionType===\"arrow\"&&{markerEnd:{type:MarkerType.ArrowClosed,width:20,height:20,color:\"#6d28d9\"}}),{},{data:{connectionType}}),fitView:true,fitViewOptions:{padding:0.5,includeHiddenNodes:true,minZoom:0.5,maxZoom:1.5},minZoom:0.2,maxZoom:4,snapToGrid:true,snapGrid:[10,10],nodeExtent:[[-2000,-2000],[2000,2000]],proOptions:{hideAttribution:true},disableKeyboardA11y:true,autoPanOnNodeDrag:false,elevateEdgesOnSelect:false,onInit:instance=>{// Use setTimeout to ensure proper initialization\nsetTimeout(()=>{if(nodes.length>0){instance.fitView({padding:0.5});console.log(\"[FLOW] Flow initialized with nodes:\",nodes.length);}},300);}// Add custom edge rendering to set data attributes based on handle positions\n,edgeUpdaterRadius:10,edgesUpdatable:true,edgesFocusable:true,onEdgeUpdate:(oldEdge,newConnection)=>{setEdges(els=>els.map(edge=>{if(edge.id===oldEdge.id){// Generate new ID based on new connection points\nconst newId=\"edge-\".concat(newConnection.source,\"-\").concat(newConnection.sourceHandle||\"default\",\"-\").concat(newConnection.target,\"-\").concat(newConnection.targetHandle||\"default\");return _objectSpread(_objectSpread({},edge),{},{id:newId,source:newConnection.source,target:newConnection.target,sourceHandle:newConnection.sourceHandle,targetHandle:newConnection.targetHandle,data:_objectSpread(_objectSpread({},edge.data),{},{sourceId:newConnection.source,targetId:newConnection.target,sourceHandle:newConnection.sourceHandle,targetHandle:newConnection.targetHandle,sourceHandleType:newConnection.sourceHandle||\"default\",targetHandleType:newConnection.targetHandle||\"default\"})});}return edge;}));return true;},children:[/*#__PURE__*/_jsx(Controls,{}),/*#__PURE__*/_jsx(MiniMap,{nodeStrokeWidth:3,zoomable:true,pannable:true}),/*#__PURE__*/_jsx(Background,{variant:\"dots\",gap:12,size:1,color:\"#6d28d9\"}),edges.map(edge=>/*#__PURE__*/_jsx(\"div\",{style:{display:\"none\"},children:/*#__PURE__*/_jsx(\"div\",{\"data-edgeid\":edge.id,\"data-sourcehandle\":edge.sourceHandle||\"default\",\"data-targethandle\":edge.targetHandle||\"default\"})},\"handle-\".concat(edge.id)))]},\"flow-\".concat(id,\"-\").concat(nodes.length))}),selectedNode&&/*#__PURE__*/_jsx(CourseInfoPanel,{node:selectedNode,onClose:()=>setSelectedNode(null),onCompleteToggle:handleCompleteToggle,onDelete:isEditing?handleDeleteNode:undefined,onUpdateStyle:handleUpdateNodeStyle,isAdmin:isEditing,readOnly:readOnly}),isAddCourseOpen&&/*#__PURE__*/_jsx(AddCourseDialog,{open:isAddCourseOpen,onClose:()=>setIsAddCourseOpen(false),onAdd:handleAddCourse})]});}export default function RoadmapView(props){var _props$initialNodes,_props$initialEdges;console.log(\"[FLOW] RoadmapView wrapper rendering with props:\",{id:props.id,nodesCount:(_props$initialNodes=props.initialNodes)===null||_props$initialNodes===void 0?void 0:_props$initialNodes.length,edgesCount:(_props$initialEdges=props.initialEdges)===null||_props$initialEdges===void 0?void 0:_props$initialEdges.length});return/*#__PURE__*/_jsx(ReactFlowProvider,{children:/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full\",children:/*#__PURE__*/_jsx(RoadmapViewInner,_objectSpread({},props))})});}","map":{"version":3,"names":["_objectSpread","useState","useCallback","useEffect","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","Palette","CourseNode","CourseInfoPanel","AddCourseDialog","RoadmapEditorPanel","jsx","_jsx","jsxs","_jsxs","nodeTypes","courseNode","RoadmapViewInner","_ref","id","initialNodes","initialEdges","isEditing","readOnly","onSave","onInternalUpdate","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","connectionType","setConnectionType","showEditorPanel","setShowEditorPanel","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","isInitialMount","addedNodesRef","handleCompleteToggle","nodeId","completed","_nodes$find","completedAt","Date","toISOString","nds","map","node","data","title","description","concat","find","n","label","length","current","console","log","processedNodes","_node$data","type","position","x","Math","random","y","showQuickToggle","onQuickToggle","nodeMap","Map","validEdges","filter","edge","sourceExists","has","source","targetExists","target","warn","_edge$data","_edge$data2","sourceHandle","targetHandle","processedEdges","_edge$data3","_edge$data4","_edge$data5","_edge$data6","edgeId","animated","undefined","style","stroke","className","sourceId","targetId","sourceHandleType","targetHandleType","markerEnd","ArrowClosed","width","height","color","timer","setTimeout","clearTimeout","saveCurrentState","prev","onConnect","params","newEdge","eds","existingEdgeIndex","findIndex","e","updatedEdges","newEdges","onNodeClick","event","stopPropagation","now","onPaneClick","handleSaveRoadmap","cleanedNodes","_node$data2","error","toString","substring","nodeIdMap","Set","_edge$data7","_edge$data8","cleanedEdges","_edge$data9","_edge$data0","_edge$data1","_edge$data10","Boolean","variant","handleAddCourse","courseData","newNodeId","floor","nodeOffsets","baseX","baseY","viewport","getViewport","screenCenter","screenToFlowPosition","window","innerWidth","innerHeight","offset","newNode","currentNodes","fitView","padding","includeHiddenNodes","minZoom","maxZoom","currentIds","missingNodes","handleDeleteNode","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","handleStyleChange","styles","nodeStyle","handleConnectionTypeChange","process","env","NODE_ENV","resizeObserverLoopErrCount","debouncedResizeObserverCallback","debounce","originalError","_args$","_args$$includes","_args$2","_args$2$message","_args$2$message$inclu","_len","arguments","args","Array","_key","includes","call","message","apply","fn","delay","timeoutId","reactFlowEl","document","querySelector","classList","add","remove","viewportEl","transitionProperty","transitionDuration","originalConsoleLog","flowLogPattern","_len2","_key2","test","ref","children","onStyleChange","onConnectionTypeChange","activeEdgeStyle","onEditModeChange","mode","onAddNodeClick","size","onClick","disabled","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitViewOptions","snapToGrid","snapGrid","nodeExtent","proOptions","hideAttribution","disableKeyboardA11y","autoPanOnNodeDrag","elevateEdgesOnSelect","onInit","instance","edgeUpdaterRadius","edgesUpdatable","edgesFocusable","onEdgeUpdate","oldEdge","newConnection","els","newId","nodeStrokeWidth","zoomable","pannable","gap","display","onClose","onCompleteToggle","onDelete","onUpdateStyle","isAdmin","open","onAdd","RoadmapView","props","_props$initialNodes","_props$initialEdges","nodesCount","edgesCount"],"sources":["D:/CyberPath/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Panel,\n  ReactFlowProvider,\n  useReactFlow,\n  MarkerType,\n  Connection,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport {\n  PlusCircle,\n  Save,\n  Trash,\n  Plus,\n  X,\n  Link as LinkIcon,\n  LinkOff,\n  Palette,\n} from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\n\nconst nodeTypes = {\n  courseNode: CourseNode,\n};\n\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate,\n}) {\n  const { toast } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const isInitialMount = useRef(true);\n  // Keep track of manually added nodes to prevent them from being lost\n  const addedNodesRef = useRef([]);\n\n  // Define handleCompleteToggle before it's used\n  const handleCompleteToggle = useCallback(\n    (nodeId, completed) => {\n      if (readOnly) return;\n\n      // Get the current timestamp\n      const completedAt = completed ? new Date().toISOString() : null;\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                completed,\n                completedAt,\n              },\n            };\n          }\n          return node;\n        })\n      );\n\n      toast({\n        title: completed\n          ? \"Course marked as completed\"\n          : \"Course marked as incomplete\",\n        description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\n          nodes.find((n) => n.id === nodeId)?.data.label\n        }`,\n      });\n    },\n    [nodes, setNodes, toast, readOnly]\n  );\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    // Skip effect if no initial data\n    if (!initialNodes?.length && !initialEdges?.length) {\n      return;\n    }\n\n    // Only run once during initial mount to avoid re-render cycles\n    if (isInitialMount.current) {\n      console.log(\"[FLOW] Initial setup with nodes:\", initialNodes?.length);\n\n      if (initialNodes?.length > 0) {\n        // Process nodes once with required properties for display\n        const processedNodes = initialNodes.map((node) => ({\n          ...node,\n          type: \"courseNode\",\n          position: node.position || {\n            x: Math.random() * 500,\n            y: Math.random() * 300,\n          },\n          data: {\n            ...node.data,\n            showQuickToggle: true,\n            onQuickToggle: handleCompleteToggle,\n            label: node.data?.label || \"Untitled Node\",\n          },\n        }));\n\n        // Initialize with the processed nodes\n        setNodes(processedNodes);\n        // Store initial nodes in our ref for tracking\n        addedNodesRef.current = [...processedNodes];\n      }\n\n      // Process edges only after nodes are set\n      if (initialEdges?.length > 0) {\n        console.log(\"[FLOW] Setting initial edges:\", initialEdges.length);\n\n        // Create a map of node IDs for quick lookup\n        const nodeMap = new Map(initialNodes.map((node) => [node.id, node]));\n\n        // Validate edges against existing nodes to ensure they connect to valid nodes\n        const validEdges = initialEdges.filter((edge) => {\n          // Check that both source and target nodes exist\n          const sourceExists = nodeMap.has(edge.source);\n          const targetExists = nodeMap.has(edge.target);\n\n          if (!sourceExists || !targetExists) {\n            console.warn(\n              `[FLOW] Skipping invalid edge: Source exists: ${sourceExists}, Target exists: ${targetExists}`,\n              edge\n            );\n            return false;\n          }\n          return true;\n        });\n\n        // Log the handle positions found in the data\n        console.log(\n          \"[FLOW] Edge handle data:\",\n          validEdges.map((edge) => ({\n            id: edge.id,\n            sourceHandle: edge.sourceHandle || edge.data?.sourceHandle,\n            targetHandle: edge.targetHandle || edge.data?.targetHandle,\n          }))\n        );\n\n        // Process edges with additional data\n        const processedEdges = validEdges.map((edge) => {\n          // Extract handle information from wherever it might be stored\n          const sourceHandle =\n            edge.sourceHandle || edge.data?.sourceHandle || null;\n          const targetHandle =\n            edge.targetHandle || edge.data?.targetHandle || null;\n\n          // Generate a consistent ID based on all connection points\n          const edgeId =\n            edge.id ||\n            `edge-${edge.source}-${sourceHandle || \"default\"}-${edge.target}-${\n              targetHandle || \"default\"\n            }`;\n\n          return {\n            ...edge,\n            // Ensure edge has required properties\n            id: edgeId,\n            type: edge.type || \"smoothstep\",\n            animated: edge.animated !== undefined ? edge.animated : true,\n            style: edge.style || { stroke: \"#6d28d9\" },\n            // Ensure handle positions are preserved\n            sourceHandle: sourceHandle,\n            targetHandle: targetHandle,\n            // Add class names for CSS targeting\n            className: `custom-edge source-${\n              sourceHandle || \"default\"\n            } target-${targetHandle || \"default\"}`,\n            // Store explicit connection information in data\n            data: {\n              ...(edge.data || {}),\n              sourceId: edge.source,\n              targetId: edge.target,\n              // Store handle positions in data for redundancy\n              sourceHandle: sourceHandle,\n              targetHandle: targetHandle,\n              // Store handle types for better visualization\n              sourceHandleType: sourceHandle || \"default\",\n              targetHandleType: targetHandle || \"default\",\n              connectionType: edge.data?.connectionType || \"arrow\",\n            },\n            // Ensure markerEnd if using arrow type\n            ...(!edge.markerEnd &&\n              edge.data?.connectionType !== \"none\" && {\n                markerEnd: {\n                  type: MarkerType.ArrowClosed,\n                  width: 20,\n                  height: 20,\n                  color: \"#6d28d9\",\n                },\n              }),\n          };\n        });\n\n        console.log(\"[FLOW] Processed edges:\", processedEdges.length);\n        setEdges(processedEdges);\n      }\n\n      // Mark as initialized to prevent future re-processing\n      isInitialMount.current = false;\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges, handleCompleteToggle]);\n\n  // Update parent component with internal changes - optimized for fewer updates\n  useEffect(() => {\n    // Skip during initial render or if no update function provided\n    if (isInitialMount.current || !onInternalUpdate) return;\n\n    // Use a debounce to avoid too frequent updates\n    const timer = setTimeout(() => {\n      console.log(`[FLOW] Debounced parent update: ${nodes.length} nodes`);\n      onInternalUpdate(nodes, edges);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Simplify the node preservation effect\n  useEffect(() => {\n    if (addedNodesRef.current.length > 0 && nodes.length === 0) {\n      // Only restore if we've lost ALL nodes (prevents loops)\n      console.log(\"[FLOW] Lost all nodes, restoring from ref\");\n      setNodes(addedNodesRef.current);\n    }\n  }, [nodes.length, setNodes]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack((prev) => [...prev, { nodes: [...nodes], edges: [...edges] }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n\n  const onConnect = useCallback(\n    (params) => {\n      saveCurrentState();\n\n      // Generate a more stable ID using source, target and handle positions\n      // This ensures each unique connection point combination has its own ID\n      const edgeId = `edge-${params.source}-${\n        params.sourceHandle || \"default\"\n      }-${params.target}-${params.targetHandle || \"default\"}`;\n\n      // Log detail about the connection being made\n      console.log(\"[FLOW] Creating connection:\", {\n        source: params.source,\n        sourceHandle: params.sourceHandle,\n        target: params.target,\n        targetHandle: params.targetHandle,\n        edgeId: edgeId,\n      });\n\n      // Add marker and apply current edge style settings\n      const newEdge = {\n        ...params,\n        id: edgeId,\n        type: \"smoothstep\",\n        animated: true,\n        style: { stroke: \"#6d28d9\" },\n        // Store handle positions explicitly\n        sourceHandle: params.sourceHandle,\n        targetHandle: params.targetHandle,\n        // Add data attributes directly to the edge DOM element\n        className: `custom-edge source-${\n          params.sourceHandle || \"default\"\n        } target-${params.targetHandle || \"default\"}`,\n        // Only add marker if connection type is arrow\n        ...(connectionType === \"arrow\" && {\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20,\n            color: \"#6d28d9\",\n          },\n        }),\n        data: {\n          connectionType,\n          // Store source and target information explicitly\n          sourceId: params.source,\n          targetId: params.target,\n          // Store handle positions in data as well for redundancy\n          sourceHandle: params.sourceHandle,\n          targetHandle: params.targetHandle,\n          // Store handle types for better visualization\n          sourceHandleType: params.sourceHandle || \"default\",\n          targetHandleType: params.targetHandle || \"default\",\n        },\n      };\n\n      setEdges((eds) => {\n        // Check if this exact connection already exists (same nodes and same handles)\n        const existingEdgeIndex = eds.findIndex(\n          (e) =>\n            e.source === params.source &&\n            e.target === params.target &&\n            e.sourceHandle === params.sourceHandle &&\n            e.targetHandle === params.targetHandle\n        );\n\n        // If connection exists, update it rather than adding a new one\n        if (existingEdgeIndex >= 0) {\n          const updatedEdges = [...eds];\n          updatedEdges[existingEdgeIndex] = newEdge;\n          console.log(\"[FLOW] Updated existing edge:\", newEdge);\n          return updatedEdges;\n        } else {\n          const newEdges = addEdge(newEdge, eds);\n          console.log(\"[FLOW] Edge added:\", newEdge);\n          console.log(\"[FLOW] Current edges count:\", newEdges.length);\n          return newEdges;\n        }\n      });\n\n      toast({\n        title: \"Connection added\",\n        description: \"A new connection has been created between nodes\",\n      });\n    },\n    [setEdges, saveCurrentState, toast, connectionType]\n  );\n\n  const onNodeClick = useCallback(\n    (event, node) => {\n      event.stopPropagation();\n\n      if (editMode === \"delete\") {\n        // Delete mode: remove the node\n        saveCurrentState();\n        setNodes(nodes.filter((n) => n.id !== node.id));\n        // Also remove any connected edges\n        setEdges(\n          edges.filter((e) => e.source !== node.id && e.target !== node.id)\n        );\n\n        toast({\n          title: \"Node deleted\",\n          description: `${node.data.label} has been removed from the roadmap`,\n        });\n      } else if (editMode === \"connect\" && selectedNode) {\n        // Connect mode: create an edge between selectedNode and this node\n        if (selectedNode.id !== node.id) {\n          const newEdge = {\n            id: `edge-${Date.now()}`,\n            source: selectedNode.id,\n            target: node.id,\n            type: \"smoothstep\",\n            animated: true,\n            style: { stroke: \"#6d28d9\" },\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          };\n\n          saveCurrentState();\n          setEdges((eds) => [...eds, newEdge]);\n          setSelectedNode(null);\n          setEditMode(\"select\");\n\n          toast({\n            title: \"Connection created\",\n            description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\n          });\n        }\n      } else if (editMode === \"select\") {\n        // Regular select mode: show node details\n        setSelectedNode(node);\n      }\n    },\n    [\n      editMode,\n      selectedNode,\n      nodes,\n      edges,\n      setNodes,\n      setEdges,\n      saveCurrentState,\n      toast,\n    ]\n  );\n\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\",\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"[VIEW] Starting roadmap save process\");\n      console.log(\"[VIEW] Current nodes:\", nodes.length);\n      console.log(\"[VIEW] Current edges:\", edges.length);\n\n      // Ensure no node is missing important data\n      const cleanedNodes = nodes.map((node) => {\n        if (!node.id) {\n          console.error(\"[VIEW] Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random()\n            .toString(36)\n            .substring(2, 9)}`;\n        }\n\n        if (!node.position) {\n          console.error(\"[VIEW] Node missing position:\", node);\n          // Default position\n          node.position = { x: 0, y: 0 };\n        }\n\n        if (!node.data) {\n          console.error(\"[VIEW] Node missing data:\", node);\n          // Default minimal data\n          node.data = { label: \"Node \" + node.id };\n        }\n\n        // Ensure the node has all required information\n        return {\n          ...node,\n          type: node.type || \"courseNode\", // Default node type\n          data: {\n            ...(node.data || {}),\n            id: node.id, // Ensure ID in data matches node ID\n            label: node.data?.label || \"Untitled\", // At least have a label\n          },\n        };\n      });\n\n      // Create a map of node IDs for quick lookup\n      const nodeIdMap = new Set(cleanedNodes.map((node) => node.id));\n\n      // Enhance with log details to help diagnose issues\n      console.log(\n        \"[VIEW] Edge handle positions before cleaning:\",\n        edges.map((edge) => ({\n          id: edge.id,\n          source: edge.source,\n          target: edge.target,\n          sourceHandle: edge.sourceHandle || edge.data?.sourceHandle,\n          targetHandle: edge.targetHandle || edge.data?.targetHandle,\n        }))\n      );\n\n      // Ensure edges have all necessary information\n      const cleanedEdges = edges\n        .map((edge) => {\n          if (!edge.source || !edge.target) {\n            console.error(\"[VIEW] Edge missing source or target:\", edge);\n            return null; // Skip invalid edges\n          }\n\n          // Make sure source and target nodes still exist\n          const sourceExists = nodeIdMap.has(edge.source);\n          const targetExists = nodeIdMap.has(edge.target);\n\n          if (!sourceExists || !targetExists) {\n            console.error(\n              `[VIEW] Edge has invalid connections. Source exists: ${sourceExists}, Target exists: ${targetExists}`\n            );\n            return null; // Skip edges with missing endpoints\n          }\n\n          // Extract handle information from wherever it might be stored\n          const sourceHandle =\n            edge.sourceHandle || edge.data?.sourceHandle || null;\n          const targetHandle =\n            edge.targetHandle || edge.data?.targetHandle || null;\n\n          // Generate a consistent ID based on all connection points\n          const edgeId = `edge-${edge.source}-${sourceHandle || \"default\"}-${\n            edge.target\n          }-${targetHandle || \"default\"}`;\n\n          // Ensure we have complete edge data\n          return {\n            ...edge,\n            id: edgeId,\n            type: edge.type || \"smoothstep\", // Default edge type\n            // Preserve handle positions explicitly\n            sourceHandle: sourceHandle,\n            targetHandle: targetHandle,\n            // Add class names for CSS targeting\n            className: `custom-edge source-${\n              sourceHandle || \"default\"\n            } target-${targetHandle || \"default\"}`,\n            // Store explicit source and target information\n            data: {\n              ...(edge.data || {}),\n              sourceId: edge.source,\n              targetId: edge.target,\n              // Store handle positions in data for redundancy\n              sourceHandle: sourceHandle,\n              targetHandle: targetHandle,\n              // Store handle types for better visualization\n              sourceHandleType: sourceHandle || \"default\",\n              targetHandleType: targetHandle || \"default\",\n              connectionType: edge.data?.connectionType || \"arrow\",\n            },\n            // Ensure markerEnd is consistent with connection type\n            ...(!edge.markerEnd &&\n              edge.data?.connectionType !== \"none\" && {\n                markerEnd: {\n                  type: MarkerType.ArrowClosed,\n                  width: 20,\n                  height: 20,\n                  color: \"#6d28d9\",\n                },\n              }),\n          };\n        })\n        .filter(Boolean); // Filter out null edges\n\n      console.log(\n        \"[VIEW] Edge handle positions after cleaning:\",\n        cleanedEdges.map((edge) => ({\n          id: edge.id,\n          source: edge.source,\n          target: edge.target,\n          sourceHandle: edge.sourceHandle,\n          targetHandle: edge.targetHandle,\n        }))\n      );\n\n      console.log(\"[VIEW] Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"[VIEW] Node data sample:\", cleanedNodes[0]);\n      console.log(\"[VIEW] Cleaned edges for saving:\", cleanedEdges.length);\n      if (cleanedEdges.length > 0) {\n        console.log(\"[VIEW] Edge data sample:\", cleanedEdges[0]);\n      }\n\n      // Notify the user\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`,\n      });\n\n      // Save data to local state\n      setNodes(cleanedNodes);\n      setEdges(cleanedEdges);\n\n      // Call the onSave callback to save the data\n      console.log(\"[VIEW] Calling onSave with cleaned data\");\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"[VIEW] Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\",\n      });\n    }\n  }, [nodes, edges, onSave, toast, setNodes, setEdges]);\n\n  const handleAddCourse = useCallback(\n    (courseData) => {\n      saveCurrentState();\n\n      // Generate a unique node ID with timestamp for guaranteed uniqueness\n      const newNodeId = `node-${Date.now()}-${Math.floor(\n        Math.random() * 1000000\n      )}`;\n\n      // Simple positioning math to ensure nodes don't overlap\n      const nodeOffsets = [\n        { x: 0, y: 0 },\n        { x: 250, y: 0 },\n        { x: 0, y: 150 },\n        { x: 250, y: 150 },\n        { x: -250, y: 0 },\n        { x: -250, y: 150 },\n      ];\n\n      // Base position starts at center if possible\n      let baseX = 0,\n        baseY = 0;\n\n      if (reactFlowInstance) {\n        const viewport = reactFlowInstance.getViewport();\n        const screenCenter = reactFlowInstance.screenToFlowPosition({\n          x: window.innerWidth / 2,\n          y: window.innerHeight / 2,\n        });\n        baseX = screenCenter.x;\n        baseY = screenCenter.y;\n      }\n\n      // Choose offset based on node count (cycle through positions)\n      const offset = nodeOffsets[nodes.length % nodeOffsets.length];\n\n      // Final position\n      const position = {\n        x: baseX + offset.x,\n        y: baseY + offset.y,\n      };\n\n      console.log(\n        `[FLOW] Creating new node at position: x=${position.x}, y=${position.y}`\n      );\n\n      // Create the node with all required data\n      const newNode = {\n        id: newNodeId,\n        type: \"courseNode\",\n        position,\n        data: {\n          ...courseData,\n          id: newNodeId,\n          completed: false,\n          completedAt: null,\n          showQuickToggle: true,\n          onQuickToggle: handleCompleteToggle,\n        },\n      };\n\n      // Add node directly to state and tracking ref\n      setNodes((currentNodes) => [...currentNodes, newNode]);\n      addedNodesRef.current = [...addedNodesRef.current, newNode];\n\n      // Close dialog and show confirmation\n      setIsAddCourseOpen(false);\n      toast({\n        title: \"Course added\",\n        description: `${courseData.label} has been added to the roadmap`,\n      });\n\n      // Ensure newly added node is visible\n      setTimeout(() => {\n        if (reactFlowInstance) {\n          reactFlowInstance.fitView({\n            padding: 0.5,\n            includeHiddenNodes: false,\n            minZoom: 0.5,\n            maxZoom: 1.5,\n          });\n        }\n      }, 100);\n    },\n    [\n      setNodes,\n      toast,\n      reactFlowInstance,\n      nodes.length,\n      handleCompleteToggle,\n      saveCurrentState,\n    ]\n  );\n\n  // Ensure manually added nodes are preserved during state updates\n  useEffect(() => {\n    if (addedNodesRef.current.length > 0 && nodes.length > 0) {\n      // Get IDs of current nodes\n      const currentIds = new Set(nodes.map((n) => n.id));\n\n      // Find manually added nodes that are missing from current nodes\n      const missingNodes = addedNodesRef.current.filter(\n        (n) => !currentIds.has(n.id)\n      );\n\n      // If any manually added nodes are missing, add them back\n      if (missingNodes.length > 0) {\n        console.log(\n          `[FLOW] Restoring ${missingNodes.length} manually added nodes that were lost`\n        );\n        setNodes((currentNodes) => [...currentNodes, ...missingNodes]);\n      }\n    }\n  }, [nodes, setNodes]);\n\n  const handleDeleteNode = useCallback(\n    (nodeId) => {\n      saveCurrentState();\n\n      // Remove the node from state\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId));\n\n      // Remove the node from our tracking ref\n      addedNodesRef.current = addedNodesRef.current.filter(\n        (node) => node.id !== nodeId\n      );\n\n      // Remove connected edges\n      setEdges((eds) =>\n        eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\n      );\n\n      // Clear selection\n      setSelectedNode(null);\n\n      toast({\n        title: \"Node deleted\",\n        description: \"The node has been removed from the roadmap\",\n      });\n\n      // Update view after deletion\n      setTimeout(() => {\n        if (reactFlowInstance) {\n          reactFlowInstance.fitView({ padding: 0.5 });\n        }\n      }, 100);\n    },\n    [setNodes, setEdges, toast, saveCurrentState, reactFlowInstance]\n  );\n\n  const handleUpdateNodeStyle = useCallback(\n    (nodeId, style) => {\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                ...style,\n              },\n            };\n          }\n          return node;\n        })\n      );\n    },\n    [setNodes]\n  );\n\n  const onEdgeClick = useCallback(\n    (event, edge) => {\n      if (editMode === \"delete\") {\n        saveCurrentState();\n\n        // Delete the edge\n        setEdges((eds) => eds.filter((e) => e.id !== edge.id));\n\n        toast({\n          title: \"Connection removed\",\n          description: \"The connection between nodes has been removed\",\n        });\n      }\n    },\n    [setEdges, editMode, saveCurrentState, toast]\n  );\n\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const previousState = undoStack[undoStack.length - 1];\n\n    setRedoStack((prev) => [...prev, currentState]);\n    setUndoStack((prev) => prev.slice(0, -1));\n\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const nextState = redoStack[redoStack.length - 1];\n\n    setUndoStack((prev) => [...prev, currentState]);\n    setRedoStack((prev) => prev.slice(0, -1));\n\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(\n      (node) =>\n        node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\n    );\n  }, [nodes, selectedCategory]);\n\n  const handleStyleChange = useCallback(\n    (styles) => {\n      // Apply styles to selected node or default edge options\n      if (selectedNode) {\n        handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n      }\n\n      // Update default edge options\n      // (would be implemented in a full version)\n    },\n    [selectedNode, handleUpdateNodeStyle]\n  );\n\n  const handleConnectionTypeChange = useCallback((type) => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      // Instead of suppressing errors, let's implement a proper fix\n      let resizeObserverLoopErrCount = 0;\n      const debouncedResizeObserverCallback = debounce(() => {\n        resizeObserverLoopErrCount = 0;\n      }, 200);\n\n      const originalError = console.error;\n      console.error = (...args) => {\n        if (\n          args[0]?.includes?.(\"ResizeObserver loop\") ||\n          args[0]?.message?.includes?.(\"ResizeObserver loop\")\n        ) {\n          // Increment counter and invoke debounced callback\n          resizeObserverLoopErrCount += 1;\n          if (resizeObserverLoopErrCount <= 1) {\n            debouncedResizeObserverCallback();\n          }\n          // Suppress the error\n          return;\n        }\n        originalError.apply(console, args);\n      };\n\n      return () => {\n        console.error = originalError;\n      };\n    }\n\n    // Helper function for debounce\n    function debounce(fn, delay) {\n      let timeoutId;\n      return function () {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => fn.apply(this, arguments), delay);\n      };\n    }\n  }, []);\n\n  // Optimize edge rendering and enhance edge interaction\n  useEffect(() => {\n    // Configure ReactFlow for improved edge connection\n    const reactFlowEl = document.querySelector(\".react-flow\");\n    if (reactFlowEl) {\n      // Add custom class for better edge interaction\n      reactFlowEl.classList.add(\"improved-edge-connection\");\n    }\n\n    return () => {\n      if (reactFlowEl) {\n        reactFlowEl.classList.remove(\"improved-edge-connection\");\n      }\n    };\n  }, []);\n\n  // Ensure nodes are visible in the viewport\n  useEffect(() => {\n    if (!isInitialMount.current && nodes.length > 0 && reactFlowInstance) {\n      // Wait for rendering to complete, then fit view\n      const timeoutId = setTimeout(() => {\n        console.log(\"[FLOW] Fitting view to ensure nodes are visible\");\n        reactFlowInstance.fitView({\n          padding: 0.5,\n          includeHiddenNodes: true,\n          minZoom: 0.5,\n          maxZoom: 1.5,\n        });\n      }, 500);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [nodes.length, reactFlowInstance]);\n\n  // Add a debug useEffect to log whenever nodes change\n  useEffect(() => {\n    if (nodes.length > 0) {\n      console.log(\"[FLOW] Nodes changed, current count:\", nodes.length);\n    }\n  }, [nodes]);\n\n  // Cleanup on unmount to prevent memory leaks\n  useEffect(() => {\n    return () => {\n      // Clear any timeouts that might be pending\n      const viewportEl = document.querySelector(\".react-flow__viewport\");\n      if (viewportEl) {\n        viewportEl.style.transitionProperty = \"\";\n        viewportEl.style.transitionDuration = \"\";\n      }\n\n      console.log(\"[FLOW] Component unmounting, performing cleanup\");\n    };\n  }, []);\n\n  // Add special effect to prevent excessive console logging during development\n  useEffect(() => {\n    if (process.env.NODE_ENV === \"development\") {\n      const originalConsoleLog = console.log;\n      const flowLogPattern = /^\\[FLOW\\]/;\n\n      // Filter out excessive flow logs in development\n      console.log = (...args) => {\n        if (typeof args[0] === \"string\" && flowLogPattern.test(args[0])) {\n          // Only log important flow messages or when explicitly debugging\n          if (\n            args[0].includes(\"error\") ||\n            args[0].includes(\"Creating\") ||\n            args[0].includes(\"deleted\")\n          ) {\n            originalConsoleLog.apply(console, args);\n          }\n        } else {\n          originalConsoleLog.apply(console, args);\n        }\n      };\n\n      return () => {\n        console.log = originalConsoleLog;\n      };\n    }\n  }, []);\n\n  return (\n    <div ref={reactFlowWrapper} className=\"h-full w-full\">\n      {isEditing && showEditorPanel && (\n        <Panel position=\"right\" className=\"w-72 mr-2\">\n          <RoadmapEditorPanel\n            onStyleChange={handleStyleChange}\n            onConnectionTypeChange={handleConnectionTypeChange}\n            activeEdgeStyle={connectionType}\n            editMode={editMode}\n            onEditModeChange={(mode) => {\n              setEditMode(mode);\n              if (mode === \"connect\") {\n                toast({\n                  title: \"Connect mode\",\n                  description:\n                    \"Click on a source node, then click on a target node to create a connection\",\n                });\n              } else if (mode === \"delete\") {\n                toast({\n                  title: \"Delete mode\",\n                  description: \"Click on a node or connection to delete it\",\n                });\n              }\n            }}\n            onAddNodeClick={() => setIsAddCourseOpen(true)}\n          />\n        </Panel>\n      )}\n\n      {isEditing && (\n        <Panel\n          position=\"top-right\"\n          className=\"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\"\n        >\n          <div className=\"flex gap-2 justify-end\">\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleUndo}\n              disabled={undoStack.length === 0}\n            >\n              Undo\n            </Button>\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleRedo}\n              disabled={redoStack.length === 0}\n            >\n              Redo\n            </Button>\n            <Button\n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n              size=\"sm\"\n              onClick={handleSaveRoadmap}\n            >\n              <Save className=\"h-4 w-4 mr-1\" /> Save\n            </Button>\n          </div>\n        </Panel>\n      )}\n\n      <div className=\"h-full\">\n        <ReactFlow\n          key={`flow-${id}-${nodes.length}`}\n          nodes={filteredNodes()}\n          edges={edges}\n          onNodesChange={isEditing ? onNodesChange : undefined}\n          onEdgesChange={isEditing ? onEdgesChange : undefined}\n          onConnect={isEditing ? onConnect : undefined}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          onPaneClick={onPaneClick}\n          nodeTypes={nodeTypes}\n          onNodeDragStop={onNodeDragStop}\n          nodesDraggable={isEditing}\n          nodesConnectable={isEditing && editMode === \"connect\"}\n          elementsSelectable={!readOnly}\n          defaultEdgeOptions={{\n            type: \"smoothstep\",\n            style: { stroke: \"#6d28d9\" },\n            animated: true,\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          }}\n          fitView\n          fitViewOptions={{\n            padding: 0.5,\n            includeHiddenNodes: true,\n            minZoom: 0.5,\n            maxZoom: 1.5,\n          }}\n          minZoom={0.2}\n          maxZoom={4}\n          snapToGrid={true}\n          snapGrid={[10, 10]}\n          nodeExtent={[\n            [-2000, -2000],\n            [2000, 2000],\n          ]}\n          proOptions={{ hideAttribution: true }}\n          disableKeyboardA11y={true}\n          autoPanOnNodeDrag={false}\n          elevateEdgesOnSelect={false}\n          onInit={(instance) => {\n            // Use setTimeout to ensure proper initialization\n            setTimeout(() => {\n              if (nodes.length > 0) {\n                instance.fitView({ padding: 0.5 });\n                console.log(\n                  \"[FLOW] Flow initialized with nodes:\",\n                  nodes.length\n                );\n              }\n            }, 300);\n          }}\n          // Add custom edge rendering to set data attributes based on handle positions\n          edgeUpdaterRadius={10}\n          edgesUpdatable={true}\n          edgesFocusable={true}\n          onEdgeUpdate={(oldEdge, newConnection) => {\n            setEdges((els) =>\n              els.map((edge) => {\n                if (edge.id === oldEdge.id) {\n                  // Generate new ID based on new connection points\n                  const newId = `edge-${newConnection.source}-${\n                    newConnection.sourceHandle || \"default\"\n                  }-${newConnection.target}-${\n                    newConnection.targetHandle || \"default\"\n                  }`;\n                  return {\n                    ...edge,\n                    id: newId,\n                    source: newConnection.source,\n                    target: newConnection.target,\n                    sourceHandle: newConnection.sourceHandle,\n                    targetHandle: newConnection.targetHandle,\n                    data: {\n                      ...edge.data,\n                      sourceId: newConnection.source,\n                      targetId: newConnection.target,\n                      sourceHandle: newConnection.sourceHandle,\n                      targetHandle: newConnection.targetHandle,\n                      sourceHandleType: newConnection.sourceHandle || \"default\",\n                      targetHandleType: newConnection.targetHandle || \"default\",\n                    },\n                  };\n                }\n                return edge;\n              })\n            );\n            return true;\n          }}\n        >\n          <Controls />\n          <MiniMap nodeStrokeWidth={3} zoomable pannable />\n          <Background variant=\"dots\" gap={12} size={1} color=\"#6d28d9\" />\n\n          {/* Add custom edge styles for colored connections */}\n          {edges.map((edge) => (\n            <div key={`handle-${edge.id}`} style={{ display: \"none\" }}>\n              <div\n                data-edgeid={edge.id}\n                data-sourcehandle={edge.sourceHandle || \"default\"}\n                data-targethandle={edge.targetHandle || \"default\"}\n              />\n            </div>\n          ))}\n        </ReactFlow>\n      </div>\n\n      {selectedNode && (\n        <CourseInfoPanel\n          node={selectedNode}\n          onClose={() => setSelectedNode(null)}\n          onCompleteToggle={handleCompleteToggle}\n          onDelete={isEditing ? handleDeleteNode : undefined}\n          onUpdateStyle={handleUpdateNodeStyle}\n          isAdmin={isEditing}\n          readOnly={readOnly}\n        />\n      )}\n\n      {isAddCourseOpen && (\n        <AddCourseDialog\n          open={isAddCourseOpen}\n          onClose={() => setIsAddCourseOpen(false)}\n          onAdd={handleAddCourse}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function RoadmapView(props) {\n  console.log(\"[FLOW] RoadmapView wrapper rendering with props:\", {\n    id: props.id,\n    nodesCount: props.initialNodes?.length,\n    edgesCount: props.initialEdges?.length,\n  });\n\n  return (\n    <ReactFlowProvider>\n      <div className=\"w-full h-full\">\n        <RoadmapViewInner {...props} />\n      </div>\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}