{"ast":null,"code":"import _objectSpread from\"D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{MarkerType}from\"reactflow\";/**\r\n * 处理边缘配置，确保源节点和目标节点方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 处理后的边缘对象\r\n */export const processEdgeConfig=edge=>{if(!edge)return null;// 确保边缘有数据对象\nconst edgeData=edge.data||{};const connectionType=edgeData.connectionType||\"arrow\";const needsArrow=connectionType===\"arrow\";// 记录连接点信息，方便调试\nconsole.log(\"Processing edge handles:\",{id:edge.id,sourceHandle:edge.sourceHandle,targetHandle:edge.targetHandle,dataSourceHandle:edgeData.sourceHandle,dataTargetHandle:edgeData.targetHandle});// 确保保留源节点和目标节点的正确方向\nreturn _objectSpread(_objectSpread({},edge),{},{// 确保保留原始的连接点信息\nsourceHandle:edge.sourceHandle||edgeData.sourceHandle||null,targetHandle:edge.targetHandle||edgeData.targetHandle||null,// 确保保留现有的markerEnd配置或创建新的\nmarkerEnd:edge.markerEnd||(needsArrow?{type:MarkerType.ArrowClosed,width:20,height:20,color:\"hsl(var(--primary))\"}:undefined),data:_objectSpread(_objectSpread({},edgeData),{},{connectionType,// 显式存储源和目标信息以确保方向一致性\nsourceId:edge.source,targetId:edge.target,// 在data中也保存连接点信息，确保两处一致\nsourceHandle:edge.sourceHandle||edgeData.sourceHandle||null,targetHandle:edge.targetHandle||edgeData.targetHandle||null})});};/**\r\n * 创建新的边缘连接\r\n * @param {Object} params - 连接参数\r\n * @param {string} connectionType - 连接类型 (arrow 或 none)\r\n * @returns {Object} - 创建的新边缘对象\r\n */export const createEdgeConnection=function(params){let connectionType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"arrow\";if(!params.source||!params.target){console.error(\"Cannot create edge: missing source or target\");return null;}// 记录原始连接参数\nconsole.log(\"Creating edge with handles:\",{sourceHandle:params.sourceHandle,targetHandle:params.targetHandle});// 生成唯一ID\nconst newEdgeId=\"edge-\".concat(Date.now(),\"-\").concat(Math.floor(Math.random()*1000000));// 确定是否需要箭头\nconst needsArrow=connectionType===\"arrow\";// 创建边缘基本数据\nconst baseEdge=_objectSpread(_objectSpread({},params),{},{id:newEdgeId,type:\"smoothstep\",animated:false,style:{stroke:\"#6d28d9\",strokeWidth:2},// 确保连接点信息存在于顶层属性中\nsourceHandle:params.sourceHandle||null,targetHandle:params.targetHandle||null,data:{connectionType:connectionType,// 显式存储源和目标节点信息以确保方向一致性\nsourceId:params.source,targetId:params.target,// 在data中也存储连接点信息\nsourceHandle:params.sourceHandle||null,targetHandle:params.targetHandle||null},markerEnd:needsArrow?{type:MarkerType.ArrowClosed,width:20,height:20,color:\"hsl(var(--primary))\"}:undefined});// 应用处理确保一致性\nreturn processEdgeConfig(baseEdge);};/**\r\n * 从原始边缘数据中提取关键信息用于日志记录和调试\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 包含关键信息的简化对象\r\n */export const getEdgeDebugInfo=edge=>{var _edge$data,_edge$data2,_edge$data3,_edge$data4,_edge$data5;if(!edge)return{missing:true};return{id:edge.id,source:edge.source,target:edge.target,sourceId:(_edge$data=edge.data)===null||_edge$data===void 0?void 0:_edge$data.sourceId,targetId:(_edge$data2=edge.data)===null||_edge$data2===void 0?void 0:_edge$data2.targetId,sourceHandle:edge.sourceHandle,targetHandle:edge.targetHandle,dataSourceHandle:(_edge$data3=edge.data)===null||_edge$data3===void 0?void 0:_edge$data3.sourceHandle,dataTargetHandle:(_edge$data4=edge.data)===null||_edge$data4===void 0?void 0:_edge$data4.targetHandle,connectionType:(_edge$data5=edge.data)===null||_edge$data5===void 0?void 0:_edge$data5.connectionType,hasMarkerEnd:!!edge.markerEnd};};/**\r\n * 验证边缘方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {boolean} - 方向是否一致\r\n */export const validateEdgeDirection=edge=>{if(!edge||!edge.data)return false;// 检查源节点和目标节点的一致性\nconst sourceConsistent=edge.source===edge.data.sourceId;const targetConsistent=edge.target===edge.data.targetId;// 检查连接点一致性\nconst sourceHandleConsistent=edge.sourceHandle===edge.data.sourceHandle;const targetHandleConsistent=edge.targetHandle===edge.data.targetHandle;return sourceConsistent&&targetConsistent&&sourceHandleConsistent&&targetHandleConsistent;};","map":{"version":3,"names":["MarkerType","processEdgeConfig","edge","edgeData","data","connectionType","needsArrow","console","log","id","sourceHandle","targetHandle","dataSourceHandle","dataTargetHandle","_objectSpread","markerEnd","type","ArrowClosed","width","height","color","undefined","sourceId","source","targetId","target","createEdgeConnection","params","arguments","length","error","newEdgeId","concat","Date","now","Math","floor","random","baseEdge","animated","style","stroke","strokeWidth","getEdgeDebugInfo","_edge$data","_edge$data2","_edge$data3","_edge$data4","_edge$data5","missing","hasMarkerEnd","validateEdgeDirection","sourceConsistent","targetConsistent","sourceHandleConsistent","targetHandleConsistent"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/utils/edgeUtils.js"],"sourcesContent":["import { MarkerType } from \"reactflow\";\r\n\r\n/**\r\n * 处理边缘配置，确保源节点和目标节点方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 处理后的边缘对象\r\n */\r\nexport const processEdgeConfig = (edge) => {\r\n  if (!edge) return null;\r\n\r\n  // 确保边缘有数据对象\r\n  const edgeData = edge.data || {};\r\n  const connectionType = edgeData.connectionType || \"arrow\";\r\n  const needsArrow = connectionType === \"arrow\";\r\n\r\n  // 记录连接点信息，方便调试\r\n  console.log(\"Processing edge handles:\", {\r\n    id: edge.id,\r\n    sourceHandle: edge.sourceHandle,\r\n    targetHandle: edge.targetHandle,\r\n    dataSourceHandle: edgeData.sourceHandle,\r\n    dataTargetHandle: edgeData.targetHandle,\r\n  });\r\n\r\n  // 确保保留源节点和目标节点的正确方向\r\n  return {\r\n    ...edge,\r\n    // 确保保留原始的连接点信息\r\n    sourceHandle: edge.sourceHandle || edgeData.sourceHandle || null,\r\n    targetHandle: edge.targetHandle || edgeData.targetHandle || null,\r\n    // 确保保留现有的markerEnd配置或创建新的\r\n    markerEnd:\r\n      edge.markerEnd ||\r\n      (needsArrow\r\n        ? {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: \"hsl(var(--primary))\",\r\n          }\r\n        : undefined),\r\n    data: {\r\n      ...edgeData,\r\n      connectionType,\r\n      // 显式存储源和目标信息以确保方向一致性\r\n      sourceId: edge.source,\r\n      targetId: edge.target,\r\n      // 在data中也保存连接点信息，确保两处一致\r\n      sourceHandle: edge.sourceHandle || edgeData.sourceHandle || null,\r\n      targetHandle: edge.targetHandle || edgeData.targetHandle || null,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * 创建新的边缘连接\r\n * @param {Object} params - 连接参数\r\n * @param {string} connectionType - 连接类型 (arrow 或 none)\r\n * @returns {Object} - 创建的新边缘对象\r\n */\r\nexport const createEdgeConnection = (params, connectionType = \"arrow\") => {\r\n  if (!params.source || !params.target) {\r\n    console.error(\"Cannot create edge: missing source or target\");\r\n    return null;\r\n  }\r\n\r\n  // 记录原始连接参数\r\n  console.log(\"Creating edge with handles:\", {\r\n    sourceHandle: params.sourceHandle,\r\n    targetHandle: params.targetHandle,\r\n  });\r\n\r\n  // 生成唯一ID\r\n  const newEdgeId = `edge-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;\r\n\r\n  // 确定是否需要箭头\r\n  const needsArrow = connectionType === \"arrow\";\r\n\r\n  // 创建边缘基本数据\r\n  const baseEdge = {\r\n    ...params,\r\n    id: newEdgeId,\r\n    type: \"smoothstep\",\r\n    animated: false,\r\n    style: { stroke: \"#6d28d9\", strokeWidth: 2 },\r\n    // 确保连接点信息存在于顶层属性中\r\n    sourceHandle: params.sourceHandle || null,\r\n    targetHandle: params.targetHandle || null,\r\n    data: {\r\n      connectionType: connectionType,\r\n      // 显式存储源和目标节点信息以确保方向一致性\r\n      sourceId: params.source,\r\n      targetId: params.target,\r\n      // 在data中也存储连接点信息\r\n      sourceHandle: params.sourceHandle || null,\r\n      targetHandle: params.targetHandle || null,\r\n    },\r\n    markerEnd: needsArrow\r\n      ? {\r\n          type: MarkerType.ArrowClosed,\r\n          width: 20,\r\n          height: 20,\r\n          color: \"hsl(var(--primary))\",\r\n        }\r\n      : undefined,\r\n  };\r\n\r\n  // 应用处理确保一致性\r\n  return processEdgeConfig(baseEdge);\r\n};\r\n\r\n/**\r\n * 从原始边缘数据中提取关键信息用于日志记录和调试\r\n * @param {Object} edge - 边缘对象\r\n * @returns {Object} - 包含关键信息的简化对象\r\n */\r\nexport const getEdgeDebugInfo = (edge) => {\r\n  if (!edge) return { missing: true };\r\n\r\n  return {\r\n    id: edge.id,\r\n    source: edge.source,\r\n    target: edge.target,\r\n    sourceId: edge.data?.sourceId,\r\n    targetId: edge.data?.targetId,\r\n    sourceHandle: edge.sourceHandle,\r\n    targetHandle: edge.targetHandle,\r\n    dataSourceHandle: edge.data?.sourceHandle,\r\n    dataTargetHandle: edge.data?.targetHandle,\r\n    connectionType: edge.data?.connectionType,\r\n    hasMarkerEnd: !!edge.markerEnd,\r\n  };\r\n};\r\n\r\n/**\r\n * 验证边缘方向的一致性\r\n * @param {Object} edge - 边缘对象\r\n * @returns {boolean} - 方向是否一致\r\n */\r\nexport const validateEdgeDirection = (edge) => {\r\n  if (!edge || !edge.data) return false;\r\n\r\n  // 检查源节点和目标节点的一致性\r\n  const sourceConsistent = edge.source === edge.data.sourceId;\r\n  const targetConsistent = edge.target === edge.data.targetId;\r\n  // 检查连接点一致性\r\n  const sourceHandleConsistent = edge.sourceHandle === edge.data.sourceHandle;\r\n  const targetHandleConsistent = edge.targetHandle === edge.data.targetHandle;\r\n\r\n  return (\r\n    sourceConsistent &&\r\n    targetConsistent &&\r\n    sourceHandleConsistent &&\r\n    targetHandleConsistent\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}