{"ast":null,"code":"import api from\"./api\";// Get all notifications\nexport const getNotifications=async()=>{try{const response=await api.get(\"/notifications\");return response.data;}catch(error){console.error(\"Error fetching notifications:\",error);throw error;}};// Get current user's notifications\nexport const getUserNotifications=async()=>{try{const response=await api.get(\"/notifications/user\");return response.data;}catch(error){console.error(\"Error fetching user notifications:\",error);throw error;}};// Create a notification\nexport const createNotification=async notificationData=>{try{const response=await api.post(\"/notifications\",notificationData);return response.data;}catch(error){console.error(\"Error creating notification:\",error);throw error;}};// Create a notification for all users\nexport const createGlobalNotification=async message=>{try{const response=await api.post(\"/notifications/global\",{message});return response.data;}catch(error){console.error(\"Error creating global notification:\",error);throw error;}};// Create a notification for users of a specific roadmap\nexport const createRoadmapNotification=async(roadmapId,message)=>{try{const response=await api.post(\"/notifications/roadmap/\".concat(roadmapId),{message});return response.data;}catch(error){console.error(\"Error creating roadmap notification:\",error);throw error;}};// Mark notification as read\nexport const markAsRead=async id=>{try{const response=await api.put(\"/notifications/\".concat(id,\"/read\"));return response.data;}catch(error){console.error(\"Error marking notification as read:\",error);throw error;}};// Delete notification\nexport const deleteNotification=async id=>{try{const response=await api.delete(\"/notifications/\".concat(id));return response.data;}catch(error){console.error(\"Error deleting notification:\",error);throw error;}};// Get notification stats\nexport const getNotificationStats=async()=>{try{const response=await api.get(\"/notifications/stats\");return response.data;}catch(error){console.error(\"Error fetching notification stats:\",error);throw error;}};","map":{"version":3,"names":["api","getNotifications","response","get","data","error","console","getUserNotifications","createNotification","notificationData","post","createGlobalNotification","message","createRoadmapNotification","roadmapId","concat","markAsRead","id","put","deleteNotification","delete","getNotificationStats"],"sources":["D:/demo/DACS-jules_wip_16596734084587186652/it-roadmap/client/src/services/notificationService.js"],"sourcesContent":["import api from \"./api\";\r\n\r\n// Get all notifications\r\nexport const getNotifications = async () => {\r\n  try {\r\n    const response = await api.get(\"/notifications\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching notifications:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get current user's notifications\r\nexport const getUserNotifications = async () => {\r\n  try {\r\n    const response = await api.get(\"/notifications/user\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching user notifications:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a notification\r\nexport const createNotification = async (notificationData) => {\r\n  try {\r\n    const response = await api.post(\"/notifications\", notificationData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating notification:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a notification for all users\r\nexport const createGlobalNotification = async (message) => {\r\n  try {\r\n    const response = await api.post(\"/notifications/global\", { message });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating global notification:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a notification for users of a specific roadmap\r\nexport const createRoadmapNotification = async (roadmapId, message) => {\r\n  try {\r\n    const response = await api.post(`/notifications/roadmap/${roadmapId}`, {\r\n      message,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating roadmap notification:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mark notification as read\r\nexport const markAsRead = async (id) => {\r\n  try {\r\n    const response = await api.put(`/notifications/${id}/read`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error marking notification as read:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete notification\r\nexport const deleteNotification = async (id) => {\r\n  try {\r\n    const response = await api.delete(`/notifications/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error deleting notification:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get notification stats\r\nexport const getNotificationStats = async () => {\r\n  try {\r\n    const response = await api.get(\"/notifications/stats\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching notification stats:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}