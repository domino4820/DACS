{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\CyberPath\\\\it-roadmap\\\\client\\\\src\\\\components\\\\RoadmapView.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, Panel, ReactFlowProvider, useReactFlow, MarkerType, Connection } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport { PlusCircle, Save, Trash, Plus, X, Link as LinkIcon, LinkOff, Palette } from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  courseNode: CourseNode\n};\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave\n}) {\n  _s();\n  const {\n    toast\n  } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    if (initialNodes.length > 0) {\n      setNodes(initialNodes.map(node => ({\n        ...node,\n        type: \"courseNode\",\n        data: {\n          ...node.data,\n          showQuickToggle: true,\n          onQuickToggle: handleCompleteToggle\n        }\n      })));\n    }\n    if (initialEdges.length > 0) {\n      setEdges(initialEdges);\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack(prev => [...prev, {\n      nodes: [...nodes],\n      edges: [...edges]\n    }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n  const onConnect = useCallback(params => {\n    saveCurrentState();\n    // Add marker and apply current edge style settings\n    const newEdge = {\n      ...params,\n      id: `edge-${Date.now()}`,\n      type: \"smoothstep\",\n      animated: true,\n      style: {\n        stroke: \"#6d28d9\"\n      },\n      // Only add marker if connection type is arrow\n      ...(connectionType === \"arrow\" && {\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          width: 20,\n          height: 20,\n          color: \"#6d28d9\"\n        }\n      }),\n      data: {\n        connectionType\n      }\n    };\n    setEdges(eds => addEdge(newEdge, eds));\n    toast({\n      title: \"Connection added\",\n      description: \"A new connection has been created between nodes\"\n    });\n  }, [setEdges, saveCurrentState, toast, connectionType]);\n  const onNodeClick = useCallback((event, node) => {\n    event.stopPropagation();\n    if (editMode === \"delete\") {\n      // Delete mode: remove the node\n      saveCurrentState();\n      setNodes(nodes.filter(n => n.id !== node.id));\n      // Also remove any connected edges\n      setEdges(edges.filter(e => e.source !== node.id && e.target !== node.id));\n      toast({\n        title: \"Node deleted\",\n        description: `${node.data.label} has been removed from the roadmap`\n      });\n    } else if (editMode === \"connect\" && selectedNode) {\n      // Connect mode: create an edge between selectedNode and this node\n      if (selectedNode.id !== node.id) {\n        const newEdge = {\n          id: `edge-${Date.now()}`,\n          source: selectedNode.id,\n          target: node.id,\n          type: \"smoothstep\",\n          animated: true,\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        };\n        saveCurrentState();\n        setEdges(eds => [...eds, newEdge]);\n        setSelectedNode(null);\n        setEditMode(\"select\");\n        toast({\n          title: \"Connection created\",\n          description: `Connected ${selectedNode.data.label} to ${node.data.label}`\n        });\n      }\n    } else if (editMode === \"select\") {\n      // Regular select mode: show node details\n      setSelectedNode(node);\n    }\n  }, [editMode, selectedNode, nodes, edges, setNodes, setEdges, saveCurrentState, toast]);\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\"\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n  const handleCompleteToggle = useCallback((nodeId, completed) => {\n    var _nodes$find;\n    if (readOnly) return;\n\n    // Get the current timestamp\n    const completedAt = completed ? new Date().toISOString() : null;\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            completed,\n            completedAt\n          }\n        };\n      }\n      return node;\n    }));\n    toast({\n      title: completed ? \"Course marked as completed\" : \"Course marked as incomplete\",\n      description: `You've ${completed ? \"completed\" : \"unmarked\"} ${(_nodes$find = nodes.find(n => n.id === nodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.label}`\n    });\n  }, [nodes, setNodes, toast, readOnly]);\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"Saving roadmap nodes:\", nodes);\n      console.log(\"Saving roadmap edges:\", edges);\n\n      // Đảm bảo không có node nào bị thiếu dữ liệu quan trọng\n      const cleanedNodes = nodes.map(node => {\n        var _node$data;\n        if (!node.id) {\n          console.error(\"Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        }\n        if (!node.position) {\n          console.error(\"Node missing position:\", node);\n          // Default position\n          node.position = {\n            x: 0,\n            y: 0\n          };\n        }\n        if (!node.data) {\n          console.error(\"Node missing data:\", node);\n          // Default minimal data\n          node.data = {\n            label: \"Node \" + node.id\n          };\n        }\n\n        // Đảm bảo node có đủ thông tin cần thiết\n        return {\n          ...node,\n          type: node.type || \"courseNode\",\n          // Loại node mặc định\n          data: {\n            ...(node.data || {}),\n            id: node.id,\n            // Đảm bảo ID trong data giống với ID của node\n            label: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.label) || \"Untitled\" // Ít nhất phải có nhãn\n          }\n        };\n      });\n\n      // Đảm bảo các edge có đủ thông tin cần thiết\n      const cleanedEdges = edges.map(edge => {\n        if (!edge.source || !edge.target) {\n          console.error(\"Edge missing source or target:\", edge);\n          return null; // Skip invalid edges\n        }\n        if (!edge.id) {\n          console.error(\"Edge missing ID:\", edge);\n          // Generate a unique ID if missing\n          edge.id = `edge_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        }\n        return {\n          ...edge,\n          type: edge.type || \"smoothstep\" // Loại edge mặc định\n        };\n      }).filter(Boolean); // Lọc bỏ các edge null\n\n      console.log(\"Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"Cleaned edges for saving:\", cleanedEdges.length);\n\n      // Thông báo cho người dùng\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`\n      });\n\n      // Gọi hàm callback onSave để lưu dữ liệu\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\"\n      });\n    }\n  }, [nodes, edges, onSave, toast]);\n  const handleAddCourse = useCallback(courseData => {\n    saveCurrentState();\n\n    // Find a position that doesn't overlap with existing nodes\n    let position = {\n      x: 100,\n      y: 100\n    };\n\n    // If we have a reactFlowInstance, try to center the new node in the viewport\n    if (reactFlowInstance) {\n      const {\n        x,\n        y,\n        zoom\n      } = reactFlowInstance.getViewport();\n      position = reactFlowInstance.screenToFlowPosition({\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      });\n\n      // Avoid overlapping with existing nodes by adding some offset\n      const existingPositions = nodes.map(node => node.position);\n      if (existingPositions.some(pos => Math.abs(pos.x - position.x) < 100 && Math.abs(pos.y - position.y) < 100)) {\n        position.x += 150;\n        position.y += 50;\n      }\n    }\n    const newNodeId = `node-${Date.now()}`;\n    const newNode = {\n      id: newNodeId,\n      type: \"courseNode\",\n      position,\n      data: {\n        ...courseData,\n        completed: false,\n        completedAt: null,\n        showQuickToggle: true,\n        onQuickToggle: handleCompleteToggle,\n        id: newNodeId\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setIsAddCourseOpen(false);\n    toast({\n      title: \"Course added\",\n      description: `${courseData.label} has been added to the roadmap`\n    });\n  }, [setNodes, toast, reactFlowInstance, nodes, handleCompleteToggle, saveCurrentState]);\n  const handleDeleteNode = useCallback(nodeId => {\n    saveCurrentState();\n\n    // Remove the node\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n    // Remove connected edges\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n    setSelectedNode(null);\n    toast({\n      title: \"Node deleted\",\n      description: \"The node has been removed from the roadmap\"\n    });\n  }, [setNodes, setEdges, toast, saveCurrentState]);\n  const handleUpdateNodeStyle = useCallback((nodeId, style) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            ...style\n          }\n        };\n      }\n      return node;\n    }));\n  }, [setNodes]);\n  const onEdgeClick = useCallback((event, edge) => {\n    if (editMode === \"delete\") {\n      saveCurrentState();\n\n      // Delete the edge\n      setEdges(eds => eds.filter(e => e.id !== edge.id));\n      toast({\n        title: \"Connection removed\",\n        description: \"The connection between nodes has been removed\"\n      });\n    }\n  }, [setEdges, editMode, saveCurrentState, toast]);\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const previousState = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, currentState]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const nextState = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, currentState]);\n    setRedoStack(prev => prev.slice(0, -1));\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(node => {\n      var _node$data$category;\n      return ((_node$data$category = node.data.category) === null || _node$data$category === void 0 ? void 0 : _node$data$category.toLowerCase()) === selectedCategory.toLowerCase();\n    });\n  }, [nodes, selectedCategory]);\n  const handleStyleChange = useCallback(styles => {\n    // Apply styles to selected node or default edge options\n    if (selectedNode) {\n      handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n    }\n\n    // Update default edge options\n    // (would be implemented in a full version)\n  }, [selectedNode, handleUpdateNodeStyle]);\n  const handleConnectionTypeChange = useCallback(type => {\n    setConnectionType(type);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    className: \"h-full w-full\",\n    children: [isEditing && showEditorPanel && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"right\",\n      className: \"w-72 mr-2\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapEditorPanel, {\n        onStyleChange: handleStyleChange,\n        onConnectionTypeChange: handleConnectionTypeChange,\n        activeEdgeStyle: connectionType,\n        editMode: editMode,\n        onEditModeChange: mode => {\n          setEditMode(mode);\n          if (mode === \"connect\") {\n            toast({\n              title: \"Connect mode\",\n              description: \"Click on a source node, then click on a target node to create a connection\"\n            });\n          } else if (mode === \"delete\") {\n            toast({\n              title: \"Delete mode\",\n              description: \"Click on a node or connection to delete it\"\n            });\n          }\n        },\n        onAddNodeClick: () => setIsAddCourseOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 9\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"top-right\",\n      className: \"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2 justify-end\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n          onClick: handleUndo,\n          disabled: undoStack.length === 0,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n          onClick: handleRedo,\n          disabled: redoStack.length === 0,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"bg-purple-600 hover:bg-purple-700 text-white\",\n          size: \"sm\",\n          onClick: handleSaveRoadmap,\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            className: \"h-4 w-4 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this), \" Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: filteredNodes(),\n        edges: edges,\n        onNodesChange: isEditing ? onNodesChange : undefined,\n        onEdgesChange: isEditing ? onEdgesChange : undefined,\n        onConnect: isEditing ? onConnect : undefined,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        onPaneClick: onPaneClick,\n        nodeTypes: nodeTypes,\n        onNodeDragStop: onNodeDragStop,\n        nodesDraggable: isEditing,\n        nodesConnectable: isEditing && editMode === \"connect\",\n        elementsSelectable: !readOnly,\n        defaultEdgeOptions: {\n          type: \"smoothstep\",\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          animated: true,\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        },\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 12,\n          size: 1,\n          color: \"#6d28d9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(CourseInfoPanel, {\n      node: selectedNode,\n      onClose: () => setSelectedNode(null),\n      onCompleteToggle: handleCompleteToggle,\n      onDelete: isEditing ? handleDeleteNode : undefined,\n      onUpdateStyle: handleUpdateNodeStyle,\n      isAdmin: isEditing,\n      readOnly: readOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 9\n    }, this), isAddCourseOpen && /*#__PURE__*/_jsxDEV(AddCourseDialog, {\n      open: isAddCourseOpen,\n      onClose: () => setIsAddCourseOpen(false),\n      onAdd: handleAddCourse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 513,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapViewInner, \"E28ItxuwqequvfazQ6hW7hpluxA=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow];\n});\n_c = RoadmapViewInner;\nexport default function RoadmapView(props) {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(RoadmapViewInner, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 638,\n    columnNumber: 5\n  }, this);\n}\n_c2 = RoadmapView;\nvar _c, _c2;\n$RefreshReg$(_c, \"RoadmapViewInner\");\n$RefreshReg$(_c2, \"RoadmapView\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useCallback","useEffect","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","Palette","CourseNode","CourseInfoPanel","AddCourseDialog","RoadmapEditorPanel","jsxDEV","_jsxDEV","nodeTypes","courseNode","RoadmapViewInner","id","initialNodes","initialEdges","isEditing","readOnly","onSave","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","connectionType","setConnectionType","showEditorPanel","setShowEditorPanel","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","length","map","node","type","data","showQuickToggle","onQuickToggle","handleCompleteToggle","saveCurrentState","prev","onConnect","params","newEdge","Date","now","animated","style","stroke","markerEnd","ArrowClosed","width","height","color","eds","title","description","onNodeClick","event","stopPropagation","filter","n","e","source","target","label","onPaneClick","nodeId","completed","_nodes$find","completedAt","toISOString","nds","find","handleSaveRoadmap","console","log","cleanedNodes","_node$data","error","Math","random","toString","substring","position","x","y","cleanedEdges","edge","Boolean","warn","variant","handleAddCourse","courseData","zoom","getViewport","screenToFlowPosition","window","innerWidth","innerHeight","existingPositions","some","pos","abs","newNodeId","newNode","handleDeleteNode","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","handleStyleChange","styles","nodeStyle","handleConnectionTypeChange","ref","className","children","onStyleChange","onConnectionTypeChange","activeEdgeStyle","onEditModeChange","mode","onAddNodeClick","fileName","lineNumber","columnNumber","size","onClick","disabled","undefined","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitView","gap","onClose","onCompleteToggle","onDelete","onUpdateStyle","isAdmin","open","onAdd","_c","RoadmapView","props","_c2","$RefreshReg$"],"sources":["D:/CyberPath/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Panel,\n  ReactFlowProvider,\n  useReactFlow,\n  MarkerType,\n  Connection,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport {\n  PlusCircle,\n  Save,\n  Trash,\n  Plus,\n  X,\n  Link as LinkIcon,\n  LinkOff,\n  Palette,\n} from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\n\nconst nodeTypes = {\n  courseNode: CourseNode,\n};\n\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n}) {\n  const { toast } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    if (initialNodes.length > 0) {\n      setNodes(\n        initialNodes.map((node) => ({\n          ...node,\n          type: \"courseNode\",\n          data: {\n            ...node.data,\n            showQuickToggle: true,\n            onQuickToggle: handleCompleteToggle,\n          },\n        }))\n      );\n    }\n    if (initialEdges.length > 0) {\n      setEdges(initialEdges);\n    }\n  }, [initialNodes, initialEdges, setNodes, setEdges]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack((prev) => [...prev, { nodes: [...nodes], edges: [...edges] }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n\n  const onConnect = useCallback(\n    (params) => {\n      saveCurrentState();\n      // Add marker and apply current edge style settings\n      const newEdge = {\n        ...params,\n        id: `edge-${Date.now()}`,\n        type: \"smoothstep\",\n        animated: true,\n        style: { stroke: \"#6d28d9\" },\n        // Only add marker if connection type is arrow\n        ...(connectionType === \"arrow\" && {\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20,\n            color: \"#6d28d9\",\n          },\n        }),\n        data: {\n          connectionType,\n        },\n      };\n      setEdges((eds) => addEdge(newEdge, eds));\n\n      toast({\n        title: \"Connection added\",\n        description: \"A new connection has been created between nodes\",\n      });\n    },\n    [setEdges, saveCurrentState, toast, connectionType]\n  );\n\n  const onNodeClick = useCallback(\n    (event, node) => {\n      event.stopPropagation();\n\n      if (editMode === \"delete\") {\n        // Delete mode: remove the node\n        saveCurrentState();\n        setNodes(nodes.filter((n) => n.id !== node.id));\n        // Also remove any connected edges\n        setEdges(\n          edges.filter((e) => e.source !== node.id && e.target !== node.id)\n        );\n\n        toast({\n          title: \"Node deleted\",\n          description: `${node.data.label} has been removed from the roadmap`,\n        });\n      } else if (editMode === \"connect\" && selectedNode) {\n        // Connect mode: create an edge between selectedNode and this node\n        if (selectedNode.id !== node.id) {\n          const newEdge = {\n            id: `edge-${Date.now()}`,\n            source: selectedNode.id,\n            target: node.id,\n            type: \"smoothstep\",\n            animated: true,\n            style: { stroke: \"#6d28d9\" },\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          };\n\n          saveCurrentState();\n          setEdges((eds) => [...eds, newEdge]);\n          setSelectedNode(null);\n          setEditMode(\"select\");\n\n          toast({\n            title: \"Connection created\",\n            description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\n          });\n        }\n      } else if (editMode === \"select\") {\n        // Regular select mode: show node details\n        setSelectedNode(node);\n      }\n    },\n    [\n      editMode,\n      selectedNode,\n      nodes,\n      edges,\n      setNodes,\n      setEdges,\n      saveCurrentState,\n      toast,\n    ]\n  );\n\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\",\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n\n  const handleCompleteToggle = useCallback(\n    (nodeId, completed) => {\n      if (readOnly) return;\n\n      // Get the current timestamp\n      const completedAt = completed ? new Date().toISOString() : null;\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                completed,\n                completedAt,\n              },\n            };\n          }\n          return node;\n        })\n      );\n\n      toast({\n        title: completed\n          ? \"Course marked as completed\"\n          : \"Course marked as incomplete\",\n        description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\n          nodes.find((n) => n.id === nodeId)?.data.label\n        }`,\n      });\n    },\n    [nodes, setNodes, toast, readOnly]\n  );\n\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"Saving roadmap nodes:\", nodes);\n      console.log(\"Saving roadmap edges:\", edges);\n\n      // Đảm bảo không có node nào bị thiếu dữ liệu quan trọng\n      const cleanedNodes = nodes.map((node) => {\n        if (!node.id) {\n          console.error(\"Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random()\n            .toString(36)\n            .substring(2, 9)}`;\n        }\n\n        if (!node.position) {\n          console.error(\"Node missing position:\", node);\n          // Default position\n          node.position = { x: 0, y: 0 };\n        }\n\n        if (!node.data) {\n          console.error(\"Node missing data:\", node);\n          // Default minimal data\n          node.data = { label: \"Node \" + node.id };\n        }\n\n        // Đảm bảo node có đủ thông tin cần thiết\n        return {\n          ...node,\n          type: node.type || \"courseNode\", // Loại node mặc định\n          data: {\n            ...(node.data || {}),\n            id: node.id, // Đảm bảo ID trong data giống với ID của node\n            label: node.data?.label || \"Untitled\", // Ít nhất phải có nhãn\n          },\n        };\n      });\n\n      // Đảm bảo các edge có đủ thông tin cần thiết\n      const cleanedEdges = edges\n        .map((edge) => {\n          if (!edge.source || !edge.target) {\n            console.error(\"Edge missing source or target:\", edge);\n            return null; // Skip invalid edges\n          }\n\n          if (!edge.id) {\n            console.error(\"Edge missing ID:\", edge);\n            // Generate a unique ID if missing\n            edge.id = `edge_${Date.now()}_${Math.random()\n              .toString(36)\n              .substring(2, 9)}`;\n          }\n\n          return {\n            ...edge,\n            type: edge.type || \"smoothstep\", // Loại edge mặc định\n          };\n        })\n        .filter(Boolean); // Lọc bỏ các edge null\n\n      console.log(\"Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"Cleaned edges for saving:\", cleanedEdges.length);\n\n      // Thông báo cho người dùng\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`,\n      });\n\n      // Gọi hàm callback onSave để lưu dữ liệu\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\",\n      });\n    }\n  }, [nodes, edges, onSave, toast]);\n\n  const handleAddCourse = useCallback(\n    (courseData) => {\n      saveCurrentState();\n\n      // Find a position that doesn't overlap with existing nodes\n      let position = { x: 100, y: 100 };\n\n      // If we have a reactFlowInstance, try to center the new node in the viewport\n      if (reactFlowInstance) {\n        const { x, y, zoom } = reactFlowInstance.getViewport();\n        position = reactFlowInstance.screenToFlowPosition({\n          x: window.innerWidth / 2,\n          y: window.innerHeight / 2,\n        });\n\n        // Avoid overlapping with existing nodes by adding some offset\n        const existingPositions = nodes.map((node) => node.position);\n        if (\n          existingPositions.some(\n            (pos) =>\n              Math.abs(pos.x - position.x) < 100 &&\n              Math.abs(pos.y - position.y) < 100\n          )\n        ) {\n          position.x += 150;\n          position.y += 50;\n        }\n      }\n\n      const newNodeId = `node-${Date.now()}`;\n      const newNode = {\n        id: newNodeId,\n        type: \"courseNode\",\n        position,\n        data: {\n          ...courseData,\n          completed: false,\n          completedAt: null,\n          showQuickToggle: true,\n          onQuickToggle: handleCompleteToggle,\n          id: newNodeId,\n        },\n      };\n\n      setNodes((nds) => [...nds, newNode]);\n      setIsAddCourseOpen(false);\n\n      toast({\n        title: \"Course added\",\n        description: `${courseData.label} has been added to the roadmap`,\n      });\n    },\n    [\n      setNodes,\n      toast,\n      reactFlowInstance,\n      nodes,\n      handleCompleteToggle,\n      saveCurrentState,\n    ]\n  );\n\n  const handleDeleteNode = useCallback(\n    (nodeId) => {\n      saveCurrentState();\n\n      // Remove the node\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId));\n      // Remove connected edges\n      setEdges((eds) =>\n        eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\n      );\n\n      setSelectedNode(null);\n\n      toast({\n        title: \"Node deleted\",\n        description: \"The node has been removed from the roadmap\",\n      });\n    },\n    [setNodes, setEdges, toast, saveCurrentState]\n  );\n\n  const handleUpdateNodeStyle = useCallback(\n    (nodeId, style) => {\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                ...style,\n              },\n            };\n          }\n          return node;\n        })\n      );\n    },\n    [setNodes]\n  );\n\n  const onEdgeClick = useCallback(\n    (event, edge) => {\n      if (editMode === \"delete\") {\n        saveCurrentState();\n\n        // Delete the edge\n        setEdges((eds) => eds.filter((e) => e.id !== edge.id));\n\n        toast({\n          title: \"Connection removed\",\n          description: \"The connection between nodes has been removed\",\n        });\n      }\n    },\n    [setEdges, editMode, saveCurrentState, toast]\n  );\n\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const previousState = undoStack[undoStack.length - 1];\n\n    setRedoStack((prev) => [...prev, currentState]);\n    setUndoStack((prev) => prev.slice(0, -1));\n\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const nextState = redoStack[redoStack.length - 1];\n\n    setUndoStack((prev) => [...prev, currentState]);\n    setRedoStack((prev) => prev.slice(0, -1));\n\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(\n      (node) =>\n        node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\n    );\n  }, [nodes, selectedCategory]);\n\n  const handleStyleChange = useCallback(\n    (styles) => {\n      // Apply styles to selected node or default edge options\n      if (selectedNode) {\n        handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n      }\n\n      // Update default edge options\n      // (would be implemented in a full version)\n    },\n    [selectedNode, handleUpdateNodeStyle]\n  );\n\n  const handleConnectionTypeChange = useCallback((type) => {\n    setConnectionType(type);\n  }, []);\n\n  return (\n    <div ref={reactFlowWrapper} className=\"h-full w-full\">\n      {isEditing && showEditorPanel && (\n        <Panel position=\"right\" className=\"w-72 mr-2\">\n          <RoadmapEditorPanel\n            onStyleChange={handleStyleChange}\n            onConnectionTypeChange={handleConnectionTypeChange}\n            activeEdgeStyle={connectionType}\n            editMode={editMode}\n            onEditModeChange={(mode) => {\n              setEditMode(mode);\n              if (mode === \"connect\") {\n                toast({\n                  title: \"Connect mode\",\n                  description:\n                    \"Click on a source node, then click on a target node to create a connection\",\n                });\n              } else if (mode === \"delete\") {\n                toast({\n                  title: \"Delete mode\",\n                  description: \"Click on a node or connection to delete it\",\n                });\n              }\n            }}\n            onAddNodeClick={() => setIsAddCourseOpen(true)}\n          />\n        </Panel>\n      )}\n\n      {isEditing && (\n        <Panel\n          position=\"top-right\"\n          className=\"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\"\n        >\n          <div className=\"flex gap-2 justify-end\">\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleUndo}\n              disabled={undoStack.length === 0}\n            >\n              Undo\n            </Button>\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleRedo}\n              disabled={redoStack.length === 0}\n            >\n              Redo\n            </Button>\n            <Button\n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n              size=\"sm\"\n              onClick={handleSaveRoadmap}\n            >\n              <Save className=\"h-4 w-4 mr-1\" /> Save\n            </Button>\n          </div>\n        </Panel>\n      )}\n\n      <div className=\"h-full\">\n        <ReactFlow\n          nodes={filteredNodes()}\n          edges={edges}\n          onNodesChange={isEditing ? onNodesChange : undefined}\n          onEdgesChange={isEditing ? onEdgesChange : undefined}\n          onConnect={isEditing ? onConnect : undefined}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          onPaneClick={onPaneClick}\n          nodeTypes={nodeTypes}\n          onNodeDragStop={onNodeDragStop}\n          nodesDraggable={isEditing}\n          nodesConnectable={isEditing && editMode === \"connect\"}\n          elementsSelectable={!readOnly}\n          defaultEdgeOptions={{\n            type: \"smoothstep\",\n            style: { stroke: \"#6d28d9\" },\n            animated: true,\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          }}\n          fitView\n        >\n          <Controls />\n          <MiniMap />\n          <Background variant=\"dots\" gap={12} size={1} color=\"#6d28d9\" />\n        </ReactFlow>\n      </div>\n\n      {selectedNode && (\n        <CourseInfoPanel\n          node={selectedNode}\n          onClose={() => setSelectedNode(null)}\n          onCompleteToggle={handleCompleteToggle}\n          onDelete={isEditing ? handleDeleteNode : undefined}\n          onUpdateStyle={handleUpdateNodeStyle}\n          isAdmin={isEditing}\n          readOnly={readOnly}\n        />\n      )}\n\n      {isAddCourseOpen && (\n        <AddCourseDialog\n          open={isAddCourseOpen}\n          onClose={() => setIsAddCourseOpen(false)}\n          onAdd={handleAddCourse}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function RoadmapView(props) {\n  return (\n    <ReactFlowProvider>\n      <RoadmapViewInner {...props} />\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}