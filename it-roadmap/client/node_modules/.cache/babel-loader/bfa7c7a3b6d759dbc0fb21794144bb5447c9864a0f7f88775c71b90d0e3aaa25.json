{"ast":null,"code":"\"use client\";import{createContext,useContext,useState,useEffect}from\"react\";import api from\"../services/api\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[devMode,setDevMode]=useState(false);// Track if we're using dev mode auth\n// Load user from local storage on app start\nuseEffect(()=>{const loadUser=async()=>{try{// Check if token exists\nconst token=localStorage.getItem(\"token\");if(!token){setLoading(false);return;}// Get current user\nconst response=await api.get(\"/auth/me\");setUser(response.data);}catch(err){console.error(\"Error loading user:\",err);setError(err.message);// Clear invalid token\nlocalStorage.removeItem(\"token\");}finally{setLoading(false);}};// Check if we're already using dev mode\nconst isDevMode=localStorage.getItem(\"devMode\")===\"true\";setDevMode(isDevMode);// If in dev mode, don't try to load user from API\nif(isDevMode){const storedUser=JSON.parse(localStorage.getItem(\"devModeUser\"));if(storedUser){setUser(storedUser);}setLoading(false);}else{loadUser();}},[]);const login=async credentials=>{// If we're in dev mode, handle mock login\nif(devMode){const mockUser={id:Math.floor(Math.random()*1000),username:credentials.email.split(\"@\")[0],email:credentials.email,isAdmin:credentials.email.includes(\"admin\")};setUser(mockUser);localStorage.setItem(\"devModeUser\",JSON.stringify(mockUser));return{user:mockUser,token:\"dev-mode-token\"};}// Real login\ntry{// Simplify login flow - use only one endpoint\nconst response=await api.post(\"/users/login\",credentials);// Save token to localStorage\nif(response.data.token){localStorage.setItem(\"token\",response.data.token);// Set default authorization header for Axios\napi.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(response.data.token);}setUser(response.data.user);return response.data;}catch(err){var _err$response,_err$response$data;const errorMessage=((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||\"Login failed\";setError(errorMessage);throw new Error(errorMessage);}};const register=async userData=>{// If we're in dev mode, handle mock registration\nif(devMode){const mockUser={id:Math.floor(Math.random()*1000),username:userData.username,email:userData.email,isAdmin:userData.email.includes(\"admin\")};setUser(mockUser);localStorage.setItem(\"devModeUser\",JSON.stringify(mockUser));return{user:mockUser,token:\"dev-mode-token\"};}// Real registration\ntry{const response=await api.post(\"/auth/register\",userData);// Save token to localStorage\nif(response.data.token){localStorage.setItem(\"token\",response.data.token);// Set default authorization header for Axios\napi.defaults.headers.common[\"Authorization\"]=\"Bearer \".concat(response.data.token);}setUser(response.data.user);return response.data;}catch(err){var _err$response2,_err$response2$data;const errorMessage=((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||\"Registration failed\";setError(errorMessage);throw new Error(errorMessage);}};const logout=()=>{localStorage.removeItem(\"token\");// If in dev mode, also clear dev mode user\nif(devMode){localStorage.removeItem(\"devModeUser\");}delete api.defaults.headers.common[\"Authorization\"];setUser(null);};// Toggle development mode - only for development!\nconst toggleDevMode=()=>{if(process.env.NODE_ENV!==\"development\")return;const newDevMode=!devMode;setDevMode(newDevMode);if(newDevMode){localStorage.setItem(\"devMode\",\"true\");}else{localStorage.removeItem(\"devMode\");localStorage.removeItem(\"devModeUser\");}// Clear current user when switching modes\nsetUser(null);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,error,isAuthenticated:!!user,isAdmin:(user===null||user===void 0?void 0:user.isAdmin)||false,devMode,login,register,logout,toggleDevMode},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["createContext","useContext","useState","useEffect","api","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","error","setError","devMode","setDevMode","loadUser","token","localStorage","getItem","response","get","data","err","console","message","removeItem","isDevMode","storedUser","JSON","parse","login","credentials","mockUser","id","Math","floor","random","username","email","split","isAdmin","includes","setItem","stringify","post","defaults","headers","common","concat","_err$response","_err$response$data","errorMessage","Error","register","userData","_err$response2","_err$response2$data","logout","toggleDevMode","process","env","NODE_ENV","newDevMode","Provider","value","isAuthenticated","useAuth"],"sources":["D:/CyberPath/it-roadmap/client/src/context/AuthContext.jsx"],"sourcesContent":["\"use client\";\n\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport api from \"../services/api\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [devMode, setDevMode] = useState(false); // Track if we're using dev mode auth\n\n  // Load user from local storage on app start\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        // Check if token exists\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          setLoading(false);\n          return;\n        }\n\n        // Get current user\n        const response = await api.get(\"/auth/me\");\n        setUser(response.data);\n      } catch (err) {\n        console.error(\"Error loading user:\", err);\n        setError(err.message);\n        // Clear invalid token\n        localStorage.removeItem(\"token\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Check if we're already using dev mode\n    const isDevMode = localStorage.getItem(\"devMode\") === \"true\";\n    setDevMode(isDevMode);\n\n    // If in dev mode, don't try to load user from API\n    if (isDevMode) {\n      const storedUser = JSON.parse(localStorage.getItem(\"devModeUser\"));\n      if (storedUser) {\n        setUser(storedUser);\n      }\n      setLoading(false);\n    } else {\n      loadUser();\n    }\n  }, []);\n\n  const login = async (credentials) => {\n    // If we're in dev mode, handle mock login\n    if (devMode) {\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        username: credentials.email.split(\"@\")[0],\n        email: credentials.email,\n        isAdmin: credentials.email.includes(\"admin\"),\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\n      return { user: mockUser, token: \"dev-mode-token\" };\n    }\n\n    // Real login\n    try {\n      // Simplify login flow - use only one endpoint\n      const response = await api.post(\"/users/login\", credentials);\n\n      // Save token to localStorage\n      if (response.data.token) {\n        localStorage.setItem(\"token\", response.data.token);\n        // Set default authorization header for Axios\n        api.defaults.headers.common[\n          \"Authorization\"\n        ] = `Bearer ${response.data.token}`;\n      }\n\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || \"Login failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const register = async (userData) => {\n    // If we're in dev mode, handle mock registration\n    if (devMode) {\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        username: userData.username,\n        email: userData.email,\n        isAdmin: userData.email.includes(\"admin\"),\n      };\n      setUser(mockUser);\n      localStorage.setItem(\"devModeUser\", JSON.stringify(mockUser));\n      return { user: mockUser, token: \"dev-mode-token\" };\n    }\n\n    // Real registration\n    try {\n      const response = await api.post(\"/auth/register\", userData);\n\n      // Save token to localStorage\n      if (response.data.token) {\n        localStorage.setItem(\"token\", response.data.token);\n        // Set default authorization header for Axios\n        api.defaults.headers.common[\n          \"Authorization\"\n        ] = `Bearer ${response.data.token}`;\n      }\n\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || \"Registration failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n\n    // If in dev mode, also clear dev mode user\n    if (devMode) {\n      localStorage.removeItem(\"devModeUser\");\n    }\n\n    delete api.defaults.headers.common[\"Authorization\"];\n    setUser(null);\n  };\n\n  // Toggle development mode - only for development!\n  const toggleDevMode = () => {\n    if (process.env.NODE_ENV !== \"development\") return;\n\n    const newDevMode = !devMode;\n    setDevMode(newDevMode);\n\n    if (newDevMode) {\n      localStorage.setItem(\"devMode\", \"true\");\n    } else {\n      localStorage.removeItem(\"devMode\");\n      localStorage.removeItem(\"devModeUser\");\n    }\n\n    // Clear current user when switching modes\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        isAuthenticated: !!user,\n        isAdmin: user?.isAdmin || false,\n        devMode,\n        login,\n        register,\n        logout,\n        toggleDevMode,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}