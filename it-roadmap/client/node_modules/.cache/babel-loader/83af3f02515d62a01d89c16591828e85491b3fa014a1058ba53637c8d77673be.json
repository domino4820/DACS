{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\CyberPath\\\\it-roadmap\\\\client\\\\src\\\\components\\\\RoadmapView.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, Panel, ReactFlowProvider, useReactFlow, MarkerType, Connection } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport { PlusCircle, Save, Trash, Plus, X, Link as LinkIcon, LinkOff, Palette } from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  courseNode: CourseNode\n};\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate\n}) {\n  _s();\n  const {\n    toast\n  } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    let isFirstRender = true;\n    const updateInitialData = () => {\n      // Chỉ cập nhật nếu dữ liệu từ props thực sự thay đổi và khác rỗng\n      if ((initialNodes === null || initialNodes === void 0 ? void 0 : initialNodes.length) > 0 && (isFirstRender || JSON.stringify(initialNodes) !== JSON.stringify(nodes.map(n => ({\n        ...n,\n        data: {\n          ...n.data\n        }\n      }))))) {\n        console.log(`[FLOW] Setting initial nodes once: ${initialNodes.length}`);\n\n        // Clone sâu để tránh tham chiếu\n        const processedNodes = initialNodes.map(node => ({\n          ...node,\n          type: \"courseNode\",\n          data: {\n            ...node.data,\n            showQuickToggle: true,\n            onQuickToggle: handleCompleteToggle\n          }\n        }));\n        setNodes(processedNodes);\n      }\n      if ((initialEdges === null || initialEdges === void 0 ? void 0 : initialEdges.length) > 0 && (isFirstRender || JSON.stringify(initialEdges) !== JSON.stringify(edges))) {\n        console.log(`[FLOW] Setting initial edges once: ${initialEdges.length}`);\n        setEdges([...initialEdges]);\n      }\n      isFirstRender = false;\n    };\n    updateInitialData();\n\n    // Thiết lập cho ResizeObserver\n    const viewportEl = document.querySelector(\".react-flow__viewport\");\n    if (viewportEl) {\n      viewportEl.style.transitionProperty = \"transform\";\n      viewportEl.style.transitionDuration = \"0.2s\";\n    }\n    return () => {\n      // Cleanup nếu cần\n    };\n  }, [initialNodes, initialEdges]);\n\n  // Thêm useEffect để cập nhật ngược lại khi nodes hoặc edges thay đổi nội bộ\n  useEffect(() => {\n    // Tránh gọi ngay khi component vừa được mount và đang xử lý nodes ban đầu\n    const timer = setTimeout(() => {\n      // Chỉ gọi callback khi có sự thay đổi thực sự và nodes không rỗng\n      if ((nodes.length > 0 || edges.length > 0) && typeof onInternalUpdate === \"function\") {\n        console.log(\"[FLOW] Current nodes changed internally:\", nodes.length);\n        console.log(\"[FLOW] Current edges changed internally:\", edges.length);\n        // Đảm bảo parent component luôn có trạng thái mới nhất\n        onInternalUpdate(nodes, edges);\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack(prev => [...prev, {\n      nodes: [...nodes],\n      edges: [...edges]\n    }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n  const onConnect = useCallback(params => {\n    saveCurrentState();\n    // Add marker and apply current edge style settings\n    const newEdge = {\n      ...params,\n      id: `edge-${Date.now()}`,\n      type: \"smoothstep\",\n      animated: true,\n      style: {\n        stroke: \"#6d28d9\"\n      },\n      // Only add marker if connection type is arrow\n      ...(connectionType === \"arrow\" && {\n        markerEnd: {\n          type: MarkerType.ArrowClosed,\n          width: 20,\n          height: 20,\n          color: \"#6d28d9\"\n        }\n      }),\n      data: {\n        connectionType\n      }\n    };\n    setEdges(eds => addEdge(newEdge, eds));\n    toast({\n      title: \"Connection added\",\n      description: \"A new connection has been created between nodes\"\n    });\n  }, [setEdges, saveCurrentState, toast, connectionType]);\n  const onNodeClick = useCallback((event, node) => {\n    event.stopPropagation();\n    if (editMode === \"delete\") {\n      // Delete mode: remove the node\n      saveCurrentState();\n      setNodes(nodes.filter(n => n.id !== node.id));\n      // Also remove any connected edges\n      setEdges(edges.filter(e => e.source !== node.id && e.target !== node.id));\n      toast({\n        title: \"Node deleted\",\n        description: `${node.data.label} has been removed from the roadmap`\n      });\n    } else if (editMode === \"connect\" && selectedNode) {\n      // Connect mode: create an edge between selectedNode and this node\n      if (selectedNode.id !== node.id) {\n        const newEdge = {\n          id: `edge-${Date.now()}`,\n          source: selectedNode.id,\n          target: node.id,\n          type: \"smoothstep\",\n          animated: true,\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        };\n        saveCurrentState();\n        setEdges(eds => [...eds, newEdge]);\n        setSelectedNode(null);\n        setEditMode(\"select\");\n        toast({\n          title: \"Connection created\",\n          description: `Connected ${selectedNode.data.label} to ${node.data.label}`\n        });\n      }\n    } else if (editMode === \"select\") {\n      // Regular select mode: show node details\n      setSelectedNode(node);\n    }\n  }, [editMode, selectedNode, nodes, edges, setNodes, setEdges, saveCurrentState, toast]);\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\"\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n  const handleCompleteToggle = useCallback((nodeId, completed) => {\n    var _nodes$find;\n    if (readOnly) return;\n\n    // Get the current timestamp\n    const completedAt = completed ? new Date().toISOString() : null;\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            completed,\n            completedAt\n          }\n        };\n      }\n      return node;\n    }));\n    toast({\n      title: completed ? \"Course marked as completed\" : \"Course marked as incomplete\",\n      description: `You've ${completed ? \"completed\" : \"unmarked\"} ${(_nodes$find = nodes.find(n => n.id === nodeId)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.data.label}`\n    });\n  }, [nodes, setNodes, toast, readOnly]);\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"[VIEW] Starting roadmap save process\");\n      console.log(\"[VIEW] Current nodes:\", nodes.length);\n      console.log(\"[VIEW] Current edges:\", edges.length);\n\n      // Đảm bảo không có node nào bị thiếu dữ liệu quan trọng\n      const cleanedNodes = nodes.map(node => {\n        var _node$data;\n        if (!node.id) {\n          console.error(\"[VIEW] Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        }\n        if (!node.position) {\n          console.error(\"[VIEW] Node missing position:\", node);\n          // Default position\n          node.position = {\n            x: 0,\n            y: 0\n          };\n        }\n        if (!node.data) {\n          console.error(\"[VIEW] Node missing data:\", node);\n          // Default minimal data\n          node.data = {\n            label: \"Node \" + node.id\n          };\n        }\n\n        // Đảm bảo node có đủ thông tin cần thiết\n        return {\n          ...node,\n          type: node.type || \"courseNode\",\n          // Loại node mặc định\n          data: {\n            ...(node.data || {}),\n            id: node.id,\n            // Đảm bảo ID trong data giống với ID của node\n            label: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.label) || \"Untitled\" // Ít nhất phải có nhãn\n          }\n        };\n      });\n\n      // Đảm bảo các edge có đủ thông tin cần thiết\n      const cleanedEdges = edges.map(edge => {\n        if (!edge.source || !edge.target) {\n          console.error(\"[VIEW] Edge missing source or target:\", edge);\n          return null; // Skip invalid edges\n        }\n        if (!edge.id) {\n          console.error(\"[VIEW] Edge missing ID:\", edge);\n          // Generate a unique ID if missing\n          edge.id = `edge_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        }\n        return {\n          ...edge,\n          type: edge.type || \"smoothstep\" // Loại edge mặc định\n        };\n      }).filter(Boolean); // Lọc bỏ các edge null\n\n      console.log(\"[VIEW] Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"[VIEW] Node data sample:\", cleanedNodes[0]);\n      console.log(\"[VIEW] Cleaned edges for saving:\", cleanedEdges.length);\n      if (cleanedEdges.length > 0) {\n        console.log(\"[VIEW] Edge data sample:\", cleanedEdges[0]);\n      }\n\n      // Thông báo cho người dùng\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`\n      });\n\n      // Lưu dữ liệu vào trạng thái cục bộ\n      setNodes(cleanedNodes);\n      setEdges(cleanedEdges);\n\n      // Gọi hàm callback onSave để lưu dữ liệu\n      console.log(\"[VIEW] Calling onSave with cleaned data\");\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"[VIEW] Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\"\n      });\n    }\n  }, [nodes, edges, onSave, toast, setNodes, setEdges]);\n  const handleAddCourse = useCallback(courseData => {\n    saveCurrentState();\n\n    // Find a position that doesn't overlap with existing nodes\n    let position = {\n      x: 100,\n      y: 100\n    };\n\n    // If we have a reactFlowInstance, try to center the new node in the viewport\n    if (reactFlowInstance) {\n      const {\n        x,\n        y,\n        zoom\n      } = reactFlowInstance.getViewport();\n      position = reactFlowInstance.screenToFlowPosition({\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      });\n\n      // Avoid overlapping with existing nodes by adding some offset\n      const existingPositions = nodes.map(node => node.position);\n      if (existingPositions.some(pos => Math.abs(pos.x - position.x) < 100 && Math.abs(pos.y - position.y) < 100)) {\n        position.x += 150;\n        position.y += 50;\n      }\n    }\n    const newNodeId = `node-${Date.now()}`;\n    const newNode = {\n      id: newNodeId,\n      type: \"courseNode\",\n      position,\n      data: {\n        ...courseData,\n        completed: false,\n        completedAt: null,\n        showQuickToggle: true,\n        onQuickToggle: handleCompleteToggle,\n        id: newNodeId\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setIsAddCourseOpen(false);\n    toast({\n      title: \"Course added\",\n      description: `${courseData.label} has been added to the roadmap`\n    });\n  }, [setNodes, toast, reactFlowInstance, nodes, handleCompleteToggle, saveCurrentState]);\n  const handleDeleteNode = useCallback(nodeId => {\n    saveCurrentState();\n\n    // Remove the node\n    setNodes(nds => nds.filter(node => node.id !== nodeId));\n    // Remove connected edges\n    setEdges(eds => eds.filter(edge => edge.source !== nodeId && edge.target !== nodeId));\n    setSelectedNode(null);\n    toast({\n      title: \"Node deleted\",\n      description: \"The node has been removed from the roadmap\"\n    });\n  }, [setNodes, setEdges, toast, saveCurrentState]);\n  const handleUpdateNodeStyle = useCallback((nodeId, style) => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            ...style\n          }\n        };\n      }\n      return node;\n    }));\n  }, [setNodes]);\n  const onEdgeClick = useCallback((event, edge) => {\n    if (editMode === \"delete\") {\n      saveCurrentState();\n\n      // Delete the edge\n      setEdges(eds => eds.filter(e => e.id !== edge.id));\n      toast({\n        title: \"Connection removed\",\n        description: \"The connection between nodes has been removed\"\n      });\n    }\n  }, [setEdges, editMode, saveCurrentState, toast]);\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const previousState = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [...prev, currentState]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n    const currentState = {\n      nodes: [...nodes],\n      edges: [...edges]\n    };\n    const nextState = redoStack[redoStack.length - 1];\n    setUndoStack(prev => [...prev, currentState]);\n    setRedoStack(prev => prev.slice(0, -1));\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\"\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(node => {\n      var _node$data$category;\n      return ((_node$data$category = node.data.category) === null || _node$data$category === void 0 ? void 0 : _node$data$category.toLowerCase()) === selectedCategory.toLowerCase();\n    });\n  }, [nodes, selectedCategory]);\n  const handleStyleChange = useCallback(styles => {\n    // Apply styles to selected node or default edge options\n    if (selectedNode) {\n      handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n    }\n\n    // Update default edge options\n    // (would be implemented in a full version)\n  }, [selectedNode, handleUpdateNodeStyle]);\n  const handleConnectionTypeChange = useCallback(type => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      const originalError = console.error;\n      console.error = (...args) => {\n        var _args$, _args$$includes, _args$2, _args$2$message, _args$2$message$inclu;\n        if ((_args$ = args[0]) !== null && _args$ !== void 0 && (_args$$includes = _args$.includes) !== null && _args$$includes !== void 0 && _args$$includes.call(_args$, \"ResizeObserver loop\") || (_args$2 = args[0]) !== null && _args$2 !== void 0 && (_args$2$message = _args$2.message) !== null && _args$2$message !== void 0 && (_args$2$message$inclu = _args$2$message.includes) !== null && _args$2$message$inclu !== void 0 && _args$2$message$inclu.call(_args$2$message, \"ResizeObserver loop\")) {\n          // Bỏ qua cảnh báo ResizeObserver\n          return;\n        }\n        originalError.apply(console, args);\n      };\n      return () => {\n        console.error = originalError;\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    className: \"h-full w-full\",\n    children: [isEditing && showEditorPanel && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"right\",\n      className: \"w-72 mr-2\",\n      children: /*#__PURE__*/_jsxDEV(RoadmapEditorPanel, {\n        onStyleChange: handleStyleChange,\n        onConnectionTypeChange: handleConnectionTypeChange,\n        activeEdgeStyle: connectionType,\n        editMode: editMode,\n        onEditModeChange: mode => {\n          setEditMode(mode);\n          if (mode === \"connect\") {\n            toast({\n              title: \"Connect mode\",\n              description: \"Click on a source node, then click on a target node to create a connection\"\n            });\n          } else if (mode === \"delete\") {\n            toast({\n              title: \"Delete mode\",\n              description: \"Click on a node or connection to delete it\"\n            });\n          }\n        },\n        onAddNodeClick: () => setIsAddCourseOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 9\n    }, this), isEditing && /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"top-right\",\n      className: \"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2 justify-end\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n          onClick: handleUndo,\n          disabled: undoStack.length === 0,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          className: \"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\",\n          onClick: handleRedo,\n          disabled: redoStack.length === 0,\n          children: \"Redo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"bg-purple-600 hover:bg-purple-700 text-white\",\n          size: \"sm\",\n          onClick: handleSaveRoadmap,\n          children: [/*#__PURE__*/_jsxDEV(Save, {\n            className: \"h-4 w-4 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 15\n          }, this), \" Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: filteredNodes(),\n        edges: edges,\n        onNodesChange: isEditing ? onNodesChange : undefined,\n        onEdgesChange: isEditing ? onEdgesChange : undefined,\n        onConnect: isEditing ? onConnect : undefined,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        onPaneClick: onPaneClick,\n        nodeTypes: nodeTypes,\n        onNodeDragStop: onNodeDragStop,\n        nodesDraggable: isEditing,\n        nodesConnectable: isEditing && editMode === \"connect\",\n        elementsSelectable: !readOnly,\n        defaultEdgeOptions: {\n          type: \"smoothstep\",\n          style: {\n            stroke: \"#6d28d9\"\n          },\n          animated: true,\n          ...(connectionType === \"arrow\" && {\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: \"#6d28d9\"\n            }\n          }),\n          data: {\n            connectionType\n          }\n        },\n        fitView: true,\n        minZoom: 0.2,\n        maxZoom: 4,\n        snapToGrid: true,\n        snapGrid: [10, 10],\n        nodeExtent: [[-1000, -1000], [2000, 2000]],\n        proOptions: {\n          hideAttribution: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n          nodeStrokeWidth: 3,\n          zoomable: true,\n          pannable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 12,\n          size: 1,\n          color: \"#6d28d9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(CourseInfoPanel, {\n      node: selectedNode,\n      onClose: () => setSelectedNode(null),\n      onCompleteToggle: handleCompleteToggle,\n      onDelete: isEditing ? handleDeleteNode : undefined,\n      onUpdateStyle: handleUpdateNodeStyle,\n      isAdmin: isEditing,\n      readOnly: readOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 9\n    }, this), isAddCourseOpen && /*#__PURE__*/_jsxDEV(AddCourseDialog, {\n      open: isAddCourseOpen,\n      onClose: () => setIsAddCourseOpen(false),\n      onAdd: handleAddCourse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 603,\n    columnNumber: 5\n  }, this);\n}\n_s(RoadmapViewInner, \"475Da5gFVx1/k6+uP9zNIaq5M7k=\", false, function () {\n  return [useToast, useNodesState, useEdgesState, useReactFlow];\n});\n_c = RoadmapViewInner;\nexport default function RoadmapView(props) {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(RoadmapViewInner, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 737,\n    columnNumber: 5\n  }, this);\n}\n_c2 = RoadmapView;\nvar _c, _c2;\n$RefreshReg$(_c, \"RoadmapViewInner\");\n$RefreshReg$(_c2, \"RoadmapView\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useCallback","useEffect","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","Panel","ReactFlowProvider","useReactFlow","MarkerType","Connection","Tabs","TabsList","TabsTrigger","Button","useToast","PlusCircle","Save","Trash","Plus","X","Link","LinkIcon","LinkOff","Palette","CourseNode","CourseInfoPanel","AddCourseDialog","RoadmapEditorPanel","jsxDEV","_jsxDEV","nodeTypes","courseNode","RoadmapViewInner","id","initialNodes","initialEdges","isEditing","readOnly","onSave","onInternalUpdate","toast","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","selectedCategory","setSelectedCategory","isAddCourseOpen","setIsAddCourseOpen","editMode","setEditMode","connectionType","setConnectionType","showEditorPanel","setShowEditorPanel","reactFlowWrapper","reactFlowInstance","undoStack","setUndoStack","redoStack","setRedoStack","isFirstRender","updateInitialData","length","JSON","stringify","map","n","data","console","log","processedNodes","node","type","showQuickToggle","onQuickToggle","handleCompleteToggle","viewportEl","document","querySelector","style","transitionProperty","transitionDuration","timer","setTimeout","clearTimeout","saveCurrentState","prev","onConnect","params","newEdge","Date","now","animated","stroke","markerEnd","ArrowClosed","width","height","color","eds","title","description","onNodeClick","event","stopPropagation","filter","e","source","target","label","onPaneClick","nodeId","completed","_nodes$find","completedAt","toISOString","nds","find","handleSaveRoadmap","cleanedNodes","_node$data","error","Math","random","toString","substring","position","x","y","cleanedEdges","edge","Boolean","warn","variant","handleAddCourse","courseData","zoom","getViewport","screenToFlowPosition","window","innerWidth","innerHeight","existingPositions","some","pos","abs","newNodeId","newNode","handleDeleteNode","handleUpdateNodeStyle","onEdgeClick","handleUndo","currentState","previousState","slice","handleRedo","nextState","onNodeDragStop","filteredNodes","_node$data$category","category","toLowerCase","handleStyleChange","styles","nodeStyle","handleConnectionTypeChange","process","env","NODE_ENV","originalError","args","_args$","_args$$includes","_args$2","_args$2$message","_args$2$message$inclu","includes","call","message","apply","ref","className","children","onStyleChange","onConnectionTypeChange","activeEdgeStyle","onEditModeChange","mode","onAddNodeClick","fileName","lineNumber","columnNumber","size","onClick","disabled","undefined","nodesDraggable","nodesConnectable","elementsSelectable","defaultEdgeOptions","fitView","minZoom","maxZoom","snapToGrid","snapGrid","nodeExtent","proOptions","hideAttribution","nodeStrokeWidth","zoomable","pannable","gap","onClose","onCompleteToggle","onDelete","onUpdateStyle","isAdmin","open","onAdd","_c","RoadmapView","props","_c2","$RefreshReg$"],"sources":["D:/CyberPath/it-roadmap/client/src/components/RoadmapView.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback, useEffect, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Panel,\n  ReactFlowProvider,\n  useReactFlow,\n  MarkerType,\n  Connection,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { Tabs, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"./ui/use-toast\";\nimport {\n  PlusCircle,\n  Save,\n  Trash,\n  Plus,\n  X,\n  Link as LinkIcon,\n  LinkOff,\n  Palette,\n} from \"lucide-react\";\nimport CourseNode from \"./CourseNode\";\nimport CourseInfoPanel from \"./CourseInfoPanel\";\nimport AddCourseDialog from \"./AddCourseDialog\";\nimport RoadmapEditorPanel from \"./RoadmapEditorPanel\";\n\nconst nodeTypes = {\n  courseNode: CourseNode,\n};\n\nfunction RoadmapViewInner({\n  id,\n  initialNodes = [],\n  initialEdges = [],\n  isEditing = false,\n  readOnly = false,\n  onSave,\n  onInternalUpdate,\n}) {\n  const { toast } = useToast();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);\n  const [editMode, setEditMode] = useState(\"select\"); // select, connect, add, delete\n  const [connectionType, setConnectionType] = useState(\"arrow\"); // arrow, none\n  const [showEditorPanel, setShowEditorPanel] = useState(true);\n  const reactFlowWrapper = useRef(null);\n  const reactFlowInstance = useReactFlow();\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n\n  // Set initial nodes and edges when they change\n  useEffect(() => {\n    let isFirstRender = true;\n\n    const updateInitialData = () => {\n      // Chỉ cập nhật nếu dữ liệu từ props thực sự thay đổi và khác rỗng\n      if (\n        initialNodes?.length > 0 &&\n        (isFirstRender ||\n          JSON.stringify(initialNodes) !==\n            JSON.stringify(nodes.map((n) => ({ ...n, data: { ...n.data } }))))\n      ) {\n        console.log(\n          `[FLOW] Setting initial nodes once: ${initialNodes.length}`\n        );\n\n        // Clone sâu để tránh tham chiếu\n        const processedNodes = initialNodes.map((node) => ({\n          ...node,\n          type: \"courseNode\",\n          data: {\n            ...node.data,\n            showQuickToggle: true,\n            onQuickToggle: handleCompleteToggle,\n          },\n        }));\n\n        setNodes(processedNodes);\n      }\n\n      if (\n        initialEdges?.length > 0 &&\n        (isFirstRender ||\n          JSON.stringify(initialEdges) !== JSON.stringify(edges))\n      ) {\n        console.log(\n          `[FLOW] Setting initial edges once: ${initialEdges.length}`\n        );\n        setEdges([...initialEdges]);\n      }\n\n      isFirstRender = false;\n    };\n\n    updateInitialData();\n\n    // Thiết lập cho ResizeObserver\n    const viewportEl = document.querySelector(\".react-flow__viewport\");\n    if (viewportEl) {\n      viewportEl.style.transitionProperty = \"transform\";\n      viewportEl.style.transitionDuration = \"0.2s\";\n    }\n\n    return () => {\n      // Cleanup nếu cần\n    };\n  }, [initialNodes, initialEdges]);\n\n  // Thêm useEffect để cập nhật ngược lại khi nodes hoặc edges thay đổi nội bộ\n  useEffect(() => {\n    // Tránh gọi ngay khi component vừa được mount và đang xử lý nodes ban đầu\n    const timer = setTimeout(() => {\n      // Chỉ gọi callback khi có sự thay đổi thực sự và nodes không rỗng\n      if (\n        (nodes.length > 0 || edges.length > 0) &&\n        typeof onInternalUpdate === \"function\"\n      ) {\n        console.log(\"[FLOW] Current nodes changed internally:\", nodes.length);\n        console.log(\"[FLOW] Current edges changed internally:\", edges.length);\n        // Đảm bảo parent component luôn có trạng thái mới nhất\n        onInternalUpdate(nodes, edges);\n      }\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, [nodes, edges, onInternalUpdate]);\n\n  // Save current state for undo feature\n  const saveCurrentState = useCallback(() => {\n    setUndoStack((prev) => [...prev, { nodes: [...nodes], edges: [...edges] }]);\n    setRedoStack([]);\n  }, [nodes, edges]);\n\n  const onConnect = useCallback(\n    (params) => {\n      saveCurrentState();\n      // Add marker and apply current edge style settings\n      const newEdge = {\n        ...params,\n        id: `edge-${Date.now()}`,\n        type: \"smoothstep\",\n        animated: true,\n        style: { stroke: \"#6d28d9\" },\n        // Only add marker if connection type is arrow\n        ...(connectionType === \"arrow\" && {\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20,\n            color: \"#6d28d9\",\n          },\n        }),\n        data: {\n          connectionType,\n        },\n      };\n      setEdges((eds) => addEdge(newEdge, eds));\n\n      toast({\n        title: \"Connection added\",\n        description: \"A new connection has been created between nodes\",\n      });\n    },\n    [setEdges, saveCurrentState, toast, connectionType]\n  );\n\n  const onNodeClick = useCallback(\n    (event, node) => {\n      event.stopPropagation();\n\n      if (editMode === \"delete\") {\n        // Delete mode: remove the node\n        saveCurrentState();\n        setNodes(nodes.filter((n) => n.id !== node.id));\n        // Also remove any connected edges\n        setEdges(\n          edges.filter((e) => e.source !== node.id && e.target !== node.id)\n        );\n\n        toast({\n          title: \"Node deleted\",\n          description: `${node.data.label} has been removed from the roadmap`,\n        });\n      } else if (editMode === \"connect\" && selectedNode) {\n        // Connect mode: create an edge between selectedNode and this node\n        if (selectedNode.id !== node.id) {\n          const newEdge = {\n            id: `edge-${Date.now()}`,\n            source: selectedNode.id,\n            target: node.id,\n            type: \"smoothstep\",\n            animated: true,\n            style: { stroke: \"#6d28d9\" },\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          };\n\n          saveCurrentState();\n          setEdges((eds) => [...eds, newEdge]);\n          setSelectedNode(null);\n          setEditMode(\"select\");\n\n          toast({\n            title: \"Connection created\",\n            description: `Connected ${selectedNode.data.label} to ${node.data.label}`,\n          });\n        }\n      } else if (editMode === \"select\") {\n        // Regular select mode: show node details\n        setSelectedNode(node);\n      }\n    },\n    [\n      editMode,\n      selectedNode,\n      nodes,\n      edges,\n      setNodes,\n      setEdges,\n      saveCurrentState,\n      toast,\n    ]\n  );\n\n  const onPaneClick = useCallback(() => {\n    // In regular mode, clicking the pane should deselect the node\n    setSelectedNode(null);\n\n    // If in connect mode but no node selected, return to select mode\n    if (editMode === \"connect\" && selectedNode) {\n      setEditMode(\"select\");\n      setSelectedNode(null);\n      toast({\n        title: \"Connection cancelled\",\n        description: \"Node connection has been cancelled\",\n      });\n    }\n  }, [editMode, selectedNode, toast]);\n\n  const handleCompleteToggle = useCallback(\n    (nodeId, completed) => {\n      if (readOnly) return;\n\n      // Get the current timestamp\n      const completedAt = completed ? new Date().toISOString() : null;\n\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                completed,\n                completedAt,\n              },\n            };\n          }\n          return node;\n        })\n      );\n\n      toast({\n        title: completed\n          ? \"Course marked as completed\"\n          : \"Course marked as incomplete\",\n        description: `You've ${completed ? \"completed\" : \"unmarked\"} ${\n          nodes.find((n) => n.id === nodeId)?.data.label\n        }`,\n      });\n    },\n    [nodes, setNodes, toast, readOnly]\n  );\n\n  const handleSaveRoadmap = useCallback(() => {\n    if (onSave) {\n      console.log(\"[VIEW] Starting roadmap save process\");\n      console.log(\"[VIEW] Current nodes:\", nodes.length);\n      console.log(\"[VIEW] Current edges:\", edges.length);\n\n      // Đảm bảo không có node nào bị thiếu dữ liệu quan trọng\n      const cleanedNodes = nodes.map((node) => {\n        if (!node.id) {\n          console.error(\"[VIEW] Node missing ID:\", node);\n          // Generate a unique ID if missing\n          node.id = `node_${Date.now()}_${Math.random()\n            .toString(36)\n            .substring(2, 9)}`;\n        }\n\n        if (!node.position) {\n          console.error(\"[VIEW] Node missing position:\", node);\n          // Default position\n          node.position = { x: 0, y: 0 };\n        }\n\n        if (!node.data) {\n          console.error(\"[VIEW] Node missing data:\", node);\n          // Default minimal data\n          node.data = { label: \"Node \" + node.id };\n        }\n\n        // Đảm bảo node có đủ thông tin cần thiết\n        return {\n          ...node,\n          type: node.type || \"courseNode\", // Loại node mặc định\n          data: {\n            ...(node.data || {}),\n            id: node.id, // Đảm bảo ID trong data giống với ID của node\n            label: node.data?.label || \"Untitled\", // Ít nhất phải có nhãn\n          },\n        };\n      });\n\n      // Đảm bảo các edge có đủ thông tin cần thiết\n      const cleanedEdges = edges\n        .map((edge) => {\n          if (!edge.source || !edge.target) {\n            console.error(\"[VIEW] Edge missing source or target:\", edge);\n            return null; // Skip invalid edges\n          }\n\n          if (!edge.id) {\n            console.error(\"[VIEW] Edge missing ID:\", edge);\n            // Generate a unique ID if missing\n            edge.id = `edge_${Date.now()}_${Math.random()\n              .toString(36)\n              .substring(2, 9)}`;\n          }\n\n          return {\n            ...edge,\n            type: edge.type || \"smoothstep\", // Loại edge mặc định\n          };\n        })\n        .filter(Boolean); // Lọc bỏ các edge null\n\n      console.log(\"[VIEW] Cleaned nodes for saving:\", cleanedNodes.length);\n      console.log(\"[VIEW] Node data sample:\", cleanedNodes[0]);\n      console.log(\"[VIEW] Cleaned edges for saving:\", cleanedEdges.length);\n      if (cleanedEdges.length > 0) {\n        console.log(\"[VIEW] Edge data sample:\", cleanedEdges[0]);\n      }\n\n      // Thông báo cho người dùng\n      toast({\n        title: \"Saving roadmap...\",\n        description: `Saving ${cleanedNodes.length} nodes and ${cleanedEdges.length} edges`,\n      });\n\n      // Lưu dữ liệu vào trạng thái cục bộ\n      setNodes(cleanedNodes);\n      setEdges(cleanedEdges);\n\n      // Gọi hàm callback onSave để lưu dữ liệu\n      console.log(\"[VIEW] Calling onSave with cleaned data\");\n      onSave(cleanedNodes, cleanedEdges);\n    } else {\n      console.warn(\"[VIEW] Save handler not provided. Cannot save roadmap.\");\n      toast({\n        title: \"Cannot save roadmap\",\n        description: \"Save handler not configured\",\n        variant: \"destructive\",\n      });\n    }\n  }, [nodes, edges, onSave, toast, setNodes, setEdges]);\n\n  const handleAddCourse = useCallback(\n    (courseData) => {\n      saveCurrentState();\n\n      // Find a position that doesn't overlap with existing nodes\n      let position = { x: 100, y: 100 };\n\n      // If we have a reactFlowInstance, try to center the new node in the viewport\n      if (reactFlowInstance) {\n        const { x, y, zoom } = reactFlowInstance.getViewport();\n        position = reactFlowInstance.screenToFlowPosition({\n          x: window.innerWidth / 2,\n          y: window.innerHeight / 2,\n        });\n\n        // Avoid overlapping with existing nodes by adding some offset\n        const existingPositions = nodes.map((node) => node.position);\n        if (\n          existingPositions.some(\n            (pos) =>\n              Math.abs(pos.x - position.x) < 100 &&\n              Math.abs(pos.y - position.y) < 100\n          )\n        ) {\n          position.x += 150;\n          position.y += 50;\n        }\n      }\n\n      const newNodeId = `node-${Date.now()}`;\n      const newNode = {\n        id: newNodeId,\n        type: \"courseNode\",\n        position,\n        data: {\n          ...courseData,\n          completed: false,\n          completedAt: null,\n          showQuickToggle: true,\n          onQuickToggle: handleCompleteToggle,\n          id: newNodeId,\n        },\n      };\n\n      setNodes((nds) => [...nds, newNode]);\n      setIsAddCourseOpen(false);\n\n      toast({\n        title: \"Course added\",\n        description: `${courseData.label} has been added to the roadmap`,\n      });\n    },\n    [\n      setNodes,\n      toast,\n      reactFlowInstance,\n      nodes,\n      handleCompleteToggle,\n      saveCurrentState,\n    ]\n  );\n\n  const handleDeleteNode = useCallback(\n    (nodeId) => {\n      saveCurrentState();\n\n      // Remove the node\n      setNodes((nds) => nds.filter((node) => node.id !== nodeId));\n      // Remove connected edges\n      setEdges((eds) =>\n        eds.filter((edge) => edge.source !== nodeId && edge.target !== nodeId)\n      );\n\n      setSelectedNode(null);\n\n      toast({\n        title: \"Node deleted\",\n        description: \"The node has been removed from the roadmap\",\n      });\n    },\n    [setNodes, setEdges, toast, saveCurrentState]\n  );\n\n  const handleUpdateNodeStyle = useCallback(\n    (nodeId, style) => {\n      setNodes((nds) =>\n        nds.map((node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                ...style,\n              },\n            };\n          }\n          return node;\n        })\n      );\n    },\n    [setNodes]\n  );\n\n  const onEdgeClick = useCallback(\n    (event, edge) => {\n      if (editMode === \"delete\") {\n        saveCurrentState();\n\n        // Delete the edge\n        setEdges((eds) => eds.filter((e) => e.id !== edge.id));\n\n        toast({\n          title: \"Connection removed\",\n          description: \"The connection between nodes has been removed\",\n        });\n      }\n    },\n    [setEdges, editMode, saveCurrentState, toast]\n  );\n\n  const handleUndo = useCallback(() => {\n    if (undoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const previousState = undoStack[undoStack.length - 1];\n\n    setRedoStack((prev) => [...prev, currentState]);\n    setUndoStack((prev) => prev.slice(0, -1));\n\n    setNodes(previousState.nodes);\n    setEdges(previousState.edges);\n\n    toast({\n      title: \"Undo\",\n      description: \"Previous action undone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  const handleRedo = useCallback(() => {\n    if (redoStack.length === 0) return;\n\n    const currentState = { nodes: [...nodes], edges: [...edges] };\n    const nextState = redoStack[redoStack.length - 1];\n\n    setUndoStack((prev) => [...prev, currentState]);\n    setRedoStack((prev) => prev.slice(0, -1));\n\n    setNodes(nextState.nodes);\n    setEdges(nextState.edges);\n\n    toast({\n      title: \"Redo\",\n      description: \"Action redone\",\n    });\n  }, [undoStack, redoStack, nodes, edges, setNodes, setEdges, toast]);\n\n  // Update node positions when they are dragged\n  const onNodeDragStop = useCallback(() => {\n    if (isEditing) {\n      saveCurrentState();\n    }\n  }, [isEditing, saveCurrentState]);\n\n  // Handle category filtering\n  const filteredNodes = useCallback(() => {\n    if (selectedCategory === \"all\") {\n      return nodes;\n    }\n    return nodes.filter(\n      (node) =>\n        node.data.category?.toLowerCase() === selectedCategory.toLowerCase()\n    );\n  }, [nodes, selectedCategory]);\n\n  const handleStyleChange = useCallback(\n    (styles) => {\n      // Apply styles to selected node or default edge options\n      if (selectedNode) {\n        handleUpdateNodeStyle(selectedNode.id, styles.nodeStyle);\n      }\n\n      // Update default edge options\n      // (would be implemented in a full version)\n    },\n    [selectedNode, handleUpdateNodeStyle]\n  );\n\n  const handleConnectionTypeChange = useCallback((type) => {\n    setConnectionType(type);\n  }, []);\n\n  // Ngăn chặn cảnh báo ResizeObserver\n  useEffect(() => {\n    // Chỉ áp dụng trong môi trường phát triển\n    if (process.env.NODE_ENV !== \"production\") {\n      const originalError = console.error;\n      console.error = (...args) => {\n        if (\n          args[0]?.includes?.(\"ResizeObserver loop\") ||\n          args[0]?.message?.includes?.(\"ResizeObserver loop\")\n        ) {\n          // Bỏ qua cảnh báo ResizeObserver\n          return;\n        }\n        originalError.apply(console, args);\n      };\n\n      return () => {\n        console.error = originalError;\n      };\n    }\n  }, []);\n\n  return (\n    <div ref={reactFlowWrapper} className=\"h-full w-full\">\n      {isEditing && showEditorPanel && (\n        <Panel position=\"right\" className=\"w-72 mr-2\">\n          <RoadmapEditorPanel\n            onStyleChange={handleStyleChange}\n            onConnectionTypeChange={handleConnectionTypeChange}\n            activeEdgeStyle={connectionType}\n            editMode={editMode}\n            onEditModeChange={(mode) => {\n              setEditMode(mode);\n              if (mode === \"connect\") {\n                toast({\n                  title: \"Connect mode\",\n                  description:\n                    \"Click on a source node, then click on a target node to create a connection\",\n                });\n              } else if (mode === \"delete\") {\n                toast({\n                  title: \"Delete mode\",\n                  description: \"Click on a node or connection to delete it\",\n                });\n              }\n            }}\n            onAddNodeClick={() => setIsAddCourseOpen(true)}\n          />\n        </Panel>\n      )}\n\n      {isEditing && (\n        <Panel\n          position=\"top-right\"\n          className=\"bg-cyberpunk-darker/90 p-3 rounded-md border border-purple-500/30 mb-4 shadow-lg mr-[300px]\"\n        >\n          <div className=\"flex gap-2 justify-end\">\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleUndo}\n              disabled={undoStack.length === 0}\n            >\n              Undo\n            </Button>\n            <Button\n              size=\"sm\"\n              className=\"bg-cyberpunk-darker border border-purple-500/30 text-purple-300 hover:bg-purple-900/20\"\n              onClick={handleRedo}\n              disabled={redoStack.length === 0}\n            >\n              Redo\n            </Button>\n            <Button\n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n              size=\"sm\"\n              onClick={handleSaveRoadmap}\n            >\n              <Save className=\"h-4 w-4 mr-1\" /> Save\n            </Button>\n          </div>\n        </Panel>\n      )}\n\n      <div className=\"h-full\">\n        <ReactFlow\n          nodes={filteredNodes()}\n          edges={edges}\n          onNodesChange={isEditing ? onNodesChange : undefined}\n          onEdgesChange={isEditing ? onEdgesChange : undefined}\n          onConnect={isEditing ? onConnect : undefined}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          onPaneClick={onPaneClick}\n          nodeTypes={nodeTypes}\n          onNodeDragStop={onNodeDragStop}\n          nodesDraggable={isEditing}\n          nodesConnectable={isEditing && editMode === \"connect\"}\n          elementsSelectable={!readOnly}\n          defaultEdgeOptions={{\n            type: \"smoothstep\",\n            style: { stroke: \"#6d28d9\" },\n            animated: true,\n            ...(connectionType === \"arrow\" && {\n              markerEnd: {\n                type: MarkerType.ArrowClosed,\n                width: 20,\n                height: 20,\n                color: \"#6d28d9\",\n              },\n            }),\n            data: {\n              connectionType,\n            },\n          }}\n          fitView\n          minZoom={0.2}\n          maxZoom={4}\n          snapToGrid={true}\n          snapGrid={[10, 10]}\n          nodeExtent={[\n            [-1000, -1000],\n            [2000, 2000],\n          ]}\n          proOptions={{ hideAttribution: true }}\n        >\n          <Controls />\n          <MiniMap nodeStrokeWidth={3} zoomable pannable />\n          <Background variant=\"dots\" gap={12} size={1} color=\"#6d28d9\" />\n        </ReactFlow>\n      </div>\n\n      {selectedNode && (\n        <CourseInfoPanel\n          node={selectedNode}\n          onClose={() => setSelectedNode(null)}\n          onCompleteToggle={handleCompleteToggle}\n          onDelete={isEditing ? handleDeleteNode : undefined}\n          onUpdateStyle={handleUpdateNodeStyle}\n          isAdmin={isEditing}\n          readOnly={readOnly}\n        />\n      )}\n\n      {isAddCourseOpen && (\n        <AddCourseDialog\n          open={isAddCourseOpen}\n          onClose={() => setIsAddCourseOpen(false)}\n          onAdd={handleAddCourse}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function RoadmapView(props) {\n  return (\n    <ReactFlowProvider>\n      <RoadmapViewInner {...props} />\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}